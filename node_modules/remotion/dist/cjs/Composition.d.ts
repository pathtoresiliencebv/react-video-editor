import type { ComponentType, PropsWithChildren } from 'react';
import React from 'react';
import type { AnyZodObject } from 'zod';
import type { Codec } from './codec.js';
import type { InferProps, PropsIfHasProps } from './props-if-has-props.js';
type LooseComponentType<T> = ComponentType<T> | ((props: T) => React.ReactNode);
export type CompProps<Props> = {
    lazyComponent: () => Promise<{
        default: LooseComponentType<Props>;
    }>;
} | {
    component: LooseComponentType<Props>;
};
export type CalcMetadataReturnType<T extends Record<string, unknown>> = {
    durationInFrames?: number;
    fps?: number;
    width?: number;
    height?: number;
    props?: T;
    defaultCodec?: Codec;
};
export type CalculateMetadataFunction<T extends Record<string, unknown>> = (options: {
    defaultProps: T;
    props: T;
    abortSignal: AbortSignal;
    compositionId: string;
}) => Promise<CalcMetadataReturnType<T>> | CalcMetadataReturnType<T>;
type OptionalDimensions<Schema extends AnyZodObject, Props extends Record<string, unknown>> = {
    width?: number;
    height?: number;
    calculateMetadata: CalculateMetadataFunction<InferProps<Schema, Props>>;
};
type MandatoryDimensions<Schema extends AnyZodObject, Props extends Record<string, unknown>> = {
    width: number;
    height: number;
    calculateMetadata?: CalculateMetadataFunction<InferProps<Schema, Props>>;
};
type StillCalculateMetadataOrExplicit<Schema extends AnyZodObject, Props extends Record<string, unknown>> = OptionalDimensions<Schema, Props> | MandatoryDimensions<Schema, Props>;
type CompositionCalculateMetadataOrExplicit<Schema extends AnyZodObject, Props extends Record<string, unknown>> = (OptionalDimensions<Schema, Props> & {
    fps?: number;
    durationInFrames?: number;
}) | (MandatoryDimensions<Schema, Props> & {
    fps: number;
    durationInFrames: number;
});
export type StillProps<Schema extends AnyZodObject, Props extends Record<string, unknown>> = {
    id: string;
    schema?: Schema;
} & StillCalculateMetadataOrExplicit<Schema, Props> & CompProps<Props> & PropsIfHasProps<Schema, Props>;
export declare const ClipComposition: React.FC<PropsWithChildren>;
export type CompositionProps<Schema extends AnyZodObject, Props extends Record<string, unknown>> = {
    readonly id: string;
    readonly schema?: Schema;
} & CompositionCalculateMetadataOrExplicit<Schema, Props> & CompProps<Props> & PropsIfHasProps<Schema, Props>;
/**
 * @description This component is used to register a video to make it renderable and make it show in the sidebar, in dev mode.
 * @see [Documentation](https://www.remotion.dev/docs/composition)
 */
export declare const Composition: <Schema extends AnyZodObject, Props extends Record<string, unknown>>({ width, height, fps, durationInFrames, id, defaultProps, schema, ...compProps }: CompositionProps<Schema, Props>) => React.ReactPortal | null;
export {};
