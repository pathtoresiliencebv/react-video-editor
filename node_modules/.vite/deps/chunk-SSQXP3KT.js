import {
  require_react_dom
} from "./chunk-SHKDMIPV.js";
import {
  require_jsx_runtime
} from "./chunk-U3R7WRSZ.js";
import {
  require_react
} from "./chunk-XO35FAC6.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/.pnpm/remotion@4.0.221_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/remotion/dist/esm/index.mjs
var esm_exports = {};
__export(esm_exports, {
  AbsoluteFill: () => AbsoluteFill,
  Artifact: () => Artifact,
  Audio: () => Audio,
  Composition: () => Composition,
  Config: () => Config,
  Easing: () => Easing,
  Experimental: () => Experimental,
  Folder: () => Folder,
  FolderContext: () => FolderContext,
  Freeze: () => Freeze,
  IFrame: () => IFrame,
  Img: () => Img,
  Internals: () => Internals,
  Loop: () => Loop,
  OffthreadVideo: () => OffthreadVideo,
  Sequence: () => Sequence,
  Series: () => Series,
  Still: () => Still,
  VERSION: () => VERSION,
  Video: () => Video,
  cancelRender: () => cancelRender,
  continueRender: () => continueRender,
  delayRender: () => delayRender,
  getInputProps: () => getInputProps,
  getRemotionEnvironment: () => getRemotionEnvironment,
  getStaticFiles: () => getStaticFiles,
  interpolate: () => interpolate,
  interpolateColors: () => interpolateColors,
  measureSpring: () => measureSpring,
  prefetch: () => prefetch,
  random: () => random,
  registerRoot: () => registerRoot,
  spring: () => spring,
  staticFile: () => staticFile,
  useBufferState: () => useBufferState,
  useCurrentFrame: () => useCurrentFrame,
  useCurrentScale: () => useCurrentScale,
  useVideoConfig: () => useVideoConfig,
  watchStaticFile: () => watchStaticFile
});
function getNodeEnvString() {
  return ["NOD", "E_EN", "V"].join("");
}
function truthy(value) {
  return Boolean(value);
}
function validateDefaultCodec(defaultCodec, location) {
  if (typeof defaultCodec === "undefined") {
    return;
  }
  if (typeof defaultCodec !== "string") {
    throw new TypeError(`The "defaultCodec" prop ${location} must be a string, but you passed a value of type ${typeof defaultCodec}.`);
  }
  if (!validCodecs.includes(defaultCodec)) {
    throw new Error(`The "defaultCodec" prop ${location} must be one of ${validCodecs.join(", ")}, but you passed ${defaultCodec}.`);
  }
}
function validateDimension(amount, nameOfProp, location) {
  if (typeof amount !== "number") {
    throw new Error(`The "${nameOfProp}" prop ${location} must be a number, but you passed a value of type ${typeof amount}`);
  }
  if (isNaN(amount)) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must not be NaN, but is NaN.`);
  }
  if (!Number.isFinite(amount)) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must be finite, but is ${amount}.`);
  }
  if (amount % 1 !== 0) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must be an integer, but is ${amount}.`);
  }
  if (amount <= 0) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must be positive, but got ${amount}.`);
  }
}
function validateDurationInFrames(durationInFrames, options) {
  const { allowFloats, component } = options;
  if (typeof durationInFrames === "undefined") {
    throw new Error(`The "durationInFrames" prop ${component} is missing.`);
  }
  if (typeof durationInFrames !== "number") {
    throw new Error(`The "durationInFrames" prop ${component} must be a number, but you passed a value of type ${typeof durationInFrames}`);
  }
  if (durationInFrames <= 0) {
    throw new TypeError(`The "durationInFrames" prop ${component} must be positive, but got ${durationInFrames}.`);
  }
  if (!allowFloats && durationInFrames % 1 !== 0) {
    throw new TypeError(`The "durationInFrames" prop ${component} must be an integer, but got ${durationInFrames}.`);
  }
  if (!Number.isFinite(durationInFrames)) {
    throw new TypeError(`The "durationInFrames" prop ${component} must be finite, but got ${durationInFrames}.`);
  }
}
function validateFps(fps, location, isGif) {
  if (typeof fps !== "number") {
    throw new Error(`"fps" must be a number, but you passed a value of type ${typeof fps} ${location}`);
  }
  if (!Number.isFinite(fps)) {
    throw new Error(`"fps" must be a finite, but you passed ${fps} ${location}`);
  }
  if (isNaN(fps)) {
    throw new Error(`"fps" must not be NaN, but got ${fps} ${location}`);
  }
  if (fps <= 0) {
    throw new TypeError(`"fps" must be positive, but got ${fps} ${location}`);
  }
  if (isGif && fps > 50) {
    throw new TypeError(`The FPS for a GIF cannot be higher than 50. Use the --every-nth-frame option to lower the FPS: https://remotion.dev/docs/render-as-gif`);
  }
}
function cancelRender(err) {
  let error;
  if (isErrorLike(err)) {
    error = err;
    if (!error.stack) {
      error.stack = new Error(error.message).stack;
    }
  } else if (typeof err === "string") {
    error = Error(err);
  } else {
    error = Error("Rendering was cancelled");
  }
  window.remotion_cancelledError = error.stack;
  throw error;
}
function mulberry32(a2) {
  let t = a2 + 1831565813;
  t = Math.imul(t ^ t >>> 15, t | 1);
  t ^= t + Math.imul(t ^ t >>> 7, t | 61);
  return ((t ^ t >>> 14) >>> 0) / 4294967296;
}
function hashCode(str) {
  let i = 0;
  let chr = 0;
  let hash = 0;
  for (i = 0; i < str.length; i++) {
    chr = str.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0;
  }
  return hash;
}
function interpolateFunction(input, inputRange, outputRange, options) {
  const { extrapolateLeft, extrapolateRight, easing } = options;
  let result = input;
  const [inputMin, inputMax] = inputRange;
  const [outputMin, outputMax] = outputRange;
  if (result < inputMin) {
    if (extrapolateLeft === "identity") {
      return result;
    }
    if (extrapolateLeft === "clamp") {
      result = inputMin;
    } else if (extrapolateLeft === "wrap") {
      const range = inputMax - inputMin;
      result = ((result - inputMin) % range + range) % range + inputMin;
    } else if (extrapolateLeft === "extend") {
    }
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity") {
      return result;
    }
    if (extrapolateRight === "clamp") {
      result = inputMax;
    } else if (extrapolateRight === "wrap") {
      const range = inputMax - inputMin;
      result = ((result - inputMin) % range + range) % range + inputMin;
    } else if (extrapolateRight === "extend") {
    }
  }
  if (outputMin === outputMax) {
    return outputMin;
  }
  result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  let i;
  for (i = 1; i < inputRange.length - 1; ++i) {
    if (inputRange[i] >= input) {
      break;
    }
  }
  return i - 1;
}
function checkValidInputRange(arr) {
  for (let i = 1; i < arr.length; ++i) {
    if (!(arr[i] > arr[i - 1])) {
      throw new Error(`inputRange must be strictly monotonically increasing but got [${arr.join(",")}]`);
    }
  }
}
function checkInfiniteRange(name, arr) {
  if (arr.length < 2) {
    throw new Error(name + " must have at least 2 elements");
  }
  for (const element of arr) {
    if (typeof element !== "number") {
      throw new Error(`${name} must contain only numbers`);
    }
    if (!Number.isFinite(element)) {
      throw new Error(`${name} must contain only finite numbers, but got [${arr.join(",")}]`);
    }
  }
}
function interpolate(input, inputRange, outputRange, options) {
  if (typeof input === "undefined") {
    throw new Error("input can not be undefined");
  }
  if (typeof inputRange === "undefined") {
    throw new Error("inputRange can not be undefined");
  }
  if (typeof outputRange === "undefined") {
    throw new Error("outputRange can not be undefined");
  }
  if (inputRange.length !== outputRange.length) {
    throw new Error("inputRange (" + inputRange.length + ") and outputRange (" + outputRange.length + ") must have the same length");
  }
  checkInfiniteRange("inputRange", inputRange);
  checkInfiniteRange("outputRange", outputRange);
  checkValidInputRange(inputRange);
  const easing = (options == null ? void 0 : options.easing) ?? ((num) => num);
  let extrapolateLeft = "extend";
  if ((options == null ? void 0 : options.extrapolateLeft) !== void 0) {
    extrapolateLeft = options.extrapolateLeft;
  }
  let extrapolateRight = "extend";
  if ((options == null ? void 0 : options.extrapolateRight) !== void 0) {
    extrapolateRight = options.extrapolateRight;
  }
  if (typeof input !== "number") {
    throw new TypeError("Cannot interpolate an input which is not a number");
  }
  const range = findRange(input, inputRange);
  return interpolateFunction(input, [inputRange[range], inputRange[range + 1]], [outputRange[range], outputRange[range + 1]], {
    easing,
    extrapolateLeft,
    extrapolateRight
  });
}
function a(aA1, aA2) {
  return 1 - 3 * aA2 + 3 * aA1;
}
function b(aA1, aA2) {
  return 3 * aA2 - 6 * aA1;
}
function c(aA1) {
  return 3 * aA1;
}
function calcBezier(aT, aA1, aA2) {
  return ((a(aA1, aA2) * aT + b(aA1, aA2)) * aT + c(aA1)) * aT;
}
function getSlope(aT, aA1, aA2) {
  return 3 * a(aA1, aA2) * aT * aT + 2 * b(aA1, aA2) * aT + c(aA1);
}
function binarySubdivide({
  aX,
  _aA,
  _aB,
  mX1,
  mX2
}) {
  let currentX;
  let currentT;
  let i = 0;
  let aA = _aA;
  let aB = _aB;
  do {
    currentT = aA + (aB - aA) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}
function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {
  let aGuessT = _aGuessT;
  for (let i = 0; i < NEWTON_ITERATIONS; ++i) {
    const currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0) {
      return aGuessT;
    }
    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}
function bezier(mX1, mY1, mX2, mY2) {
  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
    throw new Error("bezier x values must be in [0, 1] range");
  }
  const sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  if (mX1 !== mY1 || mX2 !== mY2) {
    for (let i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }
  function getTForX(aX) {
    let intervalStart = 0;
    let currentSample = 1;
    const lastSample = kSplineTableSize - 1;
    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    const guessForT = intervalStart + dist * kSampleStepSize;
    const initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    }
    if (initialSlope === 0) {
      return guessForT;
    }
    return binarySubdivide({
      aX,
      _aA: intervalStart,
      _aB: intervalStart + kSampleStepSize,
      mX1,
      mX2
    });
  }
  return function(x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x;
    }
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
}
function exponentialBackoff(errorCount) {
  return 1e3 * 2 ** (errorCount - 1);
}
function useRemotionContexts() {
  const compositionManagerCtx = import_react52.default.useContext(CompositionManager);
  const timelineContext = import_react52.default.useContext(TimelineContext);
  const setTimelineContext = import_react52.default.useContext(SetTimelineContext);
  const sequenceContext = import_react52.default.useContext(SequenceContext);
  const nonceContext = import_react52.default.useContext(NonceContext);
  const canUseRemotionHooksContext = import_react52.default.useContext(CanUseRemotionHooks);
  const nativeLayersContext = import_react52.default.useContext(NativeLayersContext);
  const preloadContext = import_react52.default.useContext(PreloadContext);
  const resolveCompositionContext = import_react52.default.useContext(ResolveCompositionContext);
  const renderAssetManagerContext = import_react52.default.useContext(RenderAssetManager);
  const sequenceManagerContext = import_react52.default.useContext(SequenceManager);
  const bufferManagerContext = import_react52.default.useContext(BufferingContextReact);
  return (0, import_react52.useMemo)(() => ({
    compositionManagerCtx,
    timelineContext,
    setTimelineContext,
    sequenceContext,
    nonceContext,
    canUseRemotionHooksContext,
    nativeLayersContext,
    preloadContext,
    resolveCompositionContext,
    renderAssetManagerContext,
    sequenceManagerContext,
    bufferManagerContext
  }), [
    compositionManagerCtx,
    nonceContext,
    sequenceContext,
    setTimelineContext,
    timelineContext,
    canUseRemotionHooksContext,
    nativeLayersContext,
    preloadContext,
    resolveCompositionContext,
    renderAssetManagerContext,
    sequenceManagerContext,
    bufferManagerContext
  ]);
}
function call(...args) {
  return "\\(\\s*(" + args.join(")\\s*,\\s*(") + ")\\s*\\)";
}
function getMatchers() {
  const cachedMatchers = {
    rgb: void 0,
    rgba: void 0,
    hsl: void 0,
    hsla: void 0,
    hex3: void 0,
    hex4: void 0,
    hex5: void 0,
    hex6: void 0,
    hex8: void 0
  };
  if (cachedMatchers.rgb === void 0) {
    cachedMatchers.rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
    cachedMatchers.rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
    cachedMatchers.hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
    cachedMatchers.hsla = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
    cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
    cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
    cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;
    cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;
  }
  return cachedMatchers;
}
function hue2rgb(p, q, t) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * 6 * t;
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}
function hslToRgb(h, s, l) {
  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
  const p = 2 * l - q;
  const r = hue2rgb(p, q, h + 1 / 3);
  const g = hue2rgb(p, q, h);
  const b2 = hue2rgb(p, q, h - 1 / 3);
  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b2 * 255) << 8;
}
function parse255(str) {
  const int = Number.parseInt(str, 10);
  if (int < 0) {
    return 0;
  }
  if (int > 255) {
    return 255;
  }
  return int;
}
function parse360(str) {
  const int = Number.parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = Number.parseFloat(str);
  if (num < 0) {
    return 0;
  }
  if (num > 1) {
    return 255;
  }
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = Number.parseFloat(str);
  if (int < 0) {
    return 0;
  }
  if (int > 100) {
    return 1;
  }
  return int / 100;
}
function normalizeColor(color) {
  const matchers = getMatchers();
  let match;
  if (matchers.hex6) {
    if (match = matchers.hex6.exec(color)) {
      return Number.parseInt(match[1] + "ff", 16) >>> 0;
    }
  }
  if (colorNames[color] !== void 0) {
    return colorNames[color];
  }
  if (matchers.rgb) {
    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;
    }
  }
  if (matchers.rgba) {
    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }
  }
  if (matchers.hex3) {
    if (match = matchers.hex3.exec(color)) {
      return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
    }
  }
  if (matchers.hex8) {
    if (match = matchers.hex8.exec(color)) {
      return Number.parseInt(match[1], 16) >>> 0;
    }
  }
  if (matchers.hex4) {
    if (match = matchers.hex4.exec(color)) {
      return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }
  }
  if (matchers.hsl) {
    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;
    }
  }
  if (matchers.hsla) {
    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }
  }
  throw new Error(`invalid color string ${color} provided`);
}
function processColor(color) {
  const normalizedColor = normalizeColor(color);
  return (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;
}
function advance({
  animation,
  now,
  config
}) {
  const { toValue, lastTimestamp, current, velocity } = animation;
  const deltaTime = Math.min(now - lastTimestamp, 64);
  if (config.damping <= 0) {
    throw new Error("Spring damping must be greater than 0, otherwise the spring() animation will never end, causing an infinite loop.");
  }
  const c2 = config.damping;
  const m = config.mass;
  const k = config.stiffness;
  const cacheKey = [
    toValue,
    lastTimestamp,
    current,
    velocity,
    c2,
    m,
    k,
    now
  ].join("-");
  if (advanceCache[cacheKey]) {
    return advanceCache[cacheKey];
  }
  const v0 = -velocity;
  const x0 = toValue - current;
  const zeta = c2 / (2 * Math.sqrt(k * m));
  const omega0 = Math.sqrt(k / m);
  const omega1 = omega0 * Math.sqrt(1 - zeta ** 2);
  const t = deltaTime / 1e3;
  const sin1 = Math.sin(omega1 * t);
  const cos1 = Math.cos(omega1 * t);
  const underDampedEnvelope = Math.exp(-zeta * omega0 * t);
  const underDampedFrag1 = underDampedEnvelope * (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);
  const underDampedPosition = toValue - underDampedFrag1;
  const underDampedVelocity = zeta * omega0 * underDampedFrag1 - underDampedEnvelope * (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);
  const criticallyDampedEnvelope = Math.exp(-omega0 * t);
  const criticallyDampedPosition = toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);
  const criticallyDampedVelocity = criticallyDampedEnvelope * (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);
  const animationNode = {
    toValue,
    prevPosition: current,
    lastTimestamp: now,
    current: zeta < 1 ? underDampedPosition : criticallyDampedPosition,
    velocity: zeta < 1 ? underDampedVelocity : criticallyDampedVelocity
  };
  advanceCache[cacheKey] = animationNode;
  return animationNode;
}
function springCalculation({
  frame,
  fps,
  config = {}
}) {
  const from = 0;
  const to = 1;
  const cacheKey = [
    frame,
    fps,
    config.damping,
    config.mass,
    config.overshootClamping,
    config.stiffness
  ].join("-");
  if (calculationCache[cacheKey]) {
    return calculationCache[cacheKey];
  }
  let animation = {
    lastTimestamp: 0,
    current: from,
    toValue: to,
    velocity: 0,
    prevPosition: 0
  };
  const frameClamped = Math.max(0, frame);
  const unevenRest = frameClamped % 1;
  for (let f = 0; f <= Math.floor(frameClamped); f++) {
    if (f === Math.floor(frameClamped)) {
      f += unevenRest;
    }
    const time = f / fps * 1e3;
    animation = advance({
      animation,
      now: time,
      config: {
        ...defaultSpringConfig,
        ...config
      }
    });
  }
  calculationCache[cacheKey] = animation;
  return animation;
}
function measureSpring({
  fps,
  config = {},
  threshold = 5e-3
}) {
  if (typeof threshold !== "number") {
    throw new TypeError(`threshold must be a number, got ${threshold} of type ${typeof threshold}`);
  }
  if (threshold === 0) {
    return Infinity;
  }
  if (threshold === 1) {
    return 0;
  }
  if (isNaN(threshold)) {
    throw new TypeError("Threshold is NaN");
  }
  if (!Number.isFinite(threshold)) {
    throw new TypeError("Threshold is not finite");
  }
  if (threshold < 0) {
    throw new TypeError("Threshold is below 0");
  }
  const cacheKey = [
    fps,
    config.damping,
    config.mass,
    config.overshootClamping,
    config.stiffness,
    threshold
  ].join("-");
  if (cache.has(cacheKey)) {
    return cache.get(cacheKey);
  }
  validateFps(fps, "to the measureSpring() function", false);
  let frame = 0;
  let finishedFrame = 0;
  const calc = () => {
    return springCalculation({
      fps,
      frame,
      config
    });
  };
  let animation = calc();
  const calcDifference = () => {
    return Math.abs(animation.current - animation.toValue);
  };
  let difference = calcDifference();
  while (difference >= threshold) {
    frame++;
    animation = calc();
    difference = calcDifference();
  }
  finishedFrame = frame;
  for (let i = 0; i < 20; i++) {
    frame++;
    animation = calc();
    difference = calcDifference();
    if (difference >= threshold) {
      i = 0;
      finishedFrame = frame + 1;
    }
  }
  cache.set(cacheKey, finishedFrame);
  return finishedFrame;
}
function spring({
  frame: passedFrame,
  fps,
  config = {},
  from = 0,
  to = 1,
  durationInFrames: passedDurationInFrames,
  durationRestThreshold,
  delay = 0,
  reverse = false
}) {
  validateSpringDuration(passedDurationInFrames);
  validateFrame({
    frame: passedFrame,
    durationInFrames: Infinity,
    allowFloats: true
  });
  validateFps(fps, "to spring()", false);
  const needsToCalculateNaturalDuration = reverse || typeof passedDurationInFrames !== "undefined";
  const naturalDuration = needsToCalculateNaturalDuration ? measureSpring({
    fps,
    config,
    threshold: durationRestThreshold
  }) : void 0;
  const naturalDurationGetter = needsToCalculateNaturalDuration ? {
    get: () => naturalDuration
  } : {
    get: () => {
      throw new Error("did not calculate natural duration, this is an error with Remotion. Please report");
    }
  };
  const reverseProcessed = reverse ? (passedDurationInFrames ?? naturalDurationGetter.get()) - passedFrame : passedFrame;
  const delayProcessed = reverseProcessed + (reverse ? delay : -delay);
  const durationProcessed = passedDurationInFrames === void 0 ? delayProcessed : delayProcessed / (passedDurationInFrames / naturalDurationGetter.get());
  if (passedDurationInFrames && delayProcessed > passedDurationInFrames) {
    return to;
  }
  const spr = springCalculation({
    fps,
    frame: durationProcessed,
    config
  });
  const inner2 = config.overshootClamping ? to >= from ? Math.min(spr.current, to) : Math.max(spr.current, to) : spr.current;
  const interpolated = from === 0 && to === 1 ? inner2 : interpolate(inner2, [0, 1], [from, to]);
  return interpolated;
}
var import_react, import_react2, import_react3, import_jsx_runtime, import_react4, import_react5, import_jsx_runtime2, import_react6, import_react7, import_react8, import_jsx_runtime3, import_react9, import_react10, import_jsx_runtime4, import_react11, import_react12, import_react13, import_react14, import_react15, import_react16, import_jsx_runtime5, import_jsx_runtime6, import_react17, import_react18, import_jsx_runtime7, import_react19, import_react20, import_react21, import_jsx_runtime8, import_jsx_runtime9, import_react22, import_react23, import_jsx_runtime10, import_react24, import_react25, import_jsx_runtime11, import_react26, import_react27, import_jsx_runtime12, import_react28, import_jsx_runtime13, import_react29, import_react30, import_react31, import_react32, import_react33, import_react34, import_react35, import_jsx_runtime14, import_react36, import_react37, import_react38, import_react39, import_react40, import_react41, import_react42, import_jsx_runtime15, import_jsx_runtime16, import_react43, import_jsx_runtime17, import_jsx_runtime18, import_react44, import_react_dom, import_react45, import_jsx_runtime19, import_jsx_runtime20, import_react46, import_jsx_runtime21, import_react47, import_jsx_runtime22, import_react48, import_jsx_runtime23, import_react49, import_jsx_runtime24, import_react50, import_jsx_runtime25, import_react51, import_react52, import_jsx_runtime26, import_react53, import_react54, import_react55, import_jsx_runtime27, import_jsx_runtime28, import_react56, import_react57, import_react58, import_jsx_runtime29, import_react59, import_react60, import_jsx_runtime30, import_jsx_runtime31, import_react61, import_react62, import_jsx_runtime32, import_jsx_runtime33, __defProp, __export2, NativeLayersContext, NativeLayersProvider, Clipper, getEnvString, getRemotionEnvironment, originalCreateElement, componentsToAddStacksTo, enableSequenceStackTraces, addSequenceStackTraces, IsPlayerContext, IsPlayerContextProvider, useIsPlayer, VERSION, checkMultipleRemotionVersions, Null, AbsoluteFillRefForwarding, AbsoluteFill, SequenceContext, SequenceManager, SequenceVisibilityToggleContext, SequenceManagerProvider, NonceContext, useNonce, exports_timeline_position_state, CompositionManager, EditorPropsContext, editorPropsProviderRef, EditorPropsProvider, problematicCharacters, didWarn, warnOnce, includesHexOfUnsafeChar, trimLeadingSlash, inner, encodeBySplitting, staticFile, DATE_TOKEN, FILE_TOKEN, serializeJSONWithDate, deserializeJSONWithCustomFields, serializeThenDeserializeInStudio, didWarnSSRImport, warnOnceSSRImport, getInputProps, validCodecs, validateCalculated, resolveVideoConfig, resolveVideoConfigOrCatch, ResolveCompositionContext, resolveCompositionsRef, needsResolution, PROPS_UPDATED_EXTERNALLY, ResolveCompositionConfig, useResolvedVideoConfig, useVideo, TimelineContext, SetTimelineContext, makeKey, persistCurrentFrame, getInitialFrameState, getFrameForComposition, useTimelinePosition, useTimelineSetFrame, usePlayingState, CanUseRemotionHooks, CanUseRemotionHooksProvider, useUnsafeVideoConfig, useVideoConfig, useCurrentFrame, Freeze, RegularSequenceRefForwardingFunction, RegularSequence, PremountedSequenceRefForwardingFunction, PremountedSequence, SequenceRefForwardingFunction, Sequence, validateArtifactFilename, validateContent, validateRenderAsset, RenderAssetManager, RenderAssetManagerProvider, Artifact, getAbsoluteSrc, calculateLoopDuration, isErrorLike, LoopContext, useLoop, Loop, PreloadContext, preloads, updaters, setPreloads, PrefetchProvider, usePreload, blobToBase64, getBlobFromReader, prefetch, validateMediaProps, validateStartFromProps, durationReducer, DurationsContext, DurationsContextProvider, random, useMediaStartsAt, useFrameForVolumeProp, getAssetDisplayName, playAndHandleNotAllowedError, evaluateVolume, didWarn2, warnOnce2, useMediaInTimeline, useBufferManager, BufferingContextReact, BufferingProvider, useIsPlayerBuffering, useBufferState, useBufferUntilFirstFrame, useMediaBuffering, useRequestVideoCallbackTime, getExpectedMediaFrameUncorrected, getMediaTime, toSeconds, isIosSafari, isIOSSafariAndBlob, getVideoFragmentStart, getVideoFragmentEnd, appendVideoFragment, isSubsetOfDuration, useAppendVideoFragment, alreadyWarned, warnAboutNonSeekableMedia, DEFAULT_ACCEPTABLE_TIMESHIFT, seek, useMediaPlayback, useMediaTagVolume, FLOATING_POINT_ERROR_THRESHOLD, isApproximatelyTheSame, useSyncVolumeWithMediaTag, MediaVolumeContext, SetMediaVolumeContext, useMediaVolumeState, useMediaMutedState, EMPTY_AUDIO, compareProps, didPropChange, SharedAudioContext, SharedAudioContextProvider, useSharedAudio, AudioForDevelopmentForwardRefFunction, AudioForPreview, handles, DELAY_RENDER_CALLSTACK_TOKEN, DELAY_RENDER_RETRIES_LEFT, DELAY_RENDER_RETRY_TOKEN, defaultTimeout, delayRender, continueRender, AudioForRenderingRefForwardingFunction, AudioForRendering, AudioRefForwardingFunction, Audio, getRegex, isFolderNameValid, validateFolderName, invalidFolderNameErrorMessage, FolderContext, Folder, rotate, ICON_SIZE, label, container, Loading, _portalNode, portalNode, useLazyComponent, getRegex2, isCompositionIdValid, validateCompositionId, invalidCompositionErrorMessage, validateDefaultAndInputProps, ClipComposition, Fallback, Composition, compositionsRef, CompositionManagerProvider, NEWTON_ITERATIONS, NEWTON_MIN_SLOPE, SUBDIVISION_PRECISION, SUBDIVISION_MAX_ITERATIONS, kSplineTableSize, kSampleStepSize, float32ArraySupported, Easing, ENABLE_V5_BREAKING_CHANGES, warnedServer, warnedPlayer, warnServerOnce, warnPlayerOnce, getStaticFiles, IFrameRefForwarding, IFrame, ImgRefForwarding, Img, exports_default_css, injected, injectCSS, OFFTHREAD_VIDEO_CLASS_NAME, makeDefaultPreviewCSS, REMOTION_STUDIO_CONTAINER_ELEMENT, getPreviewDomElement, Root, listeners, registerRoot, getRoot, waitForRoot, RemotionRoot, getEnvVariables, setupEnvVariables, CurrentScaleContext, PreviewSizeContext, calculateScale, useCurrentScale, WATCH_REMOTION_STATIC_FILES, watchStaticFile, RemotionContextProvider, Internals, NUMBER, PERCENTAGE, colorNames, opacity, red, green, blue, rgbaColor, interpolateColorsRGB, interpolateColors, validateFrame, getOffthreadVideoSource, flattenChildren, IsInsideSeriesContext, IsInsideSeriesContainer, IsNotInsideSeriesProvider, useRequireToBeInsideSeries, SeriesSequenceRefForwardingFunction, SeriesSequence, Series, validateSpringDuration, defaultSpringConfig, advanceCache, calculationCache, cache, Still, OffthreadVideoForRendering, useEmitVideoFrame, VideoForDevelopmentRefForwardingFunction, VideoForPreview, OffthreadVideo, roundTo6Commas, seekToTime, seekToTimeMultipleUntilRight, VideoForRenderingForwardFunction, VideoForRendering, VideoForwardingFunction, Video, Experimental, proxyObj, Config;
var init_esm = __esm({
  "node_modules/.pnpm/remotion@4.0.221_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/remotion/dist/esm/index.mjs"() {
    import_react = __toESM(require_react(), 1);
    import_react2 = __toESM(require_react(), 1);
    import_react3 = __toESM(require_react(), 1);
    import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
    import_react4 = __toESM(require_react(), 1);
    import_react5 = __toESM(require_react(), 1);
    import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
    import_react6 = __toESM(require_react(), 1);
    import_react7 = __toESM(require_react(), 1);
    import_react8 = __toESM(require_react(), 1);
    import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
    import_react9 = __toESM(require_react(), 1);
    import_react10 = __toESM(require_react(), 1);
    import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
    import_react11 = __toESM(require_react(), 1);
    import_react12 = __toESM(require_react(), 1);
    import_react13 = __toESM(require_react(), 1);
    import_react14 = __toESM(require_react(), 1);
    import_react15 = __toESM(require_react(), 1);
    import_react16 = __toESM(require_react(), 1);
    import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
    import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
    import_react17 = __toESM(require_react(), 1);
    import_react18 = __toESM(require_react(), 1);
    import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
    import_react19 = __toESM(require_react(), 1);
    import_react20 = __toESM(require_react(), 1);
    import_react21 = __toESM(require_react(), 1);
    import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
    import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
    import_react22 = __toESM(require_react(), 1);
    import_react23 = __toESM(require_react(), 1);
    import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
    import_react24 = __toESM(require_react(), 1);
    import_react25 = __toESM(require_react(), 1);
    import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
    import_react26 = __toESM(require_react(), 1);
    import_react27 = __toESM(require_react(), 1);
    import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
    import_react28 = __toESM(require_react(), 1);
    import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
    import_react29 = __toESM(require_react(), 1);
    import_react30 = __toESM(require_react(), 1);
    import_react31 = __toESM(require_react(), 1);
    import_react32 = __toESM(require_react(), 1);
    import_react33 = __toESM(require_react(), 1);
    import_react34 = __toESM(require_react(), 1);
    import_react35 = __toESM(require_react(), 1);
    import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
    import_react36 = __toESM(require_react(), 1);
    import_react37 = __toESM(require_react(), 1);
    import_react38 = __toESM(require_react(), 1);
    import_react39 = __toESM(require_react(), 1);
    import_react40 = __toESM(require_react(), 1);
    import_react41 = __toESM(require_react(), 1);
    import_react42 = __toESM(require_react(), 1);
    import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
    import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
    import_react43 = __toESM(require_react(), 1);
    import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
    import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
    import_react44 = __toESM(require_react(), 1);
    import_react_dom = __toESM(require_react_dom(), 1);
    import_react45 = __toESM(require_react(), 1);
    import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
    import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
    import_react46 = __toESM(require_react(), 1);
    import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
    import_react47 = __toESM(require_react(), 1);
    import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
    import_react48 = __toESM(require_react(), 1);
    import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
    import_react49 = __toESM(require_react(), 1);
    import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
    import_react50 = __toESM(require_react(), 1);
    import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
    import_react51 = __toESM(require_react(), 1);
    import_react52 = __toESM(require_react(), 1);
    import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
    import_react53 = __toESM(require_react(), 1);
    import_react54 = __toESM(require_react(), 1);
    import_react55 = __toESM(require_react(), 1);
    import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
    import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
    import_react56 = __toESM(require_react(), 1);
    import_react57 = __toESM(require_react(), 1);
    import_react58 = __toESM(require_react(), 1);
    import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
    import_react59 = __toESM(require_react(), 1);
    import_react60 = __toESM(require_react(), 1);
    import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
    import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
    import_react61 = __toESM(require_react(), 1);
    import_react62 = __toESM(require_react(), 1);
    import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
    import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
    __defProp = Object.defineProperty;
    __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, {
          get: all[name],
          enumerable: true,
          configurable: true,
          set: (newValue) => all[name] = () => newValue
        });
    };
    if (typeof import_react.createContext !== "function") {
      const err = [
        'Remotion requires React.createContext, but it is "undefined".',
        'If you are in a React Server Component, turn it into a client component by adding "use client" at the top of the file.',
        "",
        "Before:",
        '  import {useCurrentFrame} from "remotion";',
        "",
        "After:",
        '  "use client";',
        '  import {useCurrentFrame} from "remotion";'
      ];
      throw new Error(err.join("\n"));
    }
    NativeLayersContext = (0, import_react3.createContext)({
      setClipRegion: () => {
        throw new Error("NativeLayers not set");
      },
      clipRegion: null
    });
    NativeLayersProvider = ({
      children
    }) => {
      const [clipRegion, setClipRegion] = (0, import_react3.useState)(null);
      const context = (0, import_react3.useMemo)(() => {
        return {
          setClipRegion,
          clipRegion
        };
      }, [clipRegion, setClipRegion]);
      if (typeof window !== "undefined") {
        (0, import_react3.useLayoutEffect)(() => {
          window.remotion_getClipRegion = () => {
            return clipRegion;
          };
        }, [clipRegion, setClipRegion]);
      }
      return (0, import_jsx_runtime.jsx)(NativeLayersContext.Provider, {
        value: context,
        children
      });
    };
    Clipper = ({ height, width, x, y }) => {
      const { setClipRegion } = (0, import_react2.useContext)(NativeLayersContext);
      (0, import_react2.useEffect)(() => {
        setClipRegion((c2) => {
          if (c2 === "hide") {
            throw new Error("Cannot render <Clipper>, because another <Null> is already rendered");
          }
          if (c2 === null) {
            return { height, width, x, y };
          }
          throw new Error("Cannot render <Clipper>, because another component clipping the region was already rendered (most likely <Clipper>)");
        });
        return () => {
          setClipRegion(null);
        };
      }, [height, setClipRegion, width, x, y]);
      return null;
    };
    getEnvString = () => {
      return ["e", "nv"].join("");
    };
    getRemotionEnvironment = () => {
      const isPlayer = typeof window !== "undefined" && window.remotion_isPlayer;
      const isRendering = typeof window !== "undefined" && typeof window.process !== "undefined" && typeof window.process.env !== "undefined" && (window.process[getEnvString()][getNodeEnvString()] === "test" || window.process[getEnvString()][getNodeEnvString()] === "production" && typeof window !== "undefined" && typeof window.remotion_puppeteerTimeout !== "undefined");
      const isStudio = typeof window !== "undefined" && window.remotion_isStudio;
      return {
        isStudio,
        isRendering,
        isPlayer
      };
    };
    originalCreateElement = import_react4.default.createElement;
    componentsToAddStacksTo = [];
    enableSequenceStackTraces = () => {
      if (!getRemotionEnvironment().isStudio) {
        return;
      }
      const proxy = new Proxy(originalCreateElement, {
        apply(target, thisArg, argArray) {
          if (componentsToAddStacksTo.includes(argArray[0])) {
            const [first, props, ...rest] = argArray;
            const newProps = {
              ...props ?? {},
              stack: new Error().stack
            };
            return Reflect.apply(target, thisArg, [first, newProps, ...rest]);
          }
          return Reflect.apply(target, thisArg, argArray);
        }
      });
      import_react4.default.createElement = proxy;
    };
    addSequenceStackTraces = (component) => {
      componentsToAddStacksTo.push(component);
      enableSequenceStackTraces();
    };
    IsPlayerContext = (0, import_react5.createContext)(false);
    IsPlayerContextProvider = ({
      children
    }) => {
      return (0, import_jsx_runtime2.jsx)(IsPlayerContext.Provider, {
        value: true,
        children
      });
    };
    useIsPlayer = () => {
      return (0, import_react5.useContext)(IsPlayerContext);
    };
    VERSION = "4.0.221";
    checkMultipleRemotionVersions = () => {
      if (typeof globalThis === "undefined") {
        return;
      }
      const alreadyImported = globalThis.remotion_imported || typeof window !== "undefined" && window.remotion_imported;
      if (alreadyImported) {
        if (alreadyImported === VERSION) {
          return;
        }
        throw new TypeError(`🚨 Multiple versions of Remotion detected: ${[
          VERSION,
          typeof alreadyImported === "string" ? alreadyImported : "an older version"
        ].filter(truthy).join(" and ")}. This will cause things to break in an unexpected way.
Check that all your Remotion packages are on the same version. If your dependencies depend on Remotion, make them peer dependencies. You can also run \`npx remotion versions\` from your terminal to see which versions are mismatching.`);
      }
      globalThis.remotion_imported = VERSION;
      if (typeof window !== "undefined") {
        window.remotion_imported = VERSION;
      }
    };
    Null = () => {
      const { setClipRegion } = (0, import_react6.useContext)(NativeLayersContext);
      (0, import_react6.useEffect)(() => {
        setClipRegion((c2) => {
          if (c2 === null) {
            return "hide";
          }
          if (c2 === "hide") {
            return "hide";
          }
          throw new Error("Cannot render <Null>, because another component clipping the region was already rendered (most likely <Clipper>)");
        });
        return () => {
          setClipRegion(null);
        };
      }, [setClipRegion]);
      return null;
    };
    AbsoluteFillRefForwarding = (props, ref) => {
      const { style, ...other } = props;
      const actualStyle = (0, import_react8.useMemo)(() => {
        return {
          position: "absolute",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          width: "100%",
          height: "100%",
          display: "flex",
          flexDirection: "column",
          ...style
        };
      }, [style]);
      return (0, import_jsx_runtime3.jsx)("div", {
        ref,
        style: actualStyle,
        ...other
      });
    };
    AbsoluteFill = (0, import_react8.forwardRef)(AbsoluteFillRefForwarding);
    SequenceContext = (0, import_react9.createContext)(null);
    SequenceManager = import_react10.default.createContext({
      registerSequence: () => {
        throw new Error("SequenceManagerContext not initialized");
      },
      unregisterSequence: () => {
        throw new Error("SequenceManagerContext not initialized");
      },
      sequences: []
    });
    SequenceVisibilityToggleContext = import_react10.default.createContext({
      hidden: {},
      setHidden: () => {
        throw new Error("SequenceVisibilityToggle not initialized");
      }
    });
    SequenceManagerProvider = ({ children }) => {
      const [sequences, setSequences] = (0, import_react10.useState)([]);
      const [hidden, setHidden] = (0, import_react10.useState)({});
      const registerSequence = (0, import_react10.useCallback)((seq) => {
        setSequences((seqs) => {
          return [...seqs, seq];
        });
      }, []);
      const unregisterSequence = (0, import_react10.useCallback)((seq) => {
        setSequences((seqs) => seqs.filter((s) => s.id !== seq));
      }, []);
      const sequenceContext = (0, import_react10.useMemo)(() => {
        return {
          registerSequence,
          sequences,
          unregisterSequence
        };
      }, [registerSequence, sequences, unregisterSequence]);
      const hiddenContext = (0, import_react10.useMemo)(() => {
        return {
          hidden,
          setHidden
        };
      }, [hidden]);
      return (0, import_jsx_runtime4.jsx)(SequenceManager.Provider, {
        value: sequenceContext,
        children: (0, import_jsx_runtime4.jsx)(SequenceVisibilityToggleContext.Provider, {
          value: hiddenContext,
          children
        })
      });
    };
    NonceContext = (0, import_react11.createContext)({
      getNonce: () => 0,
      fastRefreshes: 0
    });
    useNonce = () => {
      const context = (0, import_react11.useContext)(NonceContext);
      const [nonce, setNonce] = (0, import_react11.useState)(() => context.getNonce());
      const lastContext = (0, import_react11.useRef)(context);
      (0, import_react11.useEffect)(() => {
        if (lastContext.current === context) {
          return;
        }
        lastContext.current = context;
        setNonce(context.getNonce);
      }, [context]);
      return nonce;
    };
    exports_timeline_position_state = {};
    __export2(exports_timeline_position_state, {
      useTimelineSetFrame: () => useTimelineSetFrame,
      useTimelinePosition: () => useTimelinePosition,
      usePlayingState: () => usePlayingState,
      persistCurrentFrame: () => persistCurrentFrame,
      getInitialFrameState: () => getInitialFrameState,
      getFrameForComposition: () => getFrameForComposition,
      TimelineContext: () => TimelineContext,
      SetTimelineContext: () => SetTimelineContext
    });
    CompositionManager = (0, import_react14.createContext)({
      compositions: [],
      registerComposition: () => {
        return;
      },
      unregisterComposition: () => {
        return;
      },
      registerFolder: () => {
        return;
      },
      unregisterFolder: () => {
        return;
      },
      setCurrentCompositionMetadata: () => {
        return;
      },
      updateCompositionDefaultProps: () => {
        return;
      },
      folders: [],
      currentCompositionMetadata: null,
      canvasContent: null,
      setCanvasContent: () => {
        return;
      }
    });
    EditorPropsContext = (0, import_react16.createContext)({
      props: {},
      updateProps: () => {
        throw new Error("Not implemented");
      },
      resetUnsaved: () => {
        throw new Error("Not implemented");
      }
    });
    editorPropsProviderRef = import_react16.default.createRef();
    EditorPropsProvider = ({ children }) => {
      const [props, setProps] = import_react16.default.useState({});
      const updateProps = (0, import_react16.useCallback)(({
        defaultProps,
        id,
        newProps
      }) => {
        setProps((prev) => {
          return {
            ...prev,
            [id]: typeof newProps === "function" ? newProps(prev[id] ?? defaultProps) : newProps
          };
        });
      }, []);
      const resetUnsaved = (0, import_react16.useCallback)(() => {
        setProps({});
      }, []);
      (0, import_react16.useImperativeHandle)(editorPropsProviderRef, () => {
        return {
          getProps: () => props,
          setProps
        };
      }, [props]);
      const ctx = (0, import_react16.useMemo)(() => {
        return { props, updateProps, resetUnsaved };
      }, [props, resetUnsaved, updateProps]);
      return (0, import_jsx_runtime5.jsx)(EditorPropsContext.Provider, {
        value: ctx,
        children
      });
    };
    problematicCharacters = {
      "%3A": ":",
      "%2F": "/",
      "%3F": "?",
      "%23": "#",
      "%5B": "[",
      "%5D": "]",
      "%40": "@",
      "%21": "!",
      "%24": "$",
      "%26": "&",
      "%27": "'",
      "%28": "(",
      "%29": ")",
      "%2A": "*",
      "%2B": "+",
      "%2C": ",",
      "%3B": ";"
    };
    didWarn = {};
    warnOnce = (message) => {
      if (didWarn[message]) {
        return;
      }
      console.warn(message);
      didWarn[message] = true;
    };
    includesHexOfUnsafeChar = (path) => {
      for (const key of Object.keys(problematicCharacters)) {
        if (path.includes(key)) {
          return { containsHex: true, hexCode: key };
        }
      }
      return { containsHex: false };
    };
    trimLeadingSlash = (path) => {
      if (path.startsWith("/")) {
        return trimLeadingSlash(path.substring(1));
      }
      return path;
    };
    inner = (path) => {
      if (typeof window !== "undefined" && window.remotion_staticBase) {
        if (path.startsWith(window.remotion_staticBase)) {
          throw new Error(`The value "${path}" is already prefixed with the static base ${window.remotion_staticBase}. You don't need to call staticFile() on it.`);
        }
        return `${window.remotion_staticBase}/${trimLeadingSlash(path)}`;
      }
      return `/${trimLeadingSlash(path)}`;
    };
    encodeBySplitting = (path) => {
      const splitBySlash = path.split("/");
      const encodedArray = splitBySlash.map((element) => {
        return encodeURIComponent(element);
      });
      const merged = encodedArray.join("/");
      return merged;
    };
    staticFile = (path) => {
      if (path.startsWith("http://") || path.startsWith("https://")) {
        throw new TypeError(`staticFile() does not support remote URLs - got "${path}". Instead, pass the URL without wrapping it in staticFile(). See: https://remotion.dev/docs/staticfile-remote-urls`);
      }
      if (path.startsWith("..") || path.startsWith("./")) {
        throw new TypeError(`staticFile() does not support relative paths - got "${path}". Instead, pass the name of a file that is inside the public/ folder. See: https://remotion.dev/docs/staticfile-relative-paths`);
      }
      if (path.startsWith("/Users") || path.startsWith("/home") || path.startsWith("/tmp") || path.startsWith("/etc") || path.startsWith("/opt") || path.startsWith("/var") || path.startsWith("C:") || path.startsWith("D:") || path.startsWith("E:")) {
        throw new TypeError(`staticFile() does not support absolute paths - got "${path}". Instead, pass the name of a file that is inside the public/ folder. See: https://remotion.dev/docs/staticfile-relative-paths`);
      }
      if (path.startsWith("public/")) {
        throw new TypeError(`Do not include the public/ prefix when using staticFile() - got "${path}". See: https://remotion.dev/docs/staticfile-relative-paths`);
      }
      const includesHex = includesHexOfUnsafeChar(path);
      if (includesHex.containsHex) {
        warnOnce(`WARNING: You seem to pass an already encoded path (path contains ${includesHex.hexCode}). Since Remotion 4.0, the encoding is done by staticFile() itself. You may want to remove a encodeURIComponent() wrapping.`);
      }
      const preprocessed = encodeBySplitting(path);
      const preparsed = inner(preprocessed);
      if (!preparsed.startsWith("/")) {
        return `/${preparsed}`;
      }
      return preparsed;
    };
    DATE_TOKEN = "remotion-date:";
    FILE_TOKEN = "remotion-file:";
    serializeJSONWithDate = ({
      data,
      indent,
      staticBase
    }) => {
      let customDateUsed = false;
      let customFileUsed = false;
      let mapUsed = false;
      let setUsed = false;
      try {
        const serializedString = JSON.stringify(data, function(key, value) {
          const item = this[key];
          if (item instanceof Date) {
            customDateUsed = true;
            return `${DATE_TOKEN}${item.toISOString()}`;
          }
          if (item instanceof Map) {
            mapUsed = true;
            return value;
          }
          if (item instanceof Set) {
            setUsed = true;
            return value;
          }
          if (typeof item === "string" && staticBase !== null && item.startsWith(staticBase)) {
            customFileUsed = true;
            return `${FILE_TOKEN}${item.replace(staticBase + "/", "")}`;
          }
          return value;
        }, indent);
        return { serializedString, customDateUsed, customFileUsed, mapUsed, setUsed };
      } catch (err) {
        throw new Error("Could not serialize the passed input props to JSON: " + err.message);
      }
    };
    deserializeJSONWithCustomFields = (data) => {
      return JSON.parse(data, (_, value) => {
        if (typeof value === "string" && value.startsWith(DATE_TOKEN)) {
          return new Date(value.replace(DATE_TOKEN, ""));
        }
        if (typeof value === "string" && value.startsWith(FILE_TOKEN)) {
          return staticFile(value.replace(FILE_TOKEN, ""));
        }
        return value;
      });
    };
    serializeThenDeserializeInStudio = (props) => {
      if (getRemotionEnvironment().isStudio) {
        return deserializeJSONWithCustomFields(serializeJSONWithDate({
          data: props,
          indent: 2,
          staticBase: window.remotion_staticBase
        }).serializedString);
      }
      return props;
    };
    didWarnSSRImport = false;
    warnOnceSSRImport = () => {
      if (didWarnSSRImport) {
        return;
      }
      didWarnSSRImport = true;
      console.warn("Called `getInputProps()` on the server. This function is not available server-side and has returned an empty object.");
      console.warn("To hide this warning, don't call this function on the server:");
      console.warn("  typeof window === 'undefined' ? {} : getInputProps()");
    };
    getInputProps = () => {
      if (typeof window === "undefined") {
        warnOnceSSRImport();
        return {};
      }
      if (getRemotionEnvironment().isPlayer) {
        throw new Error("You cannot call `getInputProps()` from a <Player>. Instead, the props are available as React props from component that you passed as `component` prop.");
      }
      const param = window.remotion_inputProps;
      if (!param) {
        return {};
      }
      const parsed = deserializeJSONWithCustomFields(param);
      return parsed;
    };
    validCodecs = [
      "h264",
      "h265",
      "vp8",
      "vp9",
      "mp3",
      "aac",
      "wav",
      "prores",
      "h264-mkv",
      "h264-ts",
      "gif"
    ];
    validateCalculated = ({
      calculated,
      compositionId,
      compositionFps,
      compositionHeight,
      compositionWidth,
      compositionDurationInFrames
    }) => {
      const calculateMetadataErrorLocation = `calculated by calculateMetadata() for the composition "${compositionId}"`;
      const defaultErrorLocation = `of the "<Composition />" component with the id "${compositionId}"`;
      const width = (calculated == null ? void 0 : calculated.width) ?? compositionWidth ?? void 0;
      validateDimension(width, "width", (calculated == null ? void 0 : calculated.width) ? calculateMetadataErrorLocation : defaultErrorLocation);
      const height = (calculated == null ? void 0 : calculated.height) ?? compositionHeight ?? void 0;
      validateDimension(height, "height", (calculated == null ? void 0 : calculated.height) ? calculateMetadataErrorLocation : defaultErrorLocation);
      const fps = (calculated == null ? void 0 : calculated.fps) ?? compositionFps ?? null;
      validateFps(fps, (calculated == null ? void 0 : calculated.fps) ? calculateMetadataErrorLocation : defaultErrorLocation, false);
      const durationInFrames = (calculated == null ? void 0 : calculated.durationInFrames) ?? compositionDurationInFrames ?? null;
      validateDurationInFrames(durationInFrames, {
        allowFloats: false,
        component: `of the "<Composition />" component with the id "${compositionId}"`
      });
      const defaultCodec = calculated == null ? void 0 : calculated.defaultCodec;
      validateDefaultCodec(defaultCodec, calculateMetadataErrorLocation);
      return { width, height, fps, durationInFrames, defaultCodec };
    };
    resolveVideoConfig = ({
      calculateMetadata,
      signal,
      defaultProps,
      originalProps,
      compositionId,
      compositionDurationInFrames,
      compositionFps,
      compositionHeight,
      compositionWidth
    }) => {
      const calculatedProm = calculateMetadata ? calculateMetadata({
        defaultProps,
        props: originalProps,
        abortSignal: signal,
        compositionId
      }) : null;
      if (calculatedProm !== null && typeof calculatedProm === "object" && "then" in calculatedProm) {
        return calculatedProm.then((c2) => {
          const { height, width, durationInFrames, fps, defaultCodec } = validateCalculated({
            calculated: c2,
            compositionDurationInFrames,
            compositionFps,
            compositionHeight,
            compositionWidth,
            compositionId
          });
          return {
            width,
            height,
            fps,
            durationInFrames,
            id: compositionId,
            defaultProps: serializeThenDeserializeInStudio(defaultProps),
            props: serializeThenDeserializeInStudio(c2.props ?? originalProps),
            defaultCodec: defaultCodec ?? null
          };
        });
      }
      const data = validateCalculated({
        calculated: calculatedProm,
        compositionDurationInFrames,
        compositionFps,
        compositionHeight,
        compositionWidth,
        compositionId
      });
      if (calculatedProm === null) {
        return {
          ...data,
          id: compositionId,
          defaultProps: serializeThenDeserializeInStudio(defaultProps ?? {}),
          props: serializeThenDeserializeInStudio(originalProps),
          defaultCodec: null
        };
      }
      return {
        ...data,
        id: compositionId,
        defaultProps: serializeThenDeserializeInStudio(defaultProps ?? {}),
        props: serializeThenDeserializeInStudio(calculatedProm.props ?? originalProps),
        defaultCodec: calculatedProm.defaultCodec ?? null
      };
    };
    resolveVideoConfigOrCatch = (params) => {
      try {
        const promiseOrReturnValue = resolveVideoConfig(params);
        return {
          type: "success",
          result: promiseOrReturnValue
        };
      } catch (err) {
        return {
          type: "error",
          error: err
        };
      }
    };
    ResolveCompositionContext = (0, import_react15.createContext)(null);
    resolveCompositionsRef = (0, import_react15.createRef)();
    needsResolution = (composition) => {
      return Boolean(composition.calculateMetadata);
    };
    PROPS_UPDATED_EXTERNALLY = "remotion.propsUpdatedExternally";
    ResolveCompositionConfig = ({ children }) => {
      const [currentRenderModalComposition, setCurrentRenderModalComposition] = (0, import_react15.useState)(null);
      const { compositions, canvasContent, currentCompositionMetadata } = (0, import_react15.useContext)(CompositionManager);
      const { fastRefreshes } = (0, import_react15.useContext)(NonceContext);
      const selectedComposition = (0, import_react15.useMemo)(() => {
        return compositions.find((c2) => canvasContent && canvasContent.type === "composition" && canvasContent.compositionId === c2.id);
      }, [canvasContent, compositions]);
      const renderModalComposition = compositions.find((c2) => c2.id === currentRenderModalComposition);
      const { props: allEditorProps } = (0, import_react15.useContext)(EditorPropsContext);
      const inputProps = (0, import_react15.useMemo)(() => {
        return typeof window === "undefined" || getRemotionEnvironment().isPlayer ? {} : getInputProps() ?? {};
      }, []);
      const [resolvedConfigs, setResolvedConfigs] = (0, import_react15.useState)({});
      const selectedEditorProps = (0, import_react15.useMemo)(() => {
        return selectedComposition ? allEditorProps[selectedComposition.id] ?? {} : {};
      }, [allEditorProps, selectedComposition]);
      const renderModalProps = (0, import_react15.useMemo)(() => {
        return renderModalComposition ? allEditorProps[renderModalComposition.id] ?? {} : {};
      }, [allEditorProps, renderModalComposition]);
      const hasResolution = Boolean(currentCompositionMetadata);
      const doResolution = (0, import_react15.useCallback)(({
        calculateMetadata,
        combinedProps,
        compositionDurationInFrames,
        compositionFps,
        compositionHeight,
        compositionId,
        compositionWidth,
        defaultProps
      }) => {
        const controller = new AbortController();
        if (hasResolution) {
          return controller;
        }
        const { signal } = controller;
        const result = resolveVideoConfigOrCatch({
          compositionId,
          calculateMetadata,
          originalProps: combinedProps,
          signal,
          defaultProps,
          compositionDurationInFrames,
          compositionFps,
          compositionHeight,
          compositionWidth
        });
        if (result.type === "error") {
          setResolvedConfigs((r) => ({
            ...r,
            [compositionId]: {
              type: "error",
              error: result.error
            }
          }));
          return controller;
        }
        const promOrNot = result.result;
        if (typeof promOrNot === "object" && "then" in promOrNot) {
          setResolvedConfigs((r) => {
            const prev = r[compositionId];
            if ((prev == null ? void 0 : prev.type) === "success" || (prev == null ? void 0 : prev.type) === "success-and-refreshing") {
              return {
                ...r,
                [compositionId]: {
                  type: "success-and-refreshing",
                  result: prev.result
                }
              };
            }
            return {
              ...r,
              [compositionId]: {
                type: "loading"
              }
            };
          });
          promOrNot.then((c2) => {
            if (controller.signal.aborted) {
              return;
            }
            setResolvedConfigs((r) => ({
              ...r,
              [compositionId]: {
                type: "success",
                result: c2
              }
            }));
          }).catch((err) => {
            if (controller.signal.aborted) {
              return;
            }
            setResolvedConfigs((r) => ({
              ...r,
              [compositionId]: {
                type: "error",
                error: err
              }
            }));
          });
        } else {
          setResolvedConfigs((r) => ({
            ...r,
            [compositionId]: {
              type: "success",
              result: promOrNot
            }
          }));
        }
        return controller;
      }, [hasResolution]);
      const currentComposition = (canvasContent == null ? void 0 : canvasContent.type) === "composition" ? canvasContent.compositionId : null;
      (0, import_react15.useImperativeHandle)(resolveCompositionsRef, () => {
        return {
          setCurrentRenderModalComposition: (id) => {
            setCurrentRenderModalComposition(id);
          },
          reloadCurrentlySelectedComposition: () => {
            if (!currentComposition) {
              return;
            }
            const composition = compositions.find((c2) => c2.id === currentComposition);
            if (!composition) {
              throw new Error(`Could not find composition with id ${currentComposition}`);
            }
            const editorProps = allEditorProps[currentComposition] ?? {};
            const defaultProps = {
              ...composition.defaultProps ?? {},
              ...editorProps ?? {}
            };
            const props = {
              ...defaultProps,
              ...inputProps ?? {}
            };
            doResolution({
              defaultProps,
              calculateMetadata: composition.calculateMetadata,
              combinedProps: props,
              compositionDurationInFrames: composition.durationInFrames ?? null,
              compositionFps: composition.fps ?? null,
              compositionHeight: composition.height ?? null,
              compositionWidth: composition.width ?? null,
              compositionId: composition.id
            });
          }
        };
      }, [
        allEditorProps,
        compositions,
        currentComposition,
        doResolution,
        inputProps
      ]);
      const isTheSame = (selectedComposition == null ? void 0 : selectedComposition.id) === (renderModalComposition == null ? void 0 : renderModalComposition.id);
      const currentDefaultProps = (0, import_react15.useMemo)(() => {
        return {
          ...(selectedComposition == null ? void 0 : selectedComposition.defaultProps) ?? {},
          ...selectedEditorProps ?? {}
        };
      }, [selectedComposition == null ? void 0 : selectedComposition.defaultProps, selectedEditorProps]);
      const originalProps = (0, import_react15.useMemo)(() => {
        return {
          ...currentDefaultProps,
          ...inputProps ?? {}
        };
      }, [currentDefaultProps, inputProps]);
      const canResolve = selectedComposition && needsResolution(selectedComposition);
      const shouldIgnoreUpdate = typeof window !== "undefined" && window.remotion_ignoreFastRefreshUpdate && fastRefreshes <= window.remotion_ignoreFastRefreshUpdate;
      (0, import_react15.useEffect)(() => {
        if (shouldIgnoreUpdate) {
          return;
        }
        if (canResolve) {
          const controller = doResolution({
            calculateMetadata: selectedComposition.calculateMetadata,
            combinedProps: originalProps,
            compositionDurationInFrames: selectedComposition.durationInFrames ?? null,
            compositionFps: selectedComposition.fps ?? null,
            compositionHeight: selectedComposition.height ?? null,
            compositionWidth: selectedComposition.width ?? null,
            defaultProps: currentDefaultProps,
            compositionId: selectedComposition.id
          });
          return () => {
            controller.abort();
          };
        }
      }, [
        canResolve,
        currentDefaultProps,
        doResolution,
        originalProps,
        selectedComposition == null ? void 0 : selectedComposition.calculateMetadata,
        selectedComposition == null ? void 0 : selectedComposition.durationInFrames,
        selectedComposition == null ? void 0 : selectedComposition.fps,
        selectedComposition == null ? void 0 : selectedComposition.height,
        selectedComposition == null ? void 0 : selectedComposition.id,
        selectedComposition == null ? void 0 : selectedComposition.width,
        shouldIgnoreUpdate
      ]);
      (0, import_react15.useEffect)(() => {
        if (shouldIgnoreUpdate) {
          return;
        }
        window.dispatchEvent(new CustomEvent("remotion.propsUpdatedExternally"));
      }, [fastRefreshes]);
      (0, import_react15.useEffect)(() => {
        if (renderModalComposition && !isTheSame) {
          const combinedProps = {
            ...renderModalComposition.defaultProps ?? {},
            ...renderModalProps ?? {},
            ...inputProps ?? {}
          };
          const controller = doResolution({
            calculateMetadata: renderModalComposition.calculateMetadata,
            compositionDurationInFrames: renderModalComposition.durationInFrames ?? null,
            compositionFps: renderModalComposition.fps ?? null,
            compositionHeight: renderModalComposition.height ?? null,
            compositionId: renderModalComposition.id,
            compositionWidth: renderModalComposition.width ?? null,
            defaultProps: currentDefaultProps,
            combinedProps
          });
          return () => {
            controller.abort();
          };
        }
      }, [
        currentDefaultProps,
        doResolution,
        inputProps,
        isTheSame,
        renderModalComposition,
        renderModalProps
      ]);
      const resolvedConfigsIncludingStaticOnes = (0, import_react15.useMemo)(() => {
        const staticComps = compositions.filter((c2) => {
          return c2.calculateMetadata === null;
        });
        return {
          ...resolvedConfigs,
          ...staticComps.reduce((acc, curr) => {
            return {
              ...acc,
              [curr.id]: {
                type: "success",
                result: { ...curr, defaultProps: curr.defaultProps ?? {} }
              }
            };
          }, {})
        };
      }, [compositions, resolvedConfigs]);
      return (0, import_jsx_runtime6.jsx)(ResolveCompositionContext.Provider, {
        value: resolvedConfigsIncludingStaticOnes,
        children
      });
    };
    useResolvedVideoConfig = (preferredCompositionId) => {
      const context = (0, import_react15.useContext)(ResolveCompositionContext);
      const { props: allEditorProps } = (0, import_react15.useContext)(EditorPropsContext);
      const { compositions, canvasContent, currentCompositionMetadata } = (0, import_react15.useContext)(CompositionManager);
      const currentComposition = (canvasContent == null ? void 0 : canvasContent.type) === "composition" ? canvasContent.compositionId : null;
      const compositionId = preferredCompositionId ?? currentComposition;
      const composition = compositions.find((c2) => c2.id === compositionId);
      const selectedEditorProps = (0, import_react15.useMemo)(() => {
        return composition ? allEditorProps[composition.id] ?? {} : {};
      }, [allEditorProps, composition]);
      return (0, import_react15.useMemo)(() => {
        if (!composition) {
          return null;
        }
        if (currentCompositionMetadata) {
          return {
            type: "success",
            result: {
              ...currentCompositionMetadata,
              id: composition.id,
              props: currentCompositionMetadata.props,
              defaultProps: composition.defaultProps ?? {},
              defaultCodec: currentCompositionMetadata.defaultCodec
            }
          };
        }
        if (!needsResolution(composition)) {
          validateDurationInFrames(composition.durationInFrames, {
            allowFloats: false,
            component: `in <Composition id="${composition.id}">`
          });
          validateFps(composition.fps, `in <Composition id="${composition.id}">`, false);
          validateDimension(composition.width, "width", `in <Composition id="${composition.id}">`);
          validateDimension(composition.height, "height", `in <Composition id="${composition.id}">`);
          return {
            type: "success",
            result: {
              width: composition.width,
              height: composition.height,
              fps: composition.fps,
              id: composition.id,
              durationInFrames: composition.durationInFrames,
              defaultProps: composition.defaultProps ?? {},
              props: {
                ...composition.defaultProps ?? {},
                ...selectedEditorProps ?? {},
                ...typeof window === "undefined" || getRemotionEnvironment().isPlayer ? {} : getInputProps() ?? {}
              },
              defaultCodec: null
            }
          };
        }
        if (!context[composition.id]) {
          return null;
        }
        return context[composition.id];
      }, [composition, context, currentCompositionMetadata, selectedEditorProps]);
    };
    useVideo = () => {
      const { canvasContent, compositions, currentCompositionMetadata } = (0, import_react13.useContext)(CompositionManager);
      const selected = compositions.find((c2) => {
        return (canvasContent == null ? void 0 : canvasContent.type) === "composition" && c2.id === canvasContent.compositionId;
      });
      const resolved = useResolvedVideoConfig((selected == null ? void 0 : selected.id) ?? null);
      return (0, import_react13.useMemo)(() => {
        if (!resolved) {
          return null;
        }
        if (resolved.type === "error") {
          return null;
        }
        if (resolved.type === "loading") {
          return null;
        }
        if (!selected) {
          return null;
        }
        return {
          ...resolved.result,
          defaultProps: selected.defaultProps ?? {},
          id: selected.id,
          ...currentCompositionMetadata ?? {},
          component: selected.component
        };
      }, [currentCompositionMetadata, resolved, selected]);
    };
    TimelineContext = (0, import_react12.createContext)({
      frame: {},
      playing: false,
      playbackRate: 1,
      rootId: "",
      imperativePlaying: {
        current: false
      },
      setPlaybackRate: () => {
        throw new Error("default");
      },
      audioAndVideoTags: { current: [] }
    });
    SetTimelineContext = (0, import_react12.createContext)({
      setFrame: () => {
        throw new Error("default");
      },
      setPlaying: () => {
        throw new Error("default");
      }
    });
    makeKey = () => {
      return `remotion.time-all`;
    };
    persistCurrentFrame = (time) => {
      localStorage.setItem(makeKey(), JSON.stringify(time));
    };
    getInitialFrameState = () => {
      const item = localStorage.getItem(makeKey()) ?? "{}";
      const obj = JSON.parse(item);
      return obj;
    };
    getFrameForComposition = (composition) => {
      const item = localStorage.getItem(makeKey()) ?? "{}";
      const obj = JSON.parse(item);
      if (obj[composition] !== void 0) {
        return Number(obj[composition]);
      }
      if (typeof window === "undefined") {
        return 0;
      }
      return window.remotion_initialFrame ?? 0;
    };
    useTimelinePosition = () => {
      const videoConfig = useVideo();
      const state = (0, import_react12.useContext)(TimelineContext);
      if (!videoConfig) {
        return typeof window === "undefined" ? 0 : window.remotion_initialFrame ?? 0;
      }
      const unclamped = state.frame[videoConfig.id] ?? (getRemotionEnvironment().isPlayer ? 0 : getFrameForComposition(videoConfig.id));
      return Math.min(videoConfig.durationInFrames - 1, unclamped);
    };
    useTimelineSetFrame = () => {
      const { setFrame } = (0, import_react12.useContext)(SetTimelineContext);
      return setFrame;
    };
    usePlayingState = () => {
      const { playing, imperativePlaying } = (0, import_react12.useContext)(TimelineContext);
      const { setPlaying } = (0, import_react12.useContext)(SetTimelineContext);
      return (0, import_react12.useMemo)(() => [playing, setPlaying, imperativePlaying], [imperativePlaying, playing, setPlaying]);
    };
    CanUseRemotionHooks = (0, import_react18.createContext)(false);
    CanUseRemotionHooksProvider = ({ children }) => {
      return (0, import_jsx_runtime7.jsx)(CanUseRemotionHooks.Provider, {
        value: true,
        children
      });
    };
    useUnsafeVideoConfig = () => {
      const context = (0, import_react19.useContext)(SequenceContext);
      const ctxWidth = (context == null ? void 0 : context.width) ?? null;
      const ctxHeight = (context == null ? void 0 : context.height) ?? null;
      const ctxDuration = (context == null ? void 0 : context.durationInFrames) ?? null;
      const video = useVideo();
      return (0, import_react19.useMemo)(() => {
        if (!video) {
          return null;
        }
        const {
          id,
          durationInFrames,
          fps,
          height,
          width,
          defaultProps,
          props,
          defaultCodec
        } = video;
        return {
          id,
          width: ctxWidth ?? width,
          height: ctxHeight ?? height,
          fps,
          durationInFrames: ctxDuration ?? durationInFrames,
          defaultProps,
          props,
          defaultCodec
        };
      }, [ctxDuration, ctxHeight, ctxWidth, video]);
    };
    useVideoConfig = () => {
      const videoConfig = useUnsafeVideoConfig();
      const context = (0, import_react17.useContext)(CanUseRemotionHooks);
      const isPlayer = useIsPlayer();
      if (!videoConfig) {
        if (typeof window !== "undefined" && window.remotion_isPlayer || isPlayer) {
          throw new Error([
            "No video config found. Likely reasons:",
            "- You are probably calling useVideoConfig() from outside the component passed to <Player />. See https://www.remotion.dev/docs/player/examples for how to set up the Player correctly.",
            "- You have multiple versions of Remotion installed which causes the React context to get lost."
          ].join("-"));
        }
        throw new Error("No video config found. You are probably calling useVideoConfig() from a component which has not been registered as a <Composition />. See https://www.remotion.dev/docs/the-fundamentals#defining-compositions for more information.");
      }
      if (!context) {
        throw new Error("Called useVideoConfig() outside a Remotion composition.");
      }
      return videoConfig;
    };
    useCurrentFrame = () => {
      const canUseRemotionHooks = (0, import_react21.useContext)(CanUseRemotionHooks);
      if (!canUseRemotionHooks) {
        if (getRemotionEnvironment().isPlayer) {
          throw new Error(`useCurrentFrame can only be called inside a component that was passed to <Player>. See: https://www.remotion.dev/docs/player/examples`);
        }
        throw new Error(`useCurrentFrame() can only be called inside a component that was registered as a composition. See https://www.remotion.dev/docs/the-fundamentals#defining-compositions`);
      }
      const frame = useTimelinePosition();
      const context = (0, import_react21.useContext)(SequenceContext);
      const contextOffset = context ? context.cumulatedFrom + context.relativeFrom : 0;
      return frame - contextOffset;
    };
    Freeze = ({
      frame: frameToFreeze,
      children,
      active = true
    }) => {
      const frame = useCurrentFrame();
      const videoConfig = useVideoConfig();
      if (typeof frameToFreeze === "undefined") {
        throw new Error(`The <Freeze /> component requires a 'frame' prop, but none was passed.`);
      }
      if (typeof frameToFreeze !== "number") {
        throw new Error(`The 'frame' prop of <Freeze /> must be a number, but is of type ${typeof frameToFreeze}`);
      }
      if (Number.isNaN(frameToFreeze)) {
        throw new Error(`The 'frame' prop of <Freeze /> must be a real number, but it is NaN.`);
      }
      if (!Number.isFinite(frameToFreeze)) {
        throw new Error(`The 'frame' prop of <Freeze /> must be a finite number, but it is ${frameToFreeze}.`);
      }
      const isActive = (0, import_react20.useMemo)(() => {
        if (typeof active === "boolean") {
          return active;
        }
        if (typeof active === "function") {
          return active(frame);
        }
      }, [active, frame]);
      const timelineContext = (0, import_react20.useContext)(TimelineContext);
      const sequenceContext = (0, import_react20.useContext)(SequenceContext);
      const relativeFrom = (sequenceContext == null ? void 0 : sequenceContext.relativeFrom) ?? 0;
      const timelineValue = (0, import_react20.useMemo)(() => {
        if (!isActive) {
          return timelineContext;
        }
        return {
          ...timelineContext,
          playing: false,
          imperativePlaying: {
            current: false
          },
          frame: {
            [videoConfig.id]: frameToFreeze + relativeFrom
          }
        };
      }, [isActive, timelineContext, videoConfig.id, frameToFreeze, relativeFrom]);
      return (0, import_jsx_runtime8.jsx)(TimelineContext.Provider, {
        value: timelineValue,
        children
      });
    };
    RegularSequenceRefForwardingFunction = ({
      from = 0,
      durationInFrames = Infinity,
      children,
      name,
      height,
      width,
      showInTimeline = true,
      _remotionInternalLoopDisplay: loopDisplay,
      _remotionInternalStack: stack,
      _remotionInternalPremountDisplay: premountDisplay,
      ...other
    }, ref) => {
      const { layout = "absolute-fill" } = other;
      const [id] = (0, import_react7.useState)(() => String(Math.random()));
      const parentSequence = (0, import_react7.useContext)(SequenceContext);
      const { rootId } = (0, import_react7.useContext)(TimelineContext);
      const cumulatedFrom = parentSequence ? parentSequence.cumulatedFrom + parentSequence.relativeFrom : 0;
      const nonce = useNonce();
      if (layout !== "absolute-fill" && layout !== "none") {
        throw new TypeError(`The layout prop of <Sequence /> expects either "absolute-fill" or "none", but you passed: ${layout}`);
      }
      if (layout === "none" && typeof other.style !== "undefined") {
        throw new TypeError('If layout="none", you may not pass a style.');
      }
      if (typeof durationInFrames !== "number") {
        throw new TypeError(`You passed to durationInFrames an argument of type ${typeof durationInFrames}, but it must be a number.`);
      }
      if (durationInFrames <= 0) {
        throw new TypeError(`durationInFrames must be positive, but got ${durationInFrames}`);
      }
      if (typeof from !== "number") {
        throw new TypeError(`You passed to the "from" props of your <Sequence> an argument of type ${typeof from}, but it must be a number.`);
      }
      if (!Number.isFinite(from)) {
        throw new TypeError(`The "from" prop of a sequence must be finite, but got ${from}.`);
      }
      const absoluteFrame = useTimelinePosition();
      const videoConfig = useVideoConfig();
      const parentSequenceDuration = parentSequence ? Math.min(parentSequence.durationInFrames - from, durationInFrames) : durationInFrames;
      const actualDurationInFrames = Math.max(0, Math.min(videoConfig.durationInFrames - from, parentSequenceDuration));
      const { registerSequence, unregisterSequence } = (0, import_react7.useContext)(SequenceManager);
      const { hidden } = (0, import_react7.useContext)(SequenceVisibilityToggleContext);
      const premounting = (0, import_react7.useMemo)(() => {
        return (parentSequence == null ? void 0 : parentSequence.premounting) ?? Boolean(other._remotionInternalIsPremounting);
      }, [other._remotionInternalIsPremounting, parentSequence == null ? void 0 : parentSequence.premounting]);
      const contextValue = (0, import_react7.useMemo)(() => {
        return {
          cumulatedFrom,
          relativeFrom: from,
          durationInFrames: actualDurationInFrames,
          parentFrom: (parentSequence == null ? void 0 : parentSequence.relativeFrom) ?? 0,
          id,
          height: height ?? (parentSequence == null ? void 0 : parentSequence.height) ?? null,
          width: width ?? (parentSequence == null ? void 0 : parentSequence.width) ?? null,
          premounting
        };
      }, [
        cumulatedFrom,
        from,
        actualDurationInFrames,
        parentSequence,
        id,
        height,
        width,
        premounting
      ]);
      const timelineClipName = (0, import_react7.useMemo)(() => {
        return name ?? "";
      }, [name]);
      (0, import_react7.useEffect)(() => {
        if (!getRemotionEnvironment().isStudio) {
          return;
        }
        registerSequence({
          from,
          duration: actualDurationInFrames,
          id,
          displayName: timelineClipName,
          parent: (parentSequence == null ? void 0 : parentSequence.id) ?? null,
          type: "sequence",
          rootId,
          showInTimeline,
          nonce,
          loopDisplay,
          stack: stack ?? null,
          premountDisplay: premountDisplay ?? null
        });
        return () => {
          unregisterSequence(id);
        };
      }, [
        durationInFrames,
        id,
        name,
        registerSequence,
        timelineClipName,
        unregisterSequence,
        parentSequence == null ? void 0 : parentSequence.id,
        actualDurationInFrames,
        rootId,
        from,
        showInTimeline,
        nonce,
        loopDisplay,
        stack,
        premountDisplay
      ]);
      const endThreshold = Math.ceil(cumulatedFrom + from + durationInFrames - 1);
      const content = absoluteFrame < cumulatedFrom + from ? null : absoluteFrame > endThreshold ? null : children;
      const styleIfThere = other.layout === "none" ? void 0 : other.style;
      const defaultStyle = (0, import_react7.useMemo)(() => {
        return {
          flexDirection: void 0,
          ...width ? { width } : {},
          ...height ? { height } : {},
          ...styleIfThere ?? {}
        };
      }, [height, styleIfThere, width]);
      if (ref !== null && layout === "none") {
        throw new TypeError('It is not supported to pass both a `ref` and `layout="none"` to <Sequence />.');
      }
      const isSequenceHidden = hidden[id] ?? false;
      if (isSequenceHidden) {
        return null;
      }
      return (0, import_jsx_runtime9.jsx)(SequenceContext.Provider, {
        value: contextValue,
        children: content === null ? null : other.layout === "none" ? content : (0, import_jsx_runtime9.jsx)(AbsoluteFill, {
          ref,
          style: defaultStyle,
          className: other.className,
          children: content
        })
      });
    };
    RegularSequence = (0, import_react7.forwardRef)(RegularSequenceRefForwardingFunction);
    PremountedSequenceRefForwardingFunction = (props, ref) => {
      const frame = useCurrentFrame();
      if (props.layout === "none") {
        throw new Error('`<Sequence>` with `premountFor` prop does not support layout="none"');
      }
      const { style: passedStyle, from = 0, premountFor = 0, ...otherProps } = props;
      const premountingActive = frame < from && frame >= from - premountFor;
      const style = (0, import_react7.useMemo)(() => {
        return {
          ...passedStyle,
          opacity: premountingActive ? 0 : 1,
          pointerEvents: premountingActive ? "none" : (passedStyle == null ? void 0 : passedStyle.pointerEvents) ?? void 0
        };
      }, [premountingActive, passedStyle]);
      return (0, import_jsx_runtime9.jsx)(Freeze, {
        frame: from,
        active: premountingActive,
        children: (0, import_jsx_runtime9.jsx)(Sequence, {
          ref,
          from,
          style,
          _remotionInternalPremountDisplay: premountFor,
          _remotionInternalIsPremounting: premountingActive,
          ...otherProps
        })
      });
    };
    PremountedSequence = (0, import_react7.forwardRef)(PremountedSequenceRefForwardingFunction);
    SequenceRefForwardingFunction = (props, ref) => {
      if (props.layout !== "none" && props.premountFor && !getRemotionEnvironment().isRendering) {
        return (0, import_jsx_runtime9.jsx)(PremountedSequence, {
          ...props,
          ref
        });
      }
      return (0, import_jsx_runtime9.jsx)(RegularSequence, {
        ...props,
        ref
      });
    };
    Sequence = (0, import_react7.forwardRef)(SequenceRefForwardingFunction);
    validateArtifactFilename = (filename) => {
      if (typeof filename !== "string") {
        throw new TypeError(`The "filename" must be a string, but you passed a value of type ${typeof filename}`);
      }
      if (filename.trim() === "") {
        throw new Error("The `filename` must not be empty");
      }
      if (!filename.match(/^([0-9a-zA-Z-!_.*'()/:&$@=;+,?]+)/g)) {
        throw new Error('The `filename` must match "/^([0-9a-zA-Z-!_.*\'()/:&$@=;+,?]+)/g". Use forward slashes only, even on Windows.');
      }
    };
    validateContent = (content) => {
      if (typeof content !== "string" && !(content instanceof Uint8Array)) {
        throw new TypeError(`The "content" must be a string or Uint8Array, but you passed a value of type ${typeof content}`);
      }
      if (typeof content === "string" && content.trim() === "") {
        throw new Error("The `content` must not be empty");
      }
    };
    validateRenderAsset = (artifact) => {
      if (artifact.type !== "artifact") {
        return;
      }
      validateArtifactFilename(artifact.filename);
      validateContent(artifact.content);
    };
    RenderAssetManager = (0, import_react23.createContext)({
      registerRenderAsset: () => {
        return;
      },
      unregisterRenderAsset: () => {
        return;
      },
      renderAssets: []
    });
    RenderAssetManagerProvider = ({ children }) => {
      const [renderAssets, setRenderAssets] = (0, import_react23.useState)([]);
      const registerRenderAsset = (0, import_react23.useCallback)((renderAsset) => {
        validateRenderAsset(renderAsset);
        setRenderAssets((assets) => {
          return [...assets, renderAsset];
        });
      }, []);
      const unregisterRenderAsset = (0, import_react23.useCallback)((id) => {
        setRenderAssets((assts) => {
          return assts.filter((a2) => a2.id !== id);
        });
      }, []);
      (0, import_react23.useLayoutEffect)(() => {
        if (typeof window !== "undefined") {
          window.remotion_collectAssets = () => {
            setRenderAssets([]);
            return renderAssets;
          };
        }
      }, [renderAssets]);
      const contextValue = (0, import_react23.useMemo)(() => {
        return {
          registerRenderAsset,
          unregisterRenderAsset,
          renderAssets
        };
      }, [renderAssets, registerRenderAsset, unregisterRenderAsset]);
      return (0, import_jsx_runtime10.jsx)(RenderAssetManager.Provider, {
        value: contextValue,
        children
      });
    };
    Artifact = ({ filename, content }) => {
      const { registerRenderAsset, unregisterRenderAsset } = (0, import_react22.useContext)(RenderAssetManager);
      const [env] = (0, import_react22.useState)(() => getRemotionEnvironment());
      const frame = useCurrentFrame();
      const [id] = (0, import_react22.useState)(() => {
        return String(Math.random());
      });
      (0, import_react22.useEffect)(() => {
        if (!env.isRendering) {
          return;
        }
        if (content instanceof Uint8Array) {
          registerRenderAsset({
            type: "artifact",
            id,
            content: btoa(new TextDecoder("utf8").decode(content)),
            filename,
            frame,
            binary: true
          });
        } else {
          registerRenderAsset({
            type: "artifact",
            id,
            content,
            filename,
            frame,
            binary: false
          });
        }
        return () => {
          return unregisterRenderAsset(id);
        };
      }, [
        content,
        env.isRendering,
        filename,
        frame,
        id,
        registerRenderAsset,
        unregisterRenderAsset
      ]);
      return null;
    };
    getAbsoluteSrc = (relativeSrc) => {
      if (typeof window === "undefined") {
        return relativeSrc;
      }
      return new URL(relativeSrc, window.origin).href;
    };
    calculateLoopDuration = ({
      endAt,
      mediaDuration,
      playbackRate,
      startFrom
    }) => {
      let duration = mediaDuration;
      if (typeof endAt !== "undefined") {
        duration = endAt;
      }
      if (typeof startFrom !== "undefined") {
        duration -= startFrom;
      }
      const actualDuration = duration / playbackRate;
      return Math.floor(actualDuration);
    };
    isErrorLike = (err) => {
      if (err instanceof Error) {
        return true;
      }
      if (err === null) {
        return false;
      }
      if (typeof err !== "object") {
        return false;
      }
      if (!("stack" in err)) {
        return false;
      }
      if (typeof err.stack !== "string") {
        return false;
      }
      if (!("message" in err)) {
        return false;
      }
      if (typeof err.message !== "string") {
        return false;
      }
      return true;
    };
    LoopContext = (0, import_react25.createContext)(null);
    useLoop = () => {
      return import_react25.default.useContext(LoopContext);
    };
    Loop = ({ durationInFrames, times = Infinity, children, name, ...props }) => {
      const currentFrame = useCurrentFrame();
      const { durationInFrames: compDuration } = useVideoConfig();
      validateDurationInFrames(durationInFrames, {
        component: "of the <Loop /> component",
        allowFloats: true
      });
      if (typeof times !== "number") {
        throw new TypeError(`You passed to "times" an argument of type ${typeof times}, but it must be a number.`);
      }
      if (times !== Infinity && times % 1 !== 0) {
        throw new TypeError(`The "times" prop of a loop must be an integer, but got ${times}.`);
      }
      if (times < 0) {
        throw new TypeError(`The "times" prop of a loop must be at least 0, but got ${times}`);
      }
      const maxTimes = Math.ceil(compDuration / durationInFrames);
      const actualTimes = Math.min(maxTimes, times);
      const style = props.layout === "none" ? void 0 : props.style;
      const maxFrame = durationInFrames * (actualTimes - 1);
      const iteration = Math.floor(currentFrame / durationInFrames);
      const start = iteration * durationInFrames;
      const from = Math.min(start, maxFrame);
      const loopDisplay = (0, import_react25.useMemo)(() => {
        return {
          numberOfTimes: actualTimes,
          startOffset: -from,
          durationInFrames
        };
      }, [actualTimes, durationInFrames, from]);
      const loopContext = (0, import_react25.useMemo)(() => {
        return {
          iteration: Math.floor(currentFrame / durationInFrames),
          durationInFrames
        };
      }, [currentFrame, durationInFrames]);
      return (0, import_jsx_runtime11.jsx)(LoopContext.Provider, {
        value: loopContext,
        children: (0, import_jsx_runtime11.jsx)(Sequence, {
          durationInFrames,
          from,
          name: name ?? "<Loop>",
          _remotionInternalLoopDisplay: loopDisplay,
          layout: props.layout,
          style,
          children
        })
      });
    };
    Loop.useLoop = useLoop;
    PreloadContext = (0, import_react27.createContext)({});
    preloads = {};
    updaters = [];
    setPreloads = (updater) => {
      preloads = updater(preloads);
      updaters.forEach((u) => u());
    };
    PrefetchProvider = ({ children }) => {
      const [_preloads, _setPreloads] = (0, import_react27.useState)(() => preloads);
      (0, import_react27.useEffect)(() => {
        const updaterFunction = () => {
          _setPreloads(preloads);
        };
        updaters.push(updaterFunction);
        return () => {
          updaters = updaters.filter((u) => u !== updaterFunction);
        };
      }, []);
      return (0, import_jsx_runtime12.jsx)(PreloadContext.Provider, {
        value: _preloads,
        children
      });
    };
    usePreload = (src) => {
      const preloads2 = (0, import_react26.useContext)(PreloadContext);
      return preloads2[src] ?? src;
    };
    blobToBase64 = function(blob) {
      const reader = new FileReader();
      return new Promise((resolve, reject) => {
        reader.onload = function() {
          const dataUrl = reader.result;
          resolve(dataUrl);
        };
        reader.onerror = (err) => {
          return reject(err);
        };
        reader.readAsDataURL(blob);
      });
    };
    getBlobFromReader = async ({
      reader,
      contentType,
      contentLength,
      onProgress
    }) => {
      let receivedLength = 0;
      const chunks = [];
      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          break;
        }
        chunks.push(value);
        receivedLength += value.length;
        if (onProgress) {
          onProgress({ loadedBytes: receivedLength, totalBytes: contentLength });
        }
      }
      const chunksAll = new Uint8Array(receivedLength);
      let position = 0;
      for (const chunk of chunks) {
        chunksAll.set(chunk, position);
        position += chunk.length;
      }
      return new Blob([chunksAll], {
        type: contentType ?? void 0
      });
    };
    prefetch = (src, options) => {
      const method = (options == null ? void 0 : options.method) ?? "blob-url";
      if (getRemotionEnvironment().isRendering) {
        return {
          free: () => {
            return;
          },
          waitUntilDone: () => Promise.resolve(src)
        };
      }
      let canceled = false;
      let objectUrl = null;
      let resolve = () => {
        return;
      };
      let reject = () => {
        return;
      };
      const waitUntilDone = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
      });
      const controller = new AbortController();
      let canBeAborted = true;
      fetch(src, {
        signal: controller.signal
      }).then((res) => {
        canBeAborted = false;
        if (canceled) {
          return null;
        }
        if (!res.ok) {
          throw new Error(`HTTP error, status = ${res.status}`);
        }
        const headerContentType = res.headers.get("Content-Type");
        const contentType = (options == null ? void 0 : options.contentType) ?? headerContentType;
        const hasProperContentType = contentType && (contentType.startsWith("video/") || contentType.startsWith("audio/") || contentType.startsWith("image/"));
        if (!hasProperContentType) {
          console.warn(`Called prefetch() on ${src} which returned a "Content-Type" of ${headerContentType}. Prefetched content should have a proper content type (video/... or audio/...) or a contentType passed the options of prefetch(). Otherwise, prefetching will not work properly in all browsers.`);
        }
        if (!res.body) {
          throw new Error(`HTTP response of ${src} has no body`);
        }
        const reader = res.body.getReader();
        return getBlobFromReader({
          reader,
          contentType: (options == null ? void 0 : options.contentType) ?? headerContentType ?? null,
          contentLength: res.headers.get("Content-Length") ? parseInt(res.headers.get("Content-Length"), 10) : null,
          onProgress: options == null ? void 0 : options.onProgress
        });
      }).then((buf) => {
        if (!buf) {
          return;
        }
        const actualBlob = (options == null ? void 0 : options.contentType) ? new Blob([buf], { type: options.contentType }) : buf;
        if (method === "base64") {
          return blobToBase64(actualBlob);
        }
        return URL.createObjectURL(actualBlob);
      }).then((url) => {
        if (canceled) {
          return;
        }
        objectUrl = url;
        setPreloads((p) => ({
          ...p,
          [src]: objectUrl
        }));
        resolve(objectUrl);
      }).catch((err) => {
        reject(err);
      });
      return {
        free: () => {
          if (objectUrl) {
            if (method === "blob-url") {
              URL.revokeObjectURL(objectUrl);
            }
            setPreloads((p) => {
              const copy = { ...p };
              delete copy[src];
              return copy;
            });
          } else {
            canceled = true;
            if (canBeAborted) {
              try {
                controller.abort(new Error("free() called"));
              } catch (e) {
              }
            }
          }
        },
        waitUntilDone: () => {
          return waitUntilDone;
        }
      };
    };
    validateMediaProps = (props, component) => {
      if (typeof props.volume !== "number" && typeof props.volume !== "function" && typeof props.volume !== "undefined") {
        throw new TypeError(`You have passed a volume of type ${typeof props.volume} to your <${component} /> component. Volume must be a number or a function with the signature '(frame: number) => number' undefined.`);
      }
      if (typeof props.volume === "number" && props.volume < 0) {
        throw new TypeError(`You have passed a volume below 0 to your <${component} /> component. Volume must be between 0 and 1`);
      }
      if (typeof props.playbackRate !== "number" && typeof props.playbackRate !== "undefined") {
        throw new TypeError(`You have passed a playbackRate of type ${typeof props.playbackRate} to your <${component} /> component. Playback rate must a real number or undefined.`);
      }
      if (typeof props.playbackRate === "number" && (isNaN(props.playbackRate) || !Number.isFinite(props.playbackRate) || props.playbackRate <= 0)) {
        throw new TypeError(`You have passed a playbackRate of ${props.playbackRate} to your <${component} /> component. Playback rate must be a real number above 0.`);
      }
    };
    validateStartFromProps = (startFrom, endAt) => {
      if (typeof startFrom !== "undefined") {
        if (typeof startFrom !== "number") {
          throw new TypeError(`type of startFrom prop must be a number, instead got type ${typeof startFrom}.`);
        }
        if (isNaN(startFrom) || startFrom === Infinity) {
          throw new TypeError("startFrom prop can not be NaN or Infinity.");
        }
        if (startFrom < 0) {
          throw new TypeError(`startFrom must be greater than equal to 0 instead got ${startFrom}.`);
        }
      }
      if (typeof endAt !== "undefined") {
        if (typeof endAt !== "number") {
          throw new TypeError(`type of endAt prop must be a number, instead got type ${typeof endAt}.`);
        }
        if (isNaN(endAt)) {
          throw new TypeError("endAt prop can not be NaN.");
        }
        if (endAt <= 0) {
          throw new TypeError(`endAt must be a positive number, instead got ${endAt}.`);
        }
      }
      if (endAt < startFrom) {
        throw new TypeError("endAt prop must be greater than startFrom prop.");
      }
    };
    durationReducer = (state, action) => {
      switch (action.type) {
        case "got-duration": {
          const absoluteSrc = getAbsoluteSrc(action.src);
          if (state[absoluteSrc] === action.durationInSeconds) {
            return state;
          }
          return {
            ...state,
            [absoluteSrc]: action.durationInSeconds
          };
        }
        default:
          return state;
      }
    };
    DurationsContext = (0, import_react28.createContext)({
      durations: {},
      setDurations: () => {
        throw new Error("context missing");
      }
    });
    DurationsContextProvider = ({ children }) => {
      const [durations, setDurations] = (0, import_react28.useReducer)(durationReducer, {});
      const value = (0, import_react28.useMemo)(() => {
        return {
          durations,
          setDurations
        };
      }, [durations]);
      return (0, import_jsx_runtime13.jsx)(DurationsContext.Provider, {
        value,
        children
      });
    };
    random = (seed, dummy) => {
      if (dummy !== void 0) {
        throw new TypeError("random() takes only one argument");
      }
      if (seed === null) {
        return Math.random();
      }
      if (typeof seed === "string") {
        return mulberry32(hashCode(seed));
      }
      if (typeof seed === "number") {
        return mulberry32(seed * 1e10);
      }
      throw new Error("random() argument must be a number or a string");
    };
    useMediaStartsAt = () => {
      const parentSequence = (0, import_react31.useContext)(SequenceContext);
      const startsAt = Math.min(0, (parentSequence == null ? void 0 : parentSequence.relativeFrom) ?? 0);
      return startsAt;
    };
    useFrameForVolumeProp = (behavior) => {
      const loop = Loop.useLoop();
      const frame = useCurrentFrame();
      const startsAt = useMediaStartsAt();
      if (behavior === "repeat" || loop === null) {
        return frame + startsAt;
      }
      return frame + startsAt + loop.durationInFrames * loop.iteration;
    };
    getAssetDisplayName = (filename) => {
      if (/data:|blob:/.test(filename.substring(0, 5))) {
        return "Data URL";
      }
      const splitted = filename.split("/").map((s) => s.split("\\")).flat(1);
      return splitted[splitted.length - 1];
    };
    playAndHandleNotAllowedError = (mediaRef, mediaType, onAutoPlayError) => {
      const { current } = mediaRef;
      if (!current) {
        return;
      }
      const prom = current.play();
      if (prom.catch) {
        prom.catch((err) => {
          if (!current) {
            return;
          }
          if (err.message.includes("request was interrupted by a call to pause")) {
            return;
          }
          if (err.message.includes("The operation was aborted.")) {
            return;
          }
          if (err.message.includes("The fetching process for the media resource was aborted by the user agent")) {
            return;
          }
          if (err.message.includes("request was interrupted by a new load request")) {
            return;
          }
          if (err.message.includes("because the media was removed from the document")) {
            return;
          }
          console.log(`Could not play ${mediaType} due to following error: `, err);
          if (!current.muted) {
            if (onAutoPlayError) {
              onAutoPlayError();
              return;
            }
            console.log(`The video will be muted and we'll retry playing it.`);
            if (mediaType === "video" && getRemotionEnvironment().isPlayer) {
              console.log("Use onAutoPlayError() to handle this error yourself.");
            }
            current.muted = true;
            current.play();
          }
        });
      }
    };
    evaluateVolume = ({
      frame,
      volume,
      mediaVolume = 1,
      allowAmplificationDuringRender
    }) => {
      const maxVolume = allowAmplificationDuringRender ? Infinity : 1;
      if (typeof volume === "number") {
        return Math.min(maxVolume, volume * mediaVolume);
      }
      if (typeof volume === "undefined") {
        return Number(mediaVolume);
      }
      const evaluated = volume(frame) * mediaVolume;
      if (typeof evaluated !== "number") {
        throw new TypeError(`You passed in a a function to the volume prop but it did not return a number but a value of type ${typeof evaluated} for frame ${frame}`);
      }
      if (Number.isNaN(evaluated)) {
        throw new TypeError(`You passed in a function to the volume prop but it returned NaN for frame ${frame}.`);
      }
      if (!Number.isFinite(evaluated)) {
        throw new TypeError(`You passed in a function to the volume prop but it returned a non-finite number for frame ${frame}.`);
      }
      return Math.max(0, Math.min(maxVolume, evaluated));
    };
    didWarn2 = {};
    warnOnce2 = (message) => {
      if (didWarn2[message]) {
        return;
      }
      console.warn(message);
      didWarn2[message] = true;
    };
    useMediaInTimeline = ({
      volume,
      mediaVolume,
      mediaRef,
      src,
      mediaType,
      playbackRate,
      displayName,
      id,
      stack,
      showInTimeline,
      premountDisplay,
      onAutoPlayError
    }) => {
      const videoConfig = useVideoConfig();
      const { rootId, audioAndVideoTags } = (0, import_react30.useContext)(TimelineContext);
      const parentSequence = (0, import_react30.useContext)(SequenceContext);
      const actualFrom = parentSequence ? parentSequence.relativeFrom + parentSequence.cumulatedFrom : 0;
      const [playing] = usePlayingState();
      const startsAt = useMediaStartsAt();
      const { registerSequence, unregisterSequence } = (0, import_react30.useContext)(SequenceManager);
      const [initialVolume] = (0, import_react30.useState)(() => volume);
      const nonce = useNonce();
      const duration = parentSequence ? Math.min(parentSequence.durationInFrames, videoConfig.durationInFrames) : videoConfig.durationInFrames;
      const doesVolumeChange = typeof volume === "function";
      const volumes = (0, import_react30.useMemo)(() => {
        if (typeof volume === "number") {
          return volume;
        }
        return new Array(Math.floor(Math.max(0, duration + startsAt))).fill(true).map((_, i) => {
          return evaluateVolume({
            frame: i + startsAt,
            volume,
            mediaVolume,
            allowAmplificationDuringRender: false
          });
        }).join(",");
      }, [duration, startsAt, volume, mediaVolume]);
      (0, import_react30.useEffect)(() => {
        if (typeof volume === "number" && volume !== initialVolume) {
          warnOnce2(`Remotion: The ${mediaType} with src ${src} has changed it's volume. Prefer the callback syntax for setting volume to get better timeline display: https://www.remotion.dev/docs/using-audio/#controlling-volume`);
        }
      }, [initialVolume, mediaType, src, volume]);
      (0, import_react30.useEffect)(() => {
        var _a, _b;
        if (!mediaRef.current) {
          return;
        }
        if (!src) {
          throw new Error("No src passed");
        }
        if (!getRemotionEnvironment().isStudio && ((_b = (_a = window.process) == null ? void 0 : _a.env) == null ? void 0 : _b.NODE_ENV) !== "test") {
          return;
        }
        if (!showInTimeline) {
          return;
        }
        registerSequence({
          type: mediaType,
          src,
          id,
          duration,
          from: 0,
          parent: (parentSequence == null ? void 0 : parentSequence.id) ?? null,
          displayName: displayName ?? getAssetDisplayName(src),
          rootId,
          volume: volumes,
          showInTimeline: true,
          nonce,
          startMediaFrom: 0 - startsAt,
          doesVolumeChange,
          loopDisplay: void 0,
          playbackRate,
          stack,
          premountDisplay
        });
        return () => {
          unregisterSequence(id);
        };
      }, [
        actualFrom,
        duration,
        id,
        parentSequence,
        src,
        registerSequence,
        rootId,
        unregisterSequence,
        videoConfig,
        volumes,
        doesVolumeChange,
        nonce,
        mediaRef,
        mediaType,
        startsAt,
        playbackRate,
        displayName,
        stack,
        showInTimeline,
        premountDisplay
      ]);
      (0, import_react30.useEffect)(() => {
        const tag = {
          id,
          play: () => {
            if (!playing) {
              return;
            }
            return playAndHandleNotAllowedError(mediaRef, mediaType, onAutoPlayError);
          }
        };
        audioAndVideoTags.current.push(tag);
        return () => {
          audioAndVideoTags.current = audioAndVideoTags.current.filter((a2) => a2.id !== id);
        };
      }, [audioAndVideoTags, id, mediaRef, mediaType, onAutoPlayError, playing]);
    };
    useBufferManager = () => {
      const [blocks, setBlocks] = (0, import_react35.useState)([]);
      const [onBufferingCallbacks, setOnBufferingCallbacks] = (0, import_react35.useState)([]);
      const [onResumeCallbacks, setOnResumeCallbacks] = (0, import_react35.useState)([]);
      const buffering = (0, import_react35.useRef)(false);
      const addBlock = (0, import_react35.useCallback)((block) => {
        setBlocks((b2) => [...b2, block]);
        return {
          unblock: () => {
            setBlocks((b2) => {
              const newArr = b2.filter((bx) => bx !== block);
              if (newArr.length === b2.length) {
                return b2;
              }
              return newArr;
            });
          }
        };
      }, []);
      const listenForBuffering = (0, import_react35.useCallback)((callback) => {
        setOnBufferingCallbacks((c2) => [...c2, callback]);
        return {
          remove: () => {
            setOnBufferingCallbacks((c2) => c2.filter((cb) => cb !== callback));
          }
        };
      }, []);
      const listenForResume = (0, import_react35.useCallback)((callback) => {
        setOnResumeCallbacks((c2) => [...c2, callback]);
        return {
          remove: () => {
            setOnResumeCallbacks((c2) => c2.filter((cb) => cb !== callback));
          }
        };
      }, []);
      (0, import_react35.useEffect)(() => {
        if (blocks.length > 0) {
          onBufferingCallbacks.forEach((c2) => c2());
        }
      }, [blocks]);
      (0, import_react35.useEffect)(() => {
        if (blocks.length === 0) {
          onResumeCallbacks.forEach((c2) => c2());
        }
      }, [blocks]);
      return (0, import_react35.useMemo)(() => {
        return { addBlock, listenForBuffering, listenForResume, buffering };
      }, [addBlock, buffering, listenForBuffering, listenForResume]);
    };
    BufferingContextReact = import_react35.default.createContext(null);
    BufferingProvider = ({ children }) => {
      const bufferManager = useBufferManager();
      return (0, import_jsx_runtime14.jsx)(BufferingContextReact.Provider, {
        value: bufferManager,
        children
      });
    };
    useIsPlayerBuffering = (bufferManager) => {
      const [isBuffering, setIsBuffering] = (0, import_react35.useState)(bufferManager.buffering.current);
      (0, import_react35.useEffect)(() => {
        const onBuffer = () => {
          setIsBuffering(true);
        };
        const onResume = () => {
          setIsBuffering(false);
        };
        bufferManager.listenForBuffering(onBuffer);
        bufferManager.listenForResume(onResume);
        return () => {
          bufferManager.listenForBuffering(() => {
            return;
          });
          bufferManager.listenForResume(() => {
            return;
          });
        };
      }, [bufferManager]);
      return isBuffering;
    };
    useBufferState = () => {
      const buffer = (0, import_react34.useContext)(BufferingContextReact);
      const addBlock = buffer ? buffer.addBlock : null;
      return (0, import_react34.useMemo)(() => ({
        delayPlayback: () => {
          if (!addBlock) {
            throw new Error("Tried to enable the buffering state, but a Remotion context was not found. This API can only be called in a component that was passed to the Remotion Player or a <Composition>. Or you might have experienced a version mismatch - run `npx remotion versions` and ensure all packages have the same version. This error is thrown by the buffer state https://remotion.dev/docs/player/buffer-state");
          }
          const { unblock } = addBlock({
            id: String(Math.random())
          });
          return { unblock };
        }
      }), [addBlock]);
    };
    useBufferUntilFirstFrame = ({
      mediaRef,
      mediaType,
      onVariableFpsVideoDetected,
      pauseWhenBuffering
    }) => {
      const bufferingRef = (0, import_react33.useRef)(false);
      const { delayPlayback } = useBufferState();
      const bufferUntilFirstFrame = (0, import_react33.useCallback)((requestedTime) => {
        if (mediaType !== "video") {
          return;
        }
        if (!pauseWhenBuffering) {
          return;
        }
        const current = mediaRef.current;
        if (!current) {
          return;
        }
        if (!current.requestVideoFrameCallback) {
          return;
        }
        bufferingRef.current = true;
        const playback = delayPlayback();
        const unblock = () => {
          playback.unblock();
          current.removeEventListener("ended", unblock, {
            once: true
          });
          current.removeEventListener("pause", unblock, {
            once: true
          });
          bufferingRef.current = false;
        };
        const onEndedOrPauseOrCanPlay = () => {
          unblock();
        };
        current.requestVideoFrameCallback((_, info) => {
          const differenceFromRequested = Math.abs(info.mediaTime - requestedTime);
          if (differenceFromRequested > 0.5) {
            onVariableFpsVideoDetected();
          }
          unblock();
        });
        current.addEventListener("ended", onEndedOrPauseOrCanPlay, { once: true });
        current.addEventListener("pause", onEndedOrPauseOrCanPlay, { once: true });
        current.addEventListener("canplay", onEndedOrPauseOrCanPlay, {
          once: true
        });
      }, [
        delayPlayback,
        mediaRef,
        mediaType,
        onVariableFpsVideoDetected,
        pauseWhenBuffering
      ]);
      return (0, import_react33.useMemo)(() => {
        return {
          isBuffering: () => bufferingRef.current,
          bufferUntilFirstFrame
        };
      }, [bufferUntilFirstFrame]);
    };
    useMediaBuffering = ({
      element,
      shouldBuffer,
      isPremounting
    }) => {
      const buffer = useBufferState();
      const [isBuffering, setIsBuffering] = (0, import_react36.useState)(false);
      (0, import_react36.useEffect)(() => {
        let cleanupFns = [];
        const { current } = element;
        if (!current) {
          return;
        }
        if (!shouldBuffer) {
          return;
        }
        if (isPremounting) {
          return;
        }
        const cleanup = () => {
          cleanupFns.forEach((fn) => fn());
          cleanupFns = [];
          setIsBuffering(false);
        };
        const onWaiting = () => {
          setIsBuffering(true);
          const { unblock } = buffer.delayPlayback();
          const onCanPlay = () => {
            cleanup();
            init();
          };
          const onError = () => {
            cleanup();
            init();
          };
          current.addEventListener("canplay", onCanPlay, {
            once: true
          });
          cleanupFns.push(() => {
            current.removeEventListener("canplay", onCanPlay);
          });
          current.addEventListener("error", onError, {
            once: true
          });
          cleanupFns.push(() => {
            current.removeEventListener("error", onError);
          });
          cleanupFns.push(() => {
            unblock();
          });
        };
        const init = () => {
          if (current.readyState < current.HAVE_FUTURE_DATA) {
            onWaiting();
            if (!navigator.userAgent.includes("Firefox/")) {
              current.load();
            }
          } else {
            current.addEventListener("waiting", onWaiting);
            cleanupFns.push(() => {
              current.removeEventListener("waiting", onWaiting);
            });
          }
        };
        init();
        return () => {
          cleanup();
        };
      }, [buffer, element, isPremounting, shouldBuffer]);
      return isBuffering;
    };
    useRequestVideoCallbackTime = ({
      mediaRef,
      mediaType,
      lastSeek,
      onVariableFpsVideoDetected
    }) => {
      const currentTime = (0, import_react37.useRef)(null);
      (0, import_react37.useEffect)(() => {
        const { current } = mediaRef;
        if (current) {
          currentTime.current = current.currentTime;
        } else {
          currentTime.current = null;
          return;
        }
        if (mediaType !== "video") {
          currentTime.current = null;
          return;
        }
        const videoTag = current;
        if (!videoTag.requestVideoFrameCallback) {
          return;
        }
        let cancel = () => {
          return;
        };
        const request = () => {
          if (!videoTag) {
            return;
          }
          const cb = videoTag.requestVideoFrameCallback((_, info) => {
            if (currentTime.current !== null) {
              const difference = Math.abs(currentTime.current - info.mediaTime);
              const differenceToLastSeek = Math.abs(lastSeek.current === null ? Infinity : info.mediaTime - lastSeek.current);
              if (difference > 0.5 && differenceToLastSeek > 0.5 && info.mediaTime > currentTime.current) {
                onVariableFpsVideoDetected();
              }
            }
            currentTime.current = info.mediaTime;
            request();
          });
          cancel = () => {
            videoTag.cancelVideoFrameCallback(cb);
            cancel = () => {
              return;
            };
          };
        };
        request();
        return () => {
          cancel();
        };
      }, [lastSeek, mediaRef, mediaType, onVariableFpsVideoDetected]);
      return currentTime;
    };
    getExpectedMediaFrameUncorrected = ({
      frame,
      playbackRate,
      startFrom
    }) => {
      return interpolate(frame, [-1, startFrom, startFrom + 1], [-1, startFrom, startFrom + playbackRate]);
    };
    getMediaTime = ({
      fps,
      frame,
      playbackRate,
      startFrom
    }) => {
      const expectedFrame = getExpectedMediaFrameUncorrected({
        frame,
        playbackRate,
        startFrom
      });
      const msPerFrame = 1e3 / fps;
      return expectedFrame * msPerFrame / 1e3;
    };
    toSeconds = (time, fps) => {
      return Math.round(time / fps * 100) / 100;
    };
    isIosSafari = () => {
      if (typeof window === "undefined") {
        return false;
      }
      const isIpadIPodIPhone = /iP(ad|od|hone)/i.test(window.navigator.userAgent);
      const isAppleWebKit = /AppleWebKit/.test(window.navigator.userAgent);
      return isIpadIPodIPhone && isAppleWebKit;
    };
    isIOSSafariAndBlob = (actualSrc) => {
      return isIosSafari() && actualSrc.startsWith("blob:");
    };
    getVideoFragmentStart = ({
      actualFrom,
      fps
    }) => {
      return toSeconds(Math.max(0, -actualFrom), fps);
    };
    getVideoFragmentEnd = ({
      duration,
      fps
    }) => {
      return toSeconds(duration, fps);
    };
    appendVideoFragment = ({
      actualSrc,
      actualFrom,
      duration,
      fps
    }) => {
      if (isIOSSafariAndBlob(actualSrc)) {
        return actualSrc;
      }
      if (actualSrc.startsWith("data:")) {
        return actualSrc;
      }
      const existingHash = Boolean(new URL(actualSrc, (typeof window === "undefined" ? null : window.location.href) ?? "http://localhost:3000").hash);
      if (existingHash) {
        return actualSrc;
      }
      if (!Number.isFinite(actualFrom)) {
        return actualSrc;
      }
      const withStartHash = `${actualSrc}#t=${getVideoFragmentStart({ actualFrom, fps })}`;
      if (!Number.isFinite(duration)) {
        return withStartHash;
      }
      return `${withStartHash},${getVideoFragmentEnd({ duration, fps })}`;
    };
    isSubsetOfDuration = ({
      prevStartFrom,
      newStartFrom,
      prevDuration,
      newDuration,
      fps
    }) => {
      const previousFrom = getVideoFragmentStart({ actualFrom: prevStartFrom, fps });
      const newFrom = getVideoFragmentStart({ actualFrom: newStartFrom, fps });
      const previousEnd = getVideoFragmentEnd({ duration: prevDuration, fps });
      const newEnd = getVideoFragmentEnd({ duration: newDuration, fps });
      if (newFrom < previousFrom) {
        return false;
      }
      if (newEnd > previousEnd) {
        return false;
      }
      return true;
    };
    useAppendVideoFragment = ({
      actualSrc: initialActualSrc,
      actualFrom: initialActualFrom,
      duration: initialDuration,
      fps
    }) => {
      const actualFromRef = (0, import_react38.useRef)(initialActualFrom);
      const actualDuration = (0, import_react38.useRef)(initialDuration);
      const actualSrc = (0, import_react38.useRef)(initialActualSrc);
      if (!isSubsetOfDuration({
        prevStartFrom: actualFromRef.current,
        newStartFrom: initialActualFrom,
        prevDuration: actualDuration.current,
        newDuration: initialDuration,
        fps
      }) || initialActualSrc !== actualSrc.current) {
        actualFromRef.current = initialActualFrom;
        actualDuration.current = initialDuration;
        actualSrc.current = initialActualSrc;
      }
      const appended = appendVideoFragment({
        actualSrc: actualSrc.current,
        actualFrom: actualFromRef.current,
        duration: actualDuration.current,
        fps
      });
      return appended;
    };
    alreadyWarned = {};
    warnAboutNonSeekableMedia = (ref, type) => {
      if (ref === null) {
        return;
      }
      if (ref.seekable.length === 0) {
        return;
      }
      if (ref.seekable.length > 1) {
        return;
      }
      if (alreadyWarned[ref.src]) {
        return;
      }
      const range = { start: ref.seekable.start(0), end: ref.seekable.end(0) };
      if (range.start === 0 && range.end === 0) {
        const msg = [
          `The media ${ref.src} cannot be seeked. This could be one of few reasons:`,
          "1) The media resource was replaced while the video is playing but it was not loaded yet.",
          "2) The media does not support seeking.",
          "3) The media was loaded with security headers prventing it from being included.",
          "Please see https://remotion.dev/docs/non-seekable-media for assistance."
        ].join("\n");
        if (type === "console-error") {
          console.error(msg);
        } else if (type === "console-warning") {
          console.warn(`The media ${ref.src} does not support seeking. The video will render fine, but may not play correctly in the Remotion Studio and in the <Player>. See https://remotion.dev/docs/non-seekable-media for an explanation.`);
        } else {
          throw new Error(msg);
        }
        alreadyWarned[ref.src] = true;
      }
    };
    DEFAULT_ACCEPTABLE_TIMESHIFT = 0.45;
    seek = (mediaRef, time) => {
      if (!mediaRef.current) {
        return;
      }
      const timeToSet = isIosSafari() ? Number(time.toFixed(1)) : time;
      mediaRef.current.currentTime = timeToSet;
    };
    useMediaPlayback = ({
      mediaRef,
      src,
      mediaType,
      playbackRate: localPlaybackRate,
      onlyWarnForMediaSeekingError,
      acceptableTimeshift,
      pauseWhenBuffering,
      isPremounting,
      debugSeeking,
      onAutoPlayError
    }) => {
      const { playbackRate: globalPlaybackRate } = (0, import_react32.useContext)(TimelineContext);
      const frame = useCurrentFrame();
      const absoluteFrame = useTimelinePosition();
      const [playing] = usePlayingState();
      const buffering = (0, import_react32.useContext)(BufferingContextReact);
      const { fps } = useVideoConfig();
      const mediaStartsAt = useMediaStartsAt();
      const lastSeekDueToShift = (0, import_react32.useRef)(null);
      const lastSeek = (0, import_react32.useRef)(null);
      if (!buffering) {
        throw new Error("useMediaPlayback must be used inside a <BufferingContext>");
      }
      const isVariableFpsVideoMap = (0, import_react32.useRef)({});
      const onVariableFpsVideoDetected = (0, import_react32.useCallback)(() => {
        if (!src) {
          return;
        }
        if (debugSeeking) {
          console.log(`Detected ${src} as a variable FPS video. Disabling buffering while seeking.`);
        }
        isVariableFpsVideoMap.current[src] = true;
      }, [debugSeeking, src]);
      const currentTime = useRequestVideoCallbackTime({
        mediaRef,
        mediaType,
        lastSeek,
        onVariableFpsVideoDetected
      });
      const desiredUnclampedTime = getMediaTime({
        frame,
        playbackRate: localPlaybackRate,
        startFrom: -mediaStartsAt,
        fps
      });
      const isMediaTagBuffering = useMediaBuffering({
        element: mediaRef,
        shouldBuffer: pauseWhenBuffering,
        isPremounting
      });
      const { bufferUntilFirstFrame, isBuffering } = useBufferUntilFirstFrame({
        mediaRef,
        mediaType,
        onVariableFpsVideoDetected,
        pauseWhenBuffering
      });
      const playbackRate = localPlaybackRate * globalPlaybackRate;
      const acceptableTimeShiftButLessThanDuration = (() => {
        var _a;
        if ((_a = mediaRef.current) == null ? void 0 : _a.duration) {
          return Math.min(mediaRef.current.duration, acceptableTimeshift ?? DEFAULT_ACCEPTABLE_TIMESHIFT);
        }
        return acceptableTimeshift;
      })();
      const isPlayerBuffering = useIsPlayerBuffering(buffering);
      (0, import_react32.useEffect)(() => {
        var _a, _b;
        if (!playing) {
          (_a = mediaRef.current) == null ? void 0 : _a.pause();
          return;
        }
        const isMediaTagBufferingOrStalled = isMediaTagBuffering || isBuffering();
        if (isPlayerBuffering && !isMediaTagBufferingOrStalled) {
          (_b = mediaRef.current) == null ? void 0 : _b.pause();
        }
      }, [isBuffering, isMediaTagBuffering, isPlayerBuffering, mediaRef, playing]);
      (0, import_react32.useEffect)(() => {
        const tagName = mediaType === "audio" ? "<Audio>" : "<Video>";
        if (!mediaRef.current) {
          throw new Error(`No ${mediaType} ref found`);
        }
        if (!src) {
          throw new Error(`No 'src' attribute was passed to the ${tagName} element.`);
        }
        const playbackRateToSet = Math.max(0, playbackRate);
        if (mediaRef.current.playbackRate !== playbackRateToSet) {
          mediaRef.current.playbackRate = playbackRateToSet;
        }
        const { duration } = mediaRef.current;
        const shouldBeTime = !Number.isNaN(duration) && Number.isFinite(duration) ? Math.min(duration, desiredUnclampedTime) : desiredUnclampedTime;
        const mediaTagTime = mediaRef.current.currentTime;
        const rvcTime = currentTime.current ?? null;
        const isVariableFpsVideo = isVariableFpsVideoMap.current[src];
        const timeShiftMediaTag = Math.abs(shouldBeTime - mediaTagTime);
        const timeShiftRvcTag = rvcTime ? Math.abs(shouldBeTime - rvcTime) : null;
        const timeShift = timeShiftRvcTag && !isVariableFpsVideo ? timeShiftRvcTag : timeShiftMediaTag;
        if (debugSeeking) {
          console.log({
            mediaTagTime,
            rvcTime,
            shouldBeTime,
            state: mediaRef.current.readyState,
            playing: !mediaRef.current.paused,
            isVariableFpsVideo
          });
        }
        if (timeShift > acceptableTimeShiftButLessThanDuration && lastSeekDueToShift.current !== shouldBeTime) {
          if (debugSeeking) {
            console.log("Seeking", {
              shouldBeTime,
              isTime: mediaTagTime,
              rvcTime,
              timeShift,
              isVariableFpsVideo
            });
          }
          seek(mediaRef, shouldBeTime);
          lastSeek.current = shouldBeTime;
          lastSeekDueToShift.current = shouldBeTime;
          if (playing && !isVariableFpsVideo) {
            if (playbackRate > 0) {
              bufferUntilFirstFrame(shouldBeTime);
            }
            if (mediaRef.current.paused) {
              playAndHandleNotAllowedError(mediaRef, mediaType, onAutoPlayError);
            }
          }
          if (!onlyWarnForMediaSeekingError) {
            warnAboutNonSeekableMedia(mediaRef.current, onlyWarnForMediaSeekingError ? "console-warning" : "console-error");
          }
          return;
        }
        const seekThreshold = playing ? 0.15 : 1e-5;
        const makesSenseToSeek = Math.abs(mediaRef.current.currentTime - shouldBeTime) > seekThreshold;
        const isMediaTagBufferingOrStalled = isMediaTagBuffering || isBuffering();
        const isSomethingElseBuffering = buffering.buffering.current && !isMediaTagBufferingOrStalled;
        if (!playing || isSomethingElseBuffering) {
          if (makesSenseToSeek) {
            seek(mediaRef, shouldBeTime);
            lastSeek.current = shouldBeTime;
          }
          return;
        }
        if (mediaRef.current.paused && !mediaRef.current.ended || absoluteFrame === 0) {
          if (makesSenseToSeek) {
            seek(mediaRef, shouldBeTime);
            lastSeek.current = shouldBeTime;
          }
          playAndHandleNotAllowedError(mediaRef, mediaType, onAutoPlayError);
          if (!isVariableFpsVideo) {
            if (playbackRate > 0) {
              bufferUntilFirstFrame(shouldBeTime);
            }
          }
        }
      }, [
        absoluteFrame,
        acceptableTimeShiftButLessThanDuration,
        bufferUntilFirstFrame,
        buffering.buffering,
        currentTime,
        debugSeeking,
        desiredUnclampedTime,
        isBuffering,
        isMediaTagBuffering,
        mediaRef,
        mediaType,
        onlyWarnForMediaSeekingError,
        playbackRate,
        playing,
        src,
        onAutoPlayError
      ]);
    };
    useMediaTagVolume = (mediaRef) => {
      const [actualVolume, setActualVolume] = (0, import_react39.useState)(1);
      (0, import_react39.useEffect)(() => {
        const ref = mediaRef.current;
        if (!ref) {
          return;
        }
        const onChange = () => {
          setActualVolume(ref.volume);
        };
        ref.addEventListener("volumechange", onChange);
        return () => ref.removeEventListener("volumechange", onChange);
      }, [mediaRef]);
      (0, import_react39.useEffect)(() => {
        const ref = mediaRef.current;
        if (!ref) {
          return;
        }
        if (ref.volume !== actualVolume) {
          setActualVolume(ref.volume);
        }
      }, [actualVolume, mediaRef]);
      return actualVolume;
    };
    FLOATING_POINT_ERROR_THRESHOLD = 1e-5;
    isApproximatelyTheSame = (num1, num2) => {
      return Math.abs(num1 - num2) < FLOATING_POINT_ERROR_THRESHOLD;
    };
    useSyncVolumeWithMediaTag = ({
      volumePropFrame,
      actualVolume,
      volume,
      mediaVolume,
      mediaRef
    }) => {
      (0, import_react40.useEffect)(() => {
        const userPreferredVolume = evaluateVolume({
          frame: volumePropFrame,
          volume,
          mediaVolume,
          allowAmplificationDuringRender: false
        });
        if (!isApproximatelyTheSame(userPreferredVolume, actualVolume) && mediaRef.current) {
          mediaRef.current.volume = userPreferredVolume;
        }
      }, [actualVolume, volumePropFrame, mediaRef, volume, mediaVolume]);
    };
    MediaVolumeContext = (0, import_react41.createContext)({
      mediaMuted: false,
      mediaVolume: 1
    });
    SetMediaVolumeContext = (0, import_react41.createContext)({
      setMediaMuted: () => {
        throw new Error("default");
      },
      setMediaVolume: () => {
        throw new Error("default");
      }
    });
    useMediaVolumeState = () => {
      const { mediaVolume } = (0, import_react41.useContext)(MediaVolumeContext);
      const { setMediaVolume } = (0, import_react41.useContext)(SetMediaVolumeContext);
      return (0, import_react41.useMemo)(() => {
        return [mediaVolume, setMediaVolume];
      }, [mediaVolume, setMediaVolume]);
    };
    useMediaMutedState = () => {
      const { mediaMuted } = (0, import_react41.useContext)(MediaVolumeContext);
      const { setMediaMuted } = (0, import_react41.useContext)(SetMediaVolumeContext);
      return (0, import_react41.useMemo)(() => {
        return [mediaMuted, setMediaMuted];
      }, [mediaMuted, setMediaMuted]);
    };
    EMPTY_AUDIO = "data:audio/mp3;base64,/+MYxAAJcAV8AAgAABn//////+/gQ5BAMA+D4Pg+BAQBAEAwD4Pg+D4EBAEAQDAPg++hYBH///hUFQVBUFREDQNHmf///////+MYxBUGkAGIMAAAAP/29Xt6lUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV/+MYxDUAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV";
    compareProps = (obj1, obj2) => {
      const keysA = Object.keys(obj1).sort();
      const keysB = Object.keys(obj2).sort();
      if (keysA.length !== keysB.length) {
        return false;
      }
      for (let i = 0; i < keysA.length; i++) {
        if (keysA[i] !== keysB[i]) {
          return false;
        }
        if (obj1[keysA[i]] !== obj2[keysB[i]]) {
          return false;
        }
      }
      return true;
    };
    didPropChange = (key, newProp, prevProp) => {
      if (key === "src" && !prevProp.startsWith("data:") && !newProp.startsWith("data:")) {
        return new URL(prevProp, window.origin).toString() !== new URL(newProp, window.origin).toString();
      }
      if (prevProp === newProp) {
        return false;
      }
      return true;
    };
    SharedAudioContext = (0, import_react42.createContext)(null);
    SharedAudioContextProvider = ({ children, numberOfAudioTags, component }) => {
      const audios = (0, import_react42.useRef)([]);
      const [initialNumberOfAudioTags] = (0, import_react42.useState)(numberOfAudioTags);
      if (numberOfAudioTags !== initialNumberOfAudioTags) {
        throw new Error("The number of shared audio tags has changed dynamically. Once you have set this property, you cannot change it afterwards.");
      }
      const refs = (0, import_react42.useMemo)(() => {
        return new Array(numberOfAudioTags).fill(true).map(() => {
          return { id: Math.random(), ref: (0, import_react42.createRef)() };
        });
      }, [numberOfAudioTags]);
      const takenAudios = (0, import_react42.useRef)(new Array(numberOfAudioTags).fill(false));
      const rerenderAudios = (0, import_react42.useCallback)(() => {
        refs.forEach(({ ref, id }) => {
          var _a;
          const data = (_a = audios.current) == null ? void 0 : _a.find((a2) => a2.id === id);
          const { current } = ref;
          if (!current) {
            return;
          }
          if (data === void 0) {
            current.src = EMPTY_AUDIO;
            return;
          }
          if (!data) {
            throw new TypeError("Expected audio data to be there");
          }
          Object.keys(data.props).forEach((key) => {
            if (didPropChange(key, data.props[key], current[key])) {
              current[key] = data.props[key];
            }
          });
        });
      }, [refs]);
      const registerAudio = (0, import_react42.useCallback)((aud, audioId) => {
        var _a, _b;
        const found = (_a = audios.current) == null ? void 0 : _a.find((a2) => a2.audioId === audioId);
        if (found) {
          return found;
        }
        const firstFreeAudio = takenAudios.current.findIndex((a2) => a2 === false);
        if (firstFreeAudio === -1) {
          throw new Error(`Tried to simultaneously mount ${numberOfAudioTags + 1} <Audio /> tags at the same time. With the current settings, the maximum amount of <Audio /> tags is limited to ${numberOfAudioTags} at the same time. Remotion pre-mounts silent audio tags to help avoid browser autoplay restrictions. See https://remotion.dev/docs/player/autoplay#use-the-numberofsharedaudiotags-property for more information on how to increase this limit.`);
        }
        const { id, ref } = refs[firstFreeAudio];
        const cloned = [...takenAudios.current];
        cloned[firstFreeAudio] = id;
        takenAudios.current = cloned;
        const newElem = {
          props: aud,
          id,
          el: ref,
          audioId
        };
        (_b = audios.current) == null ? void 0 : _b.push(newElem);
        rerenderAudios();
        return newElem;
      }, [numberOfAudioTags, refs, rerenderAudios]);
      const unregisterAudio = (0, import_react42.useCallback)((id) => {
        var _a;
        const cloned = [...takenAudios.current];
        const index = refs.findIndex((r) => r.id === id);
        if (index === -1) {
          throw new TypeError("Error occured in ");
        }
        cloned[index] = false;
        takenAudios.current = cloned;
        audios.current = (_a = audios.current) == null ? void 0 : _a.filter((a2) => a2.id !== id);
        rerenderAudios();
      }, [refs, rerenderAudios]);
      const updateAudio = (0, import_react42.useCallback)(({
        aud,
        audioId,
        id
      }) => {
        var _a;
        let changed = false;
        audios.current = (_a = audios.current) == null ? void 0 : _a.map((prevA) => {
          if (prevA.id === id) {
            const isTheSame = compareProps(aud, prevA.props);
            if (isTheSame) {
              return prevA;
            }
            changed = true;
            return {
              ...prevA,
              props: aud,
              audioId
            };
          }
          return prevA;
        });
        if (changed) {
          rerenderAudios();
        }
      }, [rerenderAudios]);
      const playAllAudios = (0, import_react42.useCallback)(() => {
        refs.forEach((ref) => {
          playAndHandleNotAllowedError(ref.ref, "audio", null);
        });
      }, [refs]);
      const value = (0, import_react42.useMemo)(() => {
        return {
          registerAudio,
          unregisterAudio,
          updateAudio,
          playAllAudios,
          numberOfAudioTags
        };
      }, [
        numberOfAudioTags,
        playAllAudios,
        registerAudio,
        unregisterAudio,
        updateAudio
      ]);
      const resetAudio = (0, import_react42.useCallback)(() => {
        takenAudios.current = new Array(numberOfAudioTags).fill(false);
        audios.current = [];
        rerenderAudios();
      }, [numberOfAudioTags, rerenderAudios]);
      (0, import_react42.useEffect)(() => {
        return () => {
          resetAudio();
        };
      }, [component, resetAudio]);
      return (0, import_jsx_runtime15.jsxs)(SharedAudioContext.Provider, {
        value,
        children: [
          refs.map(({ id, ref }) => {
            return (0, import_jsx_runtime15.jsx)("audio", {
              ref,
              preload: "metadata",
              src: EMPTY_AUDIO
            }, id);
          }),
          children
        ]
      });
    };
    useSharedAudio = (aud, audioId) => {
      const ctx = (0, import_react42.useContext)(SharedAudioContext);
      const [elem] = (0, import_react42.useState)(() => {
        if (ctx && ctx.numberOfAudioTags > 0) {
          return ctx.registerAudio(aud, audioId);
        }
        return {
          el: import_react42.default.createRef(),
          id: Math.random(),
          props: aud,
          audioId
        };
      });
      const effectToUse = import_react42.default.useInsertionEffect ?? import_react42.default.useLayoutEffect;
      if (typeof document !== "undefined") {
        effectToUse(() => {
          if (ctx && ctx.numberOfAudioTags > 0) {
            ctx.updateAudio({ id: elem.id, aud, audioId });
          }
        }, [aud, ctx, elem.id, audioId]);
        effectToUse(() => {
          return () => {
            if (ctx && ctx.numberOfAudioTags > 0) {
              ctx.unregisterAudio(elem.id);
            }
          };
        }, [ctx, elem.id]);
      }
      return elem;
    };
    AudioForDevelopmentForwardRefFunction = (props, ref) => {
      const [initialShouldPreMountAudioElements] = (0, import_react29.useState)(props.shouldPreMountAudioTags);
      if (props.shouldPreMountAudioTags !== initialShouldPreMountAudioElements) {
        throw new Error("Cannot change the behavior for pre-mounting audio tags dynamically.");
      }
      const {
        volume,
        muted,
        playbackRate,
        shouldPreMountAudioTags,
        src,
        onDuration,
        acceptableTimeShiftInSeconds,
        _remotionInternalNeedsDurationCalculation,
        _remotionInternalNativeLoopPassed,
        _remotionInternalStack,
        _remotionDebugSeeking,
        allowAmplificationDuringRender,
        name,
        pauseWhenBuffering,
        showInTimeline,
        loopVolumeCurveBehavior,
        stack,
        ...nativeProps
      } = props;
      const [mediaVolume] = useMediaVolumeState();
      const [mediaMuted] = useMediaMutedState();
      const volumePropFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? "repeat");
      const { hidden } = (0, import_react29.useContext)(SequenceVisibilityToggleContext);
      if (!src) {
        throw new TypeError("No 'src' was passed to <Audio>.");
      }
      const preloadedSrc = usePreload(src);
      const sequenceContext = (0, import_react29.useContext)(SequenceContext);
      const [timelineId] = (0, import_react29.useState)(() => String(Math.random()));
      const isSequenceHidden = hidden[timelineId] ?? false;
      const userPreferredVolume = evaluateVolume({
        frame: volumePropFrame,
        volume,
        mediaVolume,
        allowAmplificationDuringRender: false
      });
      const propsToPass = (0, import_react29.useMemo)(() => {
        return {
          muted: muted || mediaMuted || isSequenceHidden || userPreferredVolume <= 0,
          src: preloadedSrc,
          loop: _remotionInternalNativeLoopPassed,
          ...nativeProps
        };
      }, [
        _remotionInternalNativeLoopPassed,
        isSequenceHidden,
        mediaMuted,
        muted,
        nativeProps,
        preloadedSrc,
        userPreferredVolume
      ]);
      const id = (0, import_react29.useMemo)(() => `audio-${random(src ?? "")}-${sequenceContext == null ? void 0 : sequenceContext.relativeFrom}-${sequenceContext == null ? void 0 : sequenceContext.cumulatedFrom}-${sequenceContext == null ? void 0 : sequenceContext.durationInFrames}-muted:${props.muted}-loop:${props.loop}`, [
        src,
        sequenceContext == null ? void 0 : sequenceContext.relativeFrom,
        sequenceContext == null ? void 0 : sequenceContext.cumulatedFrom,
        sequenceContext == null ? void 0 : sequenceContext.durationInFrames,
        props.muted,
        props.loop
      ]);
      const audioRef = useSharedAudio(propsToPass, id).el;
      const actualVolume = useMediaTagVolume(audioRef);
      useSyncVolumeWithMediaTag({
        volumePropFrame,
        actualVolume,
        volume,
        mediaVolume,
        mediaRef: audioRef
      });
      useMediaInTimeline({
        volume,
        mediaVolume,
        mediaRef: audioRef,
        src,
        mediaType: "audio",
        playbackRate: playbackRate ?? 1,
        displayName: name ?? null,
        id: timelineId,
        stack: _remotionInternalStack,
        showInTimeline,
        premountDisplay: null,
        onAutoPlayError: null
      });
      useMediaPlayback({
        mediaRef: audioRef,
        src,
        mediaType: "audio",
        playbackRate: playbackRate ?? 1,
        onlyWarnForMediaSeekingError: false,
        acceptableTimeshift: acceptableTimeShiftInSeconds ?? DEFAULT_ACCEPTABLE_TIMESHIFT,
        isPremounting: Boolean(sequenceContext == null ? void 0 : sequenceContext.premounting),
        pauseWhenBuffering,
        debugSeeking: _remotionDebugSeeking,
        onAutoPlayError: null
      });
      (0, import_react29.useImperativeHandle)(ref, () => {
        return audioRef.current;
      }, [audioRef]);
      const currentOnDurationCallback = (0, import_react29.useRef)();
      currentOnDurationCallback.current = onDuration;
      (0, import_react29.useEffect)(() => {
        var _a;
        const { current } = audioRef;
        if (!current) {
          return;
        }
        if (current.duration) {
          (_a = currentOnDurationCallback.current) == null ? void 0 : _a.call(currentOnDurationCallback, current.src, current.duration);
          return;
        }
        const onLoadedMetadata = () => {
          var _a2;
          (_a2 = currentOnDurationCallback.current) == null ? void 0 : _a2.call(currentOnDurationCallback, current.src, current.duration);
        };
        current.addEventListener("loadedmetadata", onLoadedMetadata);
        return () => {
          current.removeEventListener("loadedmetadata", onLoadedMetadata);
        };
      }, [audioRef, src]);
      if (initialShouldPreMountAudioElements) {
        return null;
      }
      return (0, import_jsx_runtime16.jsx)("audio", {
        ref: audioRef,
        preload: "metadata",
        ...propsToPass
      });
    };
    AudioForPreview = (0, import_react29.forwardRef)(AudioForDevelopmentForwardRefFunction);
    if (typeof window !== "undefined") {
      window.remotion_renderReady = false;
    }
    handles = [];
    if (typeof window !== "undefined") {
      window.remotion_delayRenderTimeouts = {};
    }
    DELAY_RENDER_CALLSTACK_TOKEN = "The delayRender was called:";
    DELAY_RENDER_RETRIES_LEFT = "Retries left: ";
    DELAY_RENDER_RETRY_TOKEN = "- Rendering the frame will be retried.";
    defaultTimeout = 3e4;
    delayRender = (label2, options) => {
      var _a;
      if (typeof label2 !== "string" && typeof label2 !== "undefined") {
        throw new Error("The label parameter of delayRender() must be a string or undefined, got: " + JSON.stringify(label2));
      }
      const handle = Math.random();
      handles.push(handle);
      const called = ((_a = Error().stack) == null ? void 0 : _a.replace(/^Error/g, "")) ?? "";
      if (getRemotionEnvironment().isRendering) {
        const timeoutToUse = ((options == null ? void 0 : options.timeoutInMilliseconds) ?? (typeof window === "undefined" ? defaultTimeout : window.remotion_puppeteerTimeout ?? defaultTimeout)) - 2e3;
        if (typeof window !== "undefined") {
          const retriesLeft = ((options == null ? void 0 : options.retries) ?? 0) - (window.remotion_attempt - 1);
          window.remotion_delayRenderTimeouts[handle] = {
            label: label2 ?? null,
            timeout: setTimeout(() => {
              const message = [
                `A delayRender()`,
                label2 ? `"${label2}"` : null,
                `was called but not cleared after ${timeoutToUse}ms. See https://remotion.dev/docs/timeout for help.`,
                retriesLeft > 0 ? DELAY_RENDER_RETRIES_LEFT + retriesLeft : null,
                retriesLeft > 0 ? DELAY_RENDER_RETRY_TOKEN : null,
                DELAY_RENDER_CALLSTACK_TOKEN,
                called
              ].filter(truthy).join(" ");
              cancelRender(Error(message));
            }, timeoutToUse)
          };
        }
      }
      if (typeof window !== "undefined") {
        window.remotion_renderReady = false;
      }
      return handle;
    };
    continueRender = (handle) => {
      if (typeof handle === "undefined") {
        throw new TypeError("The continueRender() method must be called with a parameter that is the return value of delayRender(). No value was passed.");
      }
      if (typeof handle !== "number") {
        throw new TypeError("The parameter passed into continueRender() must be the return value of delayRender() which is a number. Got: " + JSON.stringify(handle));
      }
      handles = handles.filter((h) => {
        if (h === handle) {
          if (getRemotionEnvironment().isRendering) {
            clearTimeout(window.remotion_delayRenderTimeouts[handle].timeout);
            delete window.remotion_delayRenderTimeouts[handle];
          }
          return false;
        }
        return true;
      });
      if (handles.length === 0 && typeof window !== "undefined") {
        window.remotion_renderReady = true;
      }
    };
    AudioForRenderingRefForwardingFunction = (props, ref) => {
      const audioRef = (0, import_react43.useRef)(null);
      const {
        volume: volumeProp,
        playbackRate,
        allowAmplificationDuringRender,
        onDuration,
        toneFrequency,
        _remotionInternalNeedsDurationCalculation,
        _remotionInternalNativeLoopPassed,
        acceptableTimeShiftInSeconds,
        name,
        onError,
        delayRenderRetries,
        delayRenderTimeoutInMilliseconds,
        loopVolumeCurveBehavior,
        pauseWhenBuffering,
        ...nativeProps
      } = props;
      const absoluteFrame = useTimelinePosition();
      const volumePropFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? "repeat");
      const frame = useCurrentFrame();
      const sequenceContext = (0, import_react43.useContext)(SequenceContext);
      const { registerRenderAsset, unregisterRenderAsset } = (0, import_react43.useContext)(RenderAssetManager);
      const id = (0, import_react43.useMemo)(() => `audio-${random(props.src ?? "")}-${sequenceContext == null ? void 0 : sequenceContext.relativeFrom}-${sequenceContext == null ? void 0 : sequenceContext.cumulatedFrom}-${sequenceContext == null ? void 0 : sequenceContext.durationInFrames}`, [
        props.src,
        sequenceContext == null ? void 0 : sequenceContext.relativeFrom,
        sequenceContext == null ? void 0 : sequenceContext.cumulatedFrom,
        sequenceContext == null ? void 0 : sequenceContext.durationInFrames
      ]);
      const volume = evaluateVolume({
        volume: volumeProp,
        frame: volumePropFrame,
        mediaVolume: 1,
        allowAmplificationDuringRender: allowAmplificationDuringRender ?? false
      });
      (0, import_react43.useImperativeHandle)(ref, () => {
        return audioRef.current;
      }, []);
      (0, import_react43.useEffect)(() => {
        if (!props.src) {
          throw new Error("No src passed");
        }
        if (!window.remotion_audioEnabled) {
          return;
        }
        if (props.muted) {
          return;
        }
        if (volume <= 0) {
          return;
        }
        registerRenderAsset({
          type: "audio",
          src: getAbsoluteSrc(props.src),
          id,
          frame: absoluteFrame,
          volume,
          mediaFrame: frame,
          playbackRate: props.playbackRate ?? 1,
          allowAmplificationDuringRender: allowAmplificationDuringRender ?? false,
          toneFrequency: toneFrequency ?? null,
          audioStartFrame: Math.max(0, -((sequenceContext == null ? void 0 : sequenceContext.relativeFrom) ?? 0))
        });
        return () => unregisterRenderAsset(id);
      }, [
        props.muted,
        props.src,
        registerRenderAsset,
        absoluteFrame,
        id,
        unregisterRenderAsset,
        volume,
        volumePropFrame,
        frame,
        playbackRate,
        props.playbackRate,
        allowAmplificationDuringRender,
        toneFrequency,
        sequenceContext == null ? void 0 : sequenceContext.relativeFrom
      ]);
      const { src } = props;
      const needsToRenderAudioTag = ref || _remotionInternalNeedsDurationCalculation;
      (0, import_react43.useLayoutEffect)(() => {
        var _a, _b;
        if (((_b = (_a = window.process) == null ? void 0 : _a.env) == null ? void 0 : _b.NODE_ENV) === "test") {
          return;
        }
        if (!needsToRenderAudioTag) {
          return;
        }
        const newHandle = delayRender("Loading <Audio> duration with src=" + src, {
          retries: delayRenderRetries ?? void 0,
          timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? void 0
        });
        const { current } = audioRef;
        const didLoad = () => {
          if (current == null ? void 0 : current.duration) {
            onDuration(current.src, current.duration);
          }
          continueRender(newHandle);
        };
        if (current == null ? void 0 : current.duration) {
          onDuration(current.src, current.duration);
          continueRender(newHandle);
        } else {
          current == null ? void 0 : current.addEventListener("loadedmetadata", didLoad, { once: true });
        }
        return () => {
          current == null ? void 0 : current.removeEventListener("loadedmetadata", didLoad);
          continueRender(newHandle);
        };
      }, [
        src,
        onDuration,
        needsToRenderAudioTag,
        delayRenderRetries,
        delayRenderTimeoutInMilliseconds
      ]);
      if (!needsToRenderAudioTag) {
        return null;
      }
      return (0, import_jsx_runtime17.jsx)("audio", {
        ref: audioRef,
        ...nativeProps
      });
    };
    AudioForRendering = (0, import_react43.forwardRef)(AudioForRenderingRefForwardingFunction);
    AudioRefForwardingFunction = (props, ref) => {
      const audioContext = (0, import_react24.useContext)(SharedAudioContext);
      const {
        startFrom,
        endAt,
        name,
        stack,
        pauseWhenBuffering,
        showInTimeline,
        _remotionDebugSeeking,
        ...otherProps
      } = props;
      const { loop, ...propsOtherThanLoop } = props;
      const { fps } = useVideoConfig();
      const environment = getRemotionEnvironment();
      const { durations, setDurations } = (0, import_react24.useContext)(DurationsContext);
      if (typeof props.src !== "string") {
        throw new TypeError(`The \`<Audio>\` tag requires a string for \`src\`, but got ${JSON.stringify(props.src)} instead.`);
      }
      const preloadedSrc = usePreload(props.src);
      const onError = (0, import_react24.useCallback)((e) => {
        console.log(e.currentTarget.error);
        const errMessage = `Could not play audio with src ${preloadedSrc}: ${e.currentTarget.error}. See https://remotion.dev/docs/media-playback-error for help.`;
        if (loop) {
          cancelRender(new Error(errMessage));
        } else {
          console.warn(errMessage);
        }
      }, [loop, preloadedSrc]);
      const onDuration = (0, import_react24.useCallback)((src, durationInSeconds) => {
        setDurations({ type: "got-duration", durationInSeconds, src });
      }, [setDurations]);
      const durationFetched = durations[getAbsoluteSrc(preloadedSrc)] ?? durations[getAbsoluteSrc(props.src)];
      if (loop && durationFetched !== void 0) {
        const duration = durationFetched * fps;
        return (0, import_jsx_runtime18.jsx)(Loop, {
          layout: "none",
          durationInFrames: calculateLoopDuration({
            endAt,
            mediaDuration: duration,
            playbackRate: props.playbackRate ?? 1,
            startFrom
          }),
          children: (0, import_jsx_runtime18.jsx)(Audio, {
            ...propsOtherThanLoop,
            ref,
            _remotionInternalNativeLoopPassed: true
          })
        });
      }
      if (typeof startFrom !== "undefined" || typeof endAt !== "undefined") {
        validateStartFromProps(startFrom, endAt);
        const startFromFrameNo = startFrom ?? 0;
        const endAtFrameNo = endAt ?? Infinity;
        return (0, import_jsx_runtime18.jsx)(Sequence, {
          layout: "none",
          from: 0 - startFromFrameNo,
          showInTimeline: false,
          durationInFrames: endAtFrameNo,
          name,
          children: (0, import_jsx_runtime18.jsx)(Audio, {
            _remotionInternalNeedsDurationCalculation: Boolean(loop),
            pauseWhenBuffering: pauseWhenBuffering ?? false,
            ...otherProps,
            ref
          })
        });
      }
      validateMediaProps(props, "Audio");
      if (environment.isRendering) {
        return (0, import_jsx_runtime18.jsx)(AudioForRendering, {
          onDuration,
          ...props,
          ref,
          onError,
          _remotionInternalNeedsDurationCalculation: Boolean(loop)
        });
      }
      return (0, import_jsx_runtime18.jsx)(AudioForPreview, {
        _remotionInternalNativeLoopPassed: props._remotionInternalNativeLoopPassed ?? false,
        _remotionDebugSeeking: _remotionDebugSeeking ?? false,
        _remotionInternalStack: stack ?? null,
        shouldPreMountAudioTags: audioContext !== null && audioContext.numberOfAudioTags > 0,
        ...props,
        ref,
        onError,
        onDuration,
        pauseWhenBuffering: pauseWhenBuffering ?? false,
        _remotionInternalNeedsDurationCalculation: Boolean(loop),
        showInTimeline: showInTimeline ?? true
      });
    };
    Audio = (0, import_react24.forwardRef)(AudioRefForwardingFunction);
    addSequenceStackTraces(Audio);
    getRegex = () => /^([a-zA-Z0-9-\u4E00-\u9FFF])+$/g;
    isFolderNameValid = (name) => name.match(getRegex());
    validateFolderName = (name) => {
      if (name === void 0 || name === null) {
        throw new TypeError("You must pass a name to a <Folder />.");
      }
      if (typeof name !== "string") {
        throw new TypeError(`The "name" you pass into <Folder /> must be a string. Got: ${typeof name}`);
      }
      if (!isFolderNameValid(name)) {
        throw new Error(`Folder name can only contain a-z, A-Z, 0-9 and -. You passed ${name}`);
      }
    };
    invalidFolderNameErrorMessage = `Folder name must match ${String(getRegex())}`;
    FolderContext = (0, import_react45.createContext)({
      folderName: null,
      parentName: null
    });
    Folder = ({
      name,
      children
    }) => {
      const parent = (0, import_react45.useContext)(FolderContext);
      const { registerFolder, unregisterFolder } = (0, import_react45.useContext)(CompositionManager);
      validateFolderName(name);
      const parentNameArr = [parent.parentName, parent.folderName].filter(truthy);
      const parentName = parentNameArr.length === 0 ? null : parentNameArr.join("/");
      const value = (0, import_react45.useMemo)(() => {
        return {
          folderName: name,
          parentName
        };
      }, [name, parentName]);
      (0, import_react45.useEffect)(() => {
        registerFolder(name, parentName);
        return () => {
          unregisterFolder(name, parentName);
        };
      }, [name, parent.folderName, parentName, registerFolder, unregisterFolder]);
      return (0, import_jsx_runtime19.jsx)(FolderContext.Provider, {
        value,
        children
      });
    };
    rotate = {
      transform: `rotate(90deg)`
    };
    ICON_SIZE = 40;
    label = {
      color: "white",
      fontSize: 14,
      fontFamily: "sans-serif"
    };
    container = {
      justifyContent: "center",
      alignItems: "center"
    };
    Loading = () => {
      return (0, import_jsx_runtime20.jsxs)(AbsoluteFill, {
        style: container,
        id: "remotion-comp-loading",
        children: [
          (0, import_jsx_runtime20.jsx)("style", {
            type: "text/css",
            children: `
				@keyframes anim {
					from {
						opacity: 0
					}
					to {
						opacity: 1
					}
				}
				#remotion-comp-loading {
					animation: anim 2s;
					animation-fill-mode: forwards;
				}
			`
          }),
          (0, import_jsx_runtime20.jsx)("svg", {
            width: ICON_SIZE,
            height: ICON_SIZE,
            viewBox: "-100 -100 400 400",
            style: rotate,
            children: (0, import_jsx_runtime20.jsx)("path", {
              fill: "#555",
              stroke: "#555",
              strokeWidth: "100",
              strokeLinejoin: "round",
              d: "M 2 172 a 196 100 0 0 0 195 5 A 196 240 0 0 0 100 2.259 A 196 240 0 0 0 2 172 z"
            })
          }),
          (0, import_jsx_runtime20.jsxs)("p", {
            style: label,
            children: [
              "Resolving ",
              "<Suspense>",
              "..."
            ]
          })
        ]
      });
    };
    _portalNode = null;
    portalNode = () => {
      if (!_portalNode) {
        if (typeof document === "undefined") {
          throw new Error("Tried to call an API that only works in the browser from outside the browser");
        }
        _portalNode = document.createElement("div");
        _portalNode.style.position = "absolute";
        _portalNode.style.top = "0px";
        _portalNode.style.left = "0px";
        _portalNode.style.right = "0px";
        _portalNode.style.bottom = "0px";
        _portalNode.style.width = "100%";
        _portalNode.style.height = "100%";
        _portalNode.style.display = "flex";
        _portalNode.style.flexDirection = "column";
        const containerNode = document.createElement("div");
        containerNode.style.position = "fixed";
        containerNode.style.top = "-999999px";
        containerNode.appendChild(_portalNode);
        document.body.appendChild(containerNode);
      }
      return _portalNode;
    };
    useLazyComponent = (compProps) => {
      const lazy = (0, import_react46.useMemo)(() => {
        if ("lazyComponent" in compProps && typeof compProps.lazyComponent !== "undefined") {
          return import_react46.default.lazy(compProps.lazyComponent);
        }
        if ("component" in compProps) {
          if (typeof document === "undefined") {
            return compProps.component;
          }
          return import_react46.default.lazy(() => Promise.resolve({ default: compProps.component }));
        }
        throw new Error("You must pass either 'component' or 'lazyComponent'");
      }, [compProps.component, compProps.lazyComponent]);
      return lazy;
    };
    getRegex2 = () => /^([a-zA-Z0-9-\u4E00-\u9FFF])+$/g;
    isCompositionIdValid = (id) => id.match(getRegex2());
    validateCompositionId = (id) => {
      if (!isCompositionIdValid(id)) {
        throw new Error(`Composition id can only contain a-z, A-Z, 0-9, CJK characters and -. You passed ${id}`);
      }
    };
    invalidCompositionErrorMessage = `Composition ID must match ${String(getRegex2())}`;
    validateDefaultAndInputProps = (defaultProps, name, compositionId) => {
      if (!defaultProps) {
        return;
      }
      if (typeof defaultProps !== "object") {
        throw new Error(`"${name}" must be an object, but you passed a value of type ${typeof defaultProps}`);
      }
      if (Array.isArray(defaultProps)) {
        throw new Error(`"${name}" must be an object, an array was passed ${compositionId ? `for composition "${compositionId}"` : ""}`);
      }
    };
    ClipComposition = ({ children }) => {
      const { clipRegion } = (0, import_react44.useContext)(NativeLayersContext);
      const style = (0, import_react44.useMemo)(() => {
        return {
          display: "flex",
          flexDirection: "row",
          opacity: clipRegion === "hide" ? 0 : 1,
          clipPath: clipRegion && clipRegion !== "hide" ? `polygon(${clipRegion.x}px ${clipRegion.y}px, ${clipRegion.x}px ${clipRegion.height + clipRegion.y}px, ${clipRegion.width + clipRegion.x}px ${clipRegion.height + clipRegion.y}px, ${clipRegion.width + clipRegion.x}px ${clipRegion.y}px)` : void 0
        };
      }, [clipRegion]);
      return (0, import_jsx_runtime21.jsx)(AbsoluteFill, {
        style,
        children
      });
    };
    Fallback = () => {
      (0, import_react44.useEffect)(() => {
        const fallback = delayRender("Waiting for Root component to unsuspend");
        return () => continueRender(fallback);
      }, []);
      return null;
    };
    Composition = ({
      width,
      height,
      fps,
      durationInFrames,
      id,
      defaultProps,
      schema,
      ...compProps
    }) => {
      const { registerComposition, unregisterComposition } = (0, import_react44.useContext)(CompositionManager);
      const video = useVideo();
      const lazy = useLazyComponent(compProps);
      const nonce = useNonce();
      const isPlayer = useIsPlayer();
      const environment = getRemotionEnvironment();
      const canUseComposition = (0, import_react44.useContext)(CanUseRemotionHooks);
      if (canUseComposition) {
        if (isPlayer) {
          throw new Error("<Composition> was mounted inside the `component` that was passed to the <Player>. See https://remotion.dev/docs/wrong-composition-mount for help.");
        }
        throw new Error("<Composition> mounted inside another composition. See https://remotion.dev/docs/wrong-composition-mount for help.");
      }
      const { folderName, parentName } = (0, import_react44.useContext)(FolderContext);
      (0, import_react44.useEffect)(() => {
        if (!id) {
          throw new Error("No id for composition passed.");
        }
        validateCompositionId(id);
        validateDefaultAndInputProps(defaultProps, "defaultProps", id);
        registerComposition({
          durationInFrames: durationInFrames ?? void 0,
          fps: fps ?? void 0,
          height: height ?? void 0,
          width: width ?? void 0,
          id,
          folderName,
          component: lazy,
          defaultProps: serializeThenDeserializeInStudio(defaultProps ?? {}),
          nonce,
          parentFolderName: parentName,
          schema: schema ?? null,
          calculateMetadata: compProps.calculateMetadata ?? null
        });
        return () => {
          unregisterComposition(id);
        };
      }, [
        durationInFrames,
        fps,
        height,
        lazy,
        id,
        folderName,
        defaultProps,
        registerComposition,
        unregisterComposition,
        width,
        nonce,
        parentName,
        schema,
        compProps.calculateMetadata
      ]);
      const resolved = useResolvedVideoConfig(id);
      if (environment.isStudio && video && video.component === lazy) {
        const Comp = lazy;
        if (resolved === null || resolved.type !== "success") {
          return null;
        }
        return (0, import_react_dom.createPortal)((0, import_jsx_runtime21.jsx)(ClipComposition, {
          children: (0, import_jsx_runtime21.jsx)(CanUseRemotionHooksProvider, {
            children: (0, import_jsx_runtime21.jsx)(import_react44.Suspense, {
              fallback: (0, import_jsx_runtime21.jsx)(Loading, {}),
              children: (0, import_jsx_runtime21.jsx)(Comp, {
                ...resolved.result.props ?? {}
              })
            })
          })
        }), portalNode());
      }
      if (environment.isRendering && video && video.component === lazy) {
        const Comp = lazy;
        if (resolved === null || resolved.type !== "success") {
          return null;
        }
        return (0, import_react_dom.createPortal)((0, import_jsx_runtime21.jsx)(CanUseRemotionHooksProvider, {
          children: (0, import_jsx_runtime21.jsx)(import_react44.Suspense, {
            fallback: (0, import_jsx_runtime21.jsx)(Fallback, {}),
            children: (0, import_jsx_runtime21.jsx)(Comp, {
              ...resolved.result.props ?? {}
            })
          })
        }), portalNode());
      }
      return null;
    };
    compositionsRef = import_react47.default.createRef();
    CompositionManagerProvider = ({ children, numberOfAudioTags }) => {
      const [compositions, setCompositions] = (0, import_react47.useState)([]);
      const currentcompositionsRef = (0, import_react47.useRef)(compositions);
      const [folders, setFolders] = (0, import_react47.useState)([]);
      const [canvasContent, setCanvasContent] = (0, import_react47.useState)(null);
      const [currentCompositionMetadata, setCurrentCompositionMetadata] = (0, import_react47.useState)(null);
      const updateCompositions = (0, import_react47.useCallback)((updateComps) => {
        setCompositions((comps) => {
          const updated = updateComps(comps);
          currentcompositionsRef.current = updated;
          return updated;
        });
      }, []);
      const registerComposition = (0, import_react47.useCallback)((comp) => {
        updateCompositions((comps) => {
          if (comps.find((c2) => c2.id === comp.id)) {
            throw new Error(`Multiple composition with id ${comp.id} are registered.`);
          }
          const value = [...comps, comp].slice().sort((a2, b2) => a2.nonce - b2.nonce);
          return value;
        });
      }, [updateCompositions]);
      const unregisterComposition = (0, import_react47.useCallback)((id) => {
        setCompositions((comps) => {
          return comps.filter((c2) => c2.id !== id);
        });
      }, []);
      const registerFolder = (0, import_react47.useCallback)((name, parent) => {
        setFolders((prevFolders) => {
          return [
            ...prevFolders,
            {
              name,
              parent
            }
          ];
        });
      }, []);
      const unregisterFolder = (0, import_react47.useCallback)((name, parent) => {
        setFolders((prevFolders) => {
          return prevFolders.filter((p) => !(p.name === name && p.parent === parent));
        });
      }, []);
      (0, import_react47.useImperativeHandle)(compositionsRef, () => {
        return {
          getCompositions: () => currentcompositionsRef.current
        };
      }, []);
      const composition = compositions.find((c2) => (canvasContent == null ? void 0 : canvasContent.type) === "composition" ? c2.id === canvasContent.compositionId : null);
      const updateCompositionDefaultProps = (0, import_react47.useCallback)((id, newDefaultProps) => {
        setCompositions((comps) => {
          const updated = comps.map((c2) => {
            if (c2.id === id) {
              return {
                ...c2,
                defaultProps: newDefaultProps
              };
            }
            return c2;
          });
          return updated;
        });
      }, []);
      const contextValue = (0, import_react47.useMemo)(() => {
        return {
          compositions,
          registerComposition,
          unregisterComposition,
          folders,
          registerFolder,
          unregisterFolder,
          currentCompositionMetadata,
          setCurrentCompositionMetadata,
          canvasContent,
          setCanvasContent,
          updateCompositionDefaultProps
        };
      }, [
        compositions,
        registerComposition,
        unregisterComposition,
        folders,
        registerFolder,
        unregisterFolder,
        currentCompositionMetadata,
        canvasContent,
        updateCompositionDefaultProps
      ]);
      return (0, import_jsx_runtime22.jsx)(CompositionManager.Provider, {
        value: contextValue,
        children: (0, import_jsx_runtime22.jsx)(SequenceManagerProvider, {
          children: (0, import_jsx_runtime22.jsx)(RenderAssetManagerProvider, {
            children: (0, import_jsx_runtime22.jsx)(ResolveCompositionConfig, {
              children: (0, import_jsx_runtime22.jsx)(SharedAudioContextProvider, {
                numberOfAudioTags,
                component: (composition == null ? void 0 : composition.component) ?? null,
                children
              })
            })
          })
        })
      });
    };
    NEWTON_ITERATIONS = 4;
    NEWTON_MIN_SLOPE = 1e-3;
    SUBDIVISION_PRECISION = 1e-7;
    SUBDIVISION_MAX_ITERATIONS = 10;
    kSplineTableSize = 11;
    kSampleStepSize = 1 / (kSplineTableSize - 1);
    float32ArraySupported = typeof Float32Array === "function";
    Easing = class _Easing {
      static step0(n) {
        return n > 0 ? 1 : 0;
      }
      static step1(n) {
        return n >= 1 ? 1 : 0;
      }
      static linear(t) {
        return t;
      }
      static ease(t) {
        return _Easing.bezier(0.42, 0, 1, 1)(t);
      }
      static quad(t) {
        return t * t;
      }
      static cubic(t) {
        return t * t * t;
      }
      static poly(n) {
        return (t) => t ** n;
      }
      static sin(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }
      static circle(t) {
        return 1 - Math.sqrt(1 - t * t);
      }
      static exp(t) {
        return 2 ** (10 * (t - 1));
      }
      static elastic(bounciness = 1) {
        const p = bounciness * Math.PI;
        return (t) => 1 - Math.cos(t * Math.PI / 2) ** 3 * Math.cos(t * p);
      }
      static back(s = 1.70158) {
        return (t) => t * t * ((s + 1) * t - s);
      }
      static bounce(t) {
        if (t < 1 / 2.75) {
          return 7.5625 * t * t;
        }
        if (t < 2 / 2.75) {
          const t2_ = t - 1.5 / 2.75;
          return 7.5625 * t2_ * t2_ + 0.75;
        }
        if (t < 2.5 / 2.75) {
          const t2_ = t - 2.25 / 2.75;
          return 7.5625 * t2_ * t2_ + 0.9375;
        }
        const t2 = t - 2.625 / 2.75;
        return 7.5625 * t2 * t2 + 0.984375;
      }
      static bezier(x1, y1, x2, y2) {
        return bezier(x1, y1, x2, y2);
      }
      static in(easing) {
        return easing;
      }
      static out(easing) {
        return (t) => 1 - easing(1 - t);
      }
      static inOut(easing) {
        return (t) => {
          if (t < 0.5) {
            return easing(t * 2) / 2;
          }
          return 1 - easing((1 - t) * 2) / 2;
        };
      }
    };
    ENABLE_V5_BREAKING_CHANGES = false;
    warnedServer = false;
    warnedPlayer = false;
    warnServerOnce = () => {
      if (warnedServer) {
        return;
      }
      warnedServer = true;
      console.warn("Called getStaticFiles() on the server. The API is only available in the browser. An empty array was returned.");
    };
    warnPlayerOnce = () => {
      if (warnedPlayer) {
        return;
      }
      warnedPlayer = true;
      console.warn("Called getStaticFiles() while using the Remotion Player. The API is only available while using the Remotion Studio. An empty array was returned.");
    };
    getStaticFiles = () => {
      if (ENABLE_V5_BREAKING_CHANGES) {
        throw new Error("getStaticFiles() has moved into the `@remotion/studio` package. Update your imports.");
      }
      if (typeof document === "undefined") {
        warnServerOnce();
        return [];
      }
      if (window.remotion_isPlayer) {
        warnPlayerOnce();
        return [];
      }
      return window.remotion_staticFiles;
    };
    IFrameRefForwarding = ({
      onLoad,
      onError,
      delayRenderRetries,
      delayRenderTimeoutInMilliseconds,
      ...props2
    }, ref) => {
      const [handle] = (0, import_react48.useState)(() => delayRender(`Loading <IFrame> with source ${props2.src}`, {
        retries: delayRenderRetries ?? void 0,
        timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? void 0
      }));
      const didLoad = (0, import_react48.useCallback)((e) => {
        continueRender(handle);
        onLoad == null ? void 0 : onLoad(e);
      }, [handle, onLoad]);
      const didGetError = (0, import_react48.useCallback)((e) => {
        continueRender(handle);
        if (onError) {
          onError(e);
        } else {
          console.error("Error loading iframe:", e, "Handle the event using the onError() prop to make this message disappear.");
        }
      }, [handle, onError]);
      return (0, import_jsx_runtime23.jsx)("iframe", {
        ...props2,
        ref,
        onError: didGetError,
        onLoad: didLoad
      });
    };
    IFrame = (0, import_react48.forwardRef)(IFrameRefForwarding);
    ImgRefForwarding = ({
      onError,
      maxRetries = 2,
      src,
      pauseWhenLoading,
      delayRenderRetries,
      delayRenderTimeoutInMilliseconds,
      onImageFrame,
      ...props2
    }, ref) => {
      const imageRef = (0, import_react49.useRef)(null);
      const errors = (0, import_react49.useRef)({});
      const { delayPlayback } = useBufferState();
      const sequenceContext = (0, import_react49.useContext)(SequenceContext);
      if (!src) {
        throw new Error('No "src" prop was passed to <Img>.');
      }
      (0, import_react49.useImperativeHandle)(ref, () => {
        return imageRef.current;
      }, []);
      const actualSrc = usePreload(src);
      const retryIn = (0, import_react49.useCallback)((timeout) => {
        if (!imageRef.current) {
          return;
        }
        const currentSrc = imageRef.current.src;
        setTimeout(() => {
          var _a;
          if (!imageRef.current) {
            return;
          }
          const newSrc = (_a = imageRef.current) == null ? void 0 : _a.src;
          if (newSrc !== currentSrc) {
            return;
          }
          imageRef.current.removeAttribute("src");
          imageRef.current.setAttribute("src", newSrc);
        }, timeout);
      }, []);
      const didGetError = (0, import_react49.useCallback)((e) => {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!errors.current) {
          return;
        }
        errors.current[(_a = imageRef.current) == null ? void 0 : _a.src] = (errors.current[(_b = imageRef.current) == null ? void 0 : _b.src] ?? 0) + 1;
        if (onError && (errors.current[(_c = imageRef.current) == null ? void 0 : _c.src] ?? 0) > maxRetries) {
          onError(e);
          return;
        }
        if ((errors.current[(_d = imageRef.current) == null ? void 0 : _d.src] ?? 0) <= maxRetries) {
          const backoff = exponentialBackoff(errors.current[(_e = imageRef.current) == null ? void 0 : _e.src] ?? 0);
          console.warn(`Could not load image with source ${(_f = imageRef.current) == null ? void 0 : _f.src}, retrying again in ${backoff}ms`);
          retryIn(backoff);
          return;
        }
        cancelRender("Error loading image with src: " + ((_g = imageRef.current) == null ? void 0 : _g.src));
      }, [maxRetries, onError, retryIn]);
      if (typeof window !== "undefined") {
        const isPremounting = Boolean(sequenceContext == null ? void 0 : sequenceContext.premounting);
        (0, import_react49.useLayoutEffect)(() => {
          var _a, _b;
          if (((_b = (_a = window.process) == null ? void 0 : _a.env) == null ? void 0 : _b.NODE_ENV) === "test") {
            if (imageRef.current) {
              imageRef.current.src = actualSrc;
            }
            return;
          }
          const newHandle = delayRender("Loading <Img> with src=" + actualSrc, {
            retries: delayRenderRetries ?? void 0,
            timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? void 0
          });
          const unblock = pauseWhenLoading && !isPremounting ? delayPlayback().unblock : () => {
            return;
          };
          const { current } = imageRef;
          let unmounted = false;
          const onComplete = () => {
            var _a2, _b2, _c;
            if (unmounted) {
              return;
            }
            if ((errors.current[(_a2 = imageRef.current) == null ? void 0 : _a2.src] ?? 0) > 0) {
              delete errors.current[(_b2 = imageRef.current) == null ? void 0 : _b2.src];
              console.info(`Retry successful - ${(_c = imageRef.current) == null ? void 0 : _c.src} is now loaded`);
            }
            if (current) {
              current.src = actualSrc;
              onImageFrame == null ? void 0 : onImageFrame(current);
            }
            unblock();
            continueRender(newHandle);
          };
          const newImg = new Image();
          newImg.src = actualSrc;
          newImg.decode().then(onComplete).catch((err) => {
            console.warn(err);
            if (newImg.complete) {
              onComplete();
            } else {
              newImg.addEventListener("load", onComplete);
            }
          });
          return () => {
            unmounted = true;
            newImg.removeEventListener("load", onComplete);
            unblock();
            continueRender(newHandle);
          };
        }, [
          actualSrc,
          delayPlayback,
          delayRenderRetries,
          delayRenderTimeoutInMilliseconds,
          pauseWhenLoading,
          isPremounting,
          onImageFrame
        ]);
      }
      return (0, import_jsx_runtime24.jsx)("img", {
        ...props2,
        ref: imageRef,
        onError: didGetError
      });
    };
    Img = (0, import_react49.forwardRef)(ImgRefForwarding);
    exports_default_css = {};
    __export2(exports_default_css, {
      makeDefaultPreviewCSS: () => makeDefaultPreviewCSS,
      injectCSS: () => injectCSS,
      OFFTHREAD_VIDEO_CLASS_NAME: () => OFFTHREAD_VIDEO_CLASS_NAME
    });
    injected = {};
    injectCSS = (css) => {
      if (typeof document === "undefined") {
        return;
      }
      if (injected[css]) {
        return;
      }
      const head = document.head || document.getElementsByTagName("head")[0];
      const style = document.createElement("style");
      style.appendChild(document.createTextNode(css));
      head.prepend(style);
      injected[css] = true;
    };
    OFFTHREAD_VIDEO_CLASS_NAME = "__remotion_offthreadvideo";
    makeDefaultPreviewCSS = (scope, backgroundColor) => {
      if (!scope) {
        return `
    * {
      box-sizing: border-box;
    }
    body {
      margin: 0;
	    background-color: ${backgroundColor};
    }
    .${OFFTHREAD_VIDEO_CLASS_NAME} {
      object-fit: contain;
    }
    `;
      }
      return `
    ${scope} * {
      box-sizing: border-box;
    }
    ${scope} *:-webkit-full-screen {
      width: 100%;
      height: 100%;
    }
    ${scope} .${OFFTHREAD_VIDEO_CLASS_NAME} {
      object-fit: contain;
    }
  `;
    };
    REMOTION_STUDIO_CONTAINER_ELEMENT = "__remotion-studio-container";
    getPreviewDomElement = () => {
      return document.getElementById(REMOTION_STUDIO_CONTAINER_ELEMENT);
    };
    Root = null;
    listeners = [];
    registerRoot = (comp) => {
      if (!comp) {
        throw new Error(`You must pass a React component to registerRoot(), but ${JSON.stringify(comp)} was passed.`);
      }
      if (Root) {
        throw new Error("registerRoot() was called more than once.");
      }
      Root = comp;
      listeners.forEach((l) => {
        l(comp);
      });
    };
    getRoot = () => {
      return Root;
    };
    waitForRoot = (fn) => {
      if (Root) {
        fn(Root);
        return () => {
          return;
        };
      }
      listeners.push(fn);
      return () => {
        listeners = listeners.filter((l) => l !== fn);
      };
    };
    RemotionRoot = ({ children, numberOfAudioTags }) => {
      const [remotionRootId] = (0, import_react50.useState)(() => String(random(null)));
      const [frame, setFrame] = (0, import_react50.useState)(() => getInitialFrameState());
      const [playing, setPlaying] = (0, import_react50.useState)(false);
      const imperativePlaying = (0, import_react50.useRef)(false);
      const [fastRefreshes, setFastRefreshes] = (0, import_react50.useState)(0);
      const [playbackRate, setPlaybackRate] = (0, import_react50.useState)(1);
      const audioAndVideoTags = (0, import_react50.useRef)([]);
      if (typeof window !== "undefined") {
        (0, import_react50.useLayoutEffect)(() => {
          window.remotion_setFrame = (f, composition, attempt) => {
            window.remotion_attempt = attempt;
            const id = delayRender(`Setting the current frame to ${f}`);
            let asyncUpdate = true;
            setFrame((s) => {
              const currentFrame = s[composition] ?? window.remotion_initialFrame;
              if (currentFrame === f) {
                asyncUpdate = false;
                return s;
              }
              return {
                ...s,
                [composition]: f
              };
            });
            if (asyncUpdate) {
              requestAnimationFrame(() => continueRender(id));
            } else {
              continueRender(id);
            }
          };
          window.remotion_isPlayer = false;
        }, []);
      }
      const timelineContextValue = (0, import_react50.useMemo)(() => {
        return {
          frame,
          playing,
          imperativePlaying,
          rootId: remotionRootId,
          playbackRate,
          setPlaybackRate,
          audioAndVideoTags
        };
      }, [frame, playbackRate, playing, remotionRootId]);
      const setTimelineContextValue = (0, import_react50.useMemo)(() => {
        return {
          setFrame,
          setPlaying
        };
      }, []);
      const nonceContext = (0, import_react50.useMemo)(() => {
        let counter = 0;
        return {
          getNonce: () => counter++,
          fastRefreshes
        };
      }, [fastRefreshes]);
      (0, import_react50.useEffect)(() => {
        if (typeof __webpack_module__ !== "undefined") {
          if (__webpack_module__.hot) {
            __webpack_module__.hot.addStatusHandler((status) => {
              if (status === "idle") {
                setFastRefreshes((i) => i + 1);
              }
            });
          }
        }
      }, []);
      return (0, import_jsx_runtime25.jsx)(NonceContext.Provider, {
        value: nonceContext,
        children: (0, import_jsx_runtime25.jsx)(TimelineContext.Provider, {
          value: timelineContextValue,
          children: (0, import_jsx_runtime25.jsx)(SetTimelineContext.Provider, {
            value: setTimelineContextValue,
            children: (0, import_jsx_runtime25.jsx)(EditorPropsProvider, {
              children: (0, import_jsx_runtime25.jsx)(PrefetchProvider, {
                children: (0, import_jsx_runtime25.jsx)(NativeLayersProvider, {
                  children: (0, import_jsx_runtime25.jsx)(CompositionManagerProvider, {
                    numberOfAudioTags,
                    children: (0, import_jsx_runtime25.jsx)(DurationsContextProvider, {
                      children: (0, import_jsx_runtime25.jsx)(BufferingProvider, {
                        children
                      })
                    })
                  })
                })
              })
            })
          })
        })
      });
    };
    getEnvVariables = () => {
      if (getRemotionEnvironment().isRendering) {
        const param = window.remotion_envVariables;
        if (!param) {
          return {};
        }
        return { ...JSON.parse(param), NODE_ENV: "production" };
      }
      if (false) {
      }
      return {
        NODE_ENV: "production"
      };
    };
    setupEnvVariables = () => {
      const env = getEnvVariables();
      if (!window.process) {
        window.process = {};
      }
      if (!window.process.env) {
        window.process.env = {};
      }
      Object.keys(env).forEach((key) => {
        window.process.env[key] = env[key];
      });
    };
    CurrentScaleContext = import_react51.default.createContext(null);
    PreviewSizeContext = (0, import_react51.createContext)({
      setSize: () => {
        return;
      },
      size: { size: "auto", translation: { x: 0, y: 0 } }
    });
    calculateScale = ({
      canvasSize,
      compositionHeight,
      compositionWidth,
      previewSize
    }) => {
      const heightRatio = canvasSize.height / compositionHeight;
      const widthRatio = canvasSize.width / compositionWidth;
      const ratio = Math.min(heightRatio, widthRatio);
      return previewSize === "auto" ? ratio : Number(previewSize);
    };
    useCurrentScale = (options) => {
      const hasContext = import_react51.default.useContext(CurrentScaleContext);
      const zoomContext = import_react51.default.useContext(PreviewSizeContext);
      const config = useUnsafeVideoConfig();
      if (hasContext === null || config === null || zoomContext === null) {
        if (options == null ? void 0 : options.dontThrowIfOutsideOfRemotion) {
          return 1;
        }
        if (getRemotionEnvironment().isRendering) {
          return 1;
        }
        throw new Error([
          "useCurrentScale() was called outside of a Remotion context.",
          "This hook can only be called in a component that is being rendered by Remotion.",
          "If you want to this hook to return 1 outside of Remotion, pass {dontThrowIfOutsideOfRemotion: true} as an option.",
          "If you think you called this hook in a Remotion component, make sure all versions of Remotion are aligned."
        ].join("\n"));
      }
      if (hasContext.type === "scale") {
        return hasContext.scale;
      }
      return calculateScale({
        canvasSize: hasContext.canvasSize,
        compositionHeight: config.height,
        compositionWidth: config.width,
        previewSize: zoomContext.size.size
      });
    };
    WATCH_REMOTION_STATIC_FILES = "remotion_staticFilesChanged";
    watchStaticFile = (fileName, callback) => {
      if (ENABLE_V5_BREAKING_CHANGES) {
        throw new Error("watchStaticFile() has moved into the `@remotion/studio` package. Update your imports.");
      }
      if (!getRemotionEnvironment().isStudio) {
        console.warn("The API is only available while using the Remotion Studio.");
        return { cancel: () => {
          return;
        } };
      }
      const withoutStaticBase = fileName.startsWith(window.remotion_staticBase) ? fileName.replace(window.remotion_staticBase, "") : fileName;
      const withoutLeadingSlash = withoutStaticBase.startsWith("/") ? withoutStaticBase.slice(1) : withoutStaticBase;
      let prevFileData = window.remotion_staticFiles.find((file) => file.name === withoutLeadingSlash);
      const checkFile = (event) => {
        const staticFiles = event.detail.files;
        const newFileData = staticFiles.find((file) => file.name === withoutLeadingSlash);
        if (!newFileData) {
          if (prevFileData !== void 0) {
            callback(null);
          }
          prevFileData = void 0;
          return;
        }
        if (prevFileData === void 0 || prevFileData.lastModified !== newFileData.lastModified) {
          callback(newFileData);
          prevFileData = newFileData;
        }
      };
      window.addEventListener(WATCH_REMOTION_STATIC_FILES, checkFile);
      const cancel = () => {
        return window.removeEventListener(WATCH_REMOTION_STATIC_FILES, checkFile);
      };
      return { cancel };
    };
    RemotionContextProvider = (props2) => {
      const { children, contexts } = props2;
      return (0, import_jsx_runtime26.jsx)(CanUseRemotionHooks.Provider, {
        value: contexts.canUseRemotionHooksContext,
        children: (0, import_jsx_runtime26.jsx)(NonceContext.Provider, {
          value: contexts.nonceContext,
          children: (0, import_jsx_runtime26.jsx)(NativeLayersContext.Provider, {
            value: contexts.nativeLayersContext,
            children: (0, import_jsx_runtime26.jsx)(PreloadContext.Provider, {
              value: contexts.preloadContext,
              children: (0, import_jsx_runtime26.jsx)(CompositionManager.Provider, {
                value: contexts.compositionManagerCtx,
                children: (0, import_jsx_runtime26.jsx)(SequenceManager.Provider, {
                  value: contexts.sequenceManagerContext,
                  children: (0, import_jsx_runtime26.jsx)(RenderAssetManager.Provider, {
                    value: contexts.renderAssetManagerContext,
                    children: (0, import_jsx_runtime26.jsx)(ResolveCompositionContext.Provider, {
                      value: contexts.resolveCompositionContext,
                      children: (0, import_jsx_runtime26.jsx)(TimelineContext.Provider, {
                        value: contexts.timelineContext,
                        children: (0, import_jsx_runtime26.jsx)(SetTimelineContext.Provider, {
                          value: contexts.setTimelineContext,
                          children: (0, import_jsx_runtime26.jsx)(SequenceContext.Provider, {
                            value: contexts.sequenceContext,
                            children: (0, import_jsx_runtime26.jsx)(BufferingContextReact.Provider, {
                              value: contexts.bufferManagerContext,
                              children
                            })
                          })
                        })
                      })
                    })
                  })
                })
              })
            })
          })
        })
      });
    };
    Internals = {
      useUnsafeVideoConfig,
      Timeline: exports_timeline_position_state,
      CompositionManager,
      SequenceManager,
      SequenceVisibilityToggleContext,
      RemotionRoot,
      useVideo,
      getRoot,
      useMediaVolumeState,
      useMediaMutedState,
      useLazyComponent,
      truthy,
      SequenceContext,
      useRemotionContexts,
      RemotionContextProvider,
      CSSUtils: exports_default_css,
      setupEnvVariables,
      MediaVolumeContext,
      SetMediaVolumeContext,
      getRemotionEnvironment,
      SharedAudioContext,
      SharedAudioContextProvider,
      invalidCompositionErrorMessage,
      isCompositionIdValid,
      getPreviewDomElement,
      compositionsRef,
      portalNode,
      waitForRoot,
      CanUseRemotionHooksProvider,
      CanUseRemotionHooks,
      PrefetchProvider,
      DurationsContextProvider,
      IsPlayerContextProvider,
      useIsPlayer,
      EditorPropsProvider,
      EditorPropsContext,
      usePreload,
      NonceContext,
      resolveVideoConfig,
      useResolvedVideoConfig,
      resolveCompositionsRef,
      ResolveCompositionConfig,
      REMOTION_STUDIO_CONTAINER_ELEMENT,
      RenderAssetManager,
      persistCurrentFrame,
      useTimelineSetFrame,
      NativeLayersProvider,
      ClipComposition,
      isIosSafari,
      WATCH_REMOTION_STATIC_FILES,
      addSequenceStackTraces,
      useMediaStartsAt,
      BufferingProvider,
      BufferingContextReact,
      enableSequenceStackTraces,
      CurrentScaleContext,
      PreviewSizeContext,
      calculateScale,
      editorPropsProviderRef,
      PROPS_UPDATED_EXTERNALLY,
      validateRenderAsset
    };
    NUMBER = "[-+]?\\d*\\.?\\d+";
    PERCENTAGE = NUMBER + "%";
    colorNames = {
      transparent: 0,
      aliceblue: 4042850303,
      antiquewhite: 4209760255,
      aqua: 16777215,
      aquamarine: 2147472639,
      azure: 4043309055,
      beige: 4126530815,
      bisque: 4293182719,
      black: 255,
      blanchedalmond: 4293643775,
      blue: 65535,
      blueviolet: 2318131967,
      brown: 2771004159,
      burlywood: 3736635391,
      burntsienna: 3934150143,
      cadetblue: 1604231423,
      chartreuse: 2147418367,
      chocolate: 3530104575,
      coral: 4286533887,
      cornflowerblue: 1687547391,
      cornsilk: 4294499583,
      crimson: 3692313855,
      cyan: 16777215,
      darkblue: 35839,
      darkcyan: 9145343,
      darkgoldenrod: 3095792639,
      darkgray: 2846468607,
      darkgreen: 6553855,
      darkgrey: 2846468607,
      darkkhaki: 3182914559,
      darkmagenta: 2332068863,
      darkolivegreen: 1433087999,
      darkorange: 4287365375,
      darkorchid: 2570243327,
      darkred: 2332033279,
      darksalmon: 3918953215,
      darkseagreen: 2411499519,
      darkslateblue: 1211993087,
      darkslategray: 793726975,
      darkslategrey: 793726975,
      darkturquoise: 13554175,
      darkviolet: 2483082239,
      deeppink: 4279538687,
      deepskyblue: 12582911,
      dimgray: 1768516095,
      dimgrey: 1768516095,
      dodgerblue: 512819199,
      firebrick: 2988581631,
      floralwhite: 4294635775,
      forestgreen: 579543807,
      fuchsia: 4278255615,
      gainsboro: 3705462015,
      ghostwhite: 4177068031,
      gold: 4292280575,
      goldenrod: 3668254975,
      gray: 2155905279,
      green: 8388863,
      greenyellow: 2919182335,
      grey: 2155905279,
      honeydew: 4043305215,
      hotpink: 4285117695,
      indianred: 3445382399,
      indigo: 1258324735,
      ivory: 4294963455,
      khaki: 4041641215,
      lavender: 3873897215,
      lavenderblush: 4293981695,
      lawngreen: 2096890111,
      lemonchiffon: 4294626815,
      lightblue: 2916673279,
      lightcoral: 4034953471,
      lightcyan: 3774873599,
      lightgoldenrodyellow: 4210742015,
      lightgray: 3553874943,
      lightgreen: 2431553791,
      lightgrey: 3553874943,
      lightpink: 4290167295,
      lightsalmon: 4288707327,
      lightseagreen: 548580095,
      lightskyblue: 2278488831,
      lightslategray: 2005441023,
      lightslategrey: 2005441023,
      lightsteelblue: 2965692159,
      lightyellow: 4294959359,
      lime: 16711935,
      limegreen: 852308735,
      linen: 4210091775,
      magenta: 4278255615,
      maroon: 2147483903,
      mediumaquamarine: 1724754687,
      mediumblue: 52735,
      mediumorchid: 3126187007,
      mediumpurple: 2473647103,
      mediumseagreen: 1018393087,
      mediumslateblue: 2070474495,
      mediumspringgreen: 16423679,
      mediumturquoise: 1221709055,
      mediumvioletred: 3340076543,
      midnightblue: 421097727,
      mintcream: 4127193855,
      mistyrose: 4293190143,
      moccasin: 4293178879,
      navajowhite: 4292783615,
      navy: 33023,
      oldlace: 4260751103,
      olive: 2155872511,
      olivedrab: 1804477439,
      orange: 4289003775,
      orangered: 4282712319,
      orchid: 3664828159,
      palegoldenrod: 4008225535,
      palegreen: 2566625535,
      paleturquoise: 2951671551,
      palevioletred: 3681588223,
      papayawhip: 4293907967,
      peachpuff: 4292524543,
      peru: 3448061951,
      pink: 4290825215,
      plum: 3718307327,
      powderblue: 2967529215,
      purple: 2147516671,
      rebeccapurple: 1714657791,
      red: 4278190335,
      rosybrown: 3163525119,
      royalblue: 1097458175,
      saddlebrown: 2336560127,
      salmon: 4202722047,
      sandybrown: 4104413439,
      seagreen: 780883967,
      seashell: 4294307583,
      sienna: 2689740287,
      silver: 3233857791,
      skyblue: 2278484991,
      slateblue: 1784335871,
      slategray: 1887473919,
      slategrey: 1887473919,
      snow: 4294638335,
      springgreen: 16744447,
      steelblue: 1182971135,
      tan: 3535047935,
      teal: 8421631,
      thistle: 3636451583,
      tomato: 4284696575,
      turquoise: 1088475391,
      violet: 4001558271,
      wheat: 4125012991,
      white: 4294967295,
      whitesmoke: 4126537215,
      yellow: 4294902015,
      yellowgreen: 2597139199
    };
    opacity = (c2) => {
      return (c2 >> 24 & 255) / 255;
    };
    red = (c2) => {
      return c2 >> 16 & 255;
    };
    green = (c2) => {
      return c2 >> 8 & 255;
    };
    blue = (c2) => {
      return c2 & 255;
    };
    rgbaColor = (r, g, b2, alpha) => {
      return `rgba(${r}, ${g}, ${b2}, ${alpha})`;
    };
    interpolateColorsRGB = (value, inputRange, colors) => {
      const [r, g, b2, a2] = [red, green, blue, opacity].map((f) => {
        const unrounded = interpolate(value, inputRange, colors.map((c2) => f(c2)), {
          extrapolateLeft: "clamp",
          extrapolateRight: "clamp"
        });
        if (f === opacity) {
          return Number(unrounded.toFixed(3));
        }
        return Math.round(unrounded);
      });
      return rgbaColor(r, g, b2, a2);
    };
    interpolateColors = (input, inputRange, outputRange) => {
      if (typeof input === "undefined") {
        throw new TypeError("input can not be undefined");
      }
      if (typeof inputRange === "undefined") {
        throw new TypeError("inputRange can not be undefined");
      }
      if (typeof outputRange === "undefined") {
        throw new TypeError("outputRange can not be undefined");
      }
      if (inputRange.length !== outputRange.length) {
        throw new TypeError("inputRange (" + inputRange.length + " values provided) and outputRange (" + outputRange.length + " values provided) must have the same length");
      }
      const processedOutputRange = outputRange.map((c2) => processColor(c2));
      return interpolateColorsRGB(input, inputRange, processedOutputRange);
    };
    validateFrame = ({
      allowFloats,
      durationInFrames,
      frame
    }) => {
      if (typeof frame === "undefined") {
        throw new TypeError(`Argument missing for parameter "frame"`);
      }
      if (typeof frame !== "number") {
        throw new TypeError(`Argument passed for "frame" is not a number: ${frame}`);
      }
      if (!Number.isFinite(frame)) {
        throw new RangeError(`Frame ${frame} is not finite`);
      }
      if (frame % 1 !== 0 && !allowFloats) {
        throw new RangeError(`Argument for frame must be an integer, but got ${frame}`);
      }
      if (frame < 0 && frame < -durationInFrames) {
        throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the lowest frame that can be rendered is ${-durationInFrames}`);
      }
      if (frame > durationInFrames - 1) {
        throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the highest frame that can be rendered is ${durationInFrames - 1}`);
      }
    };
    getOffthreadVideoSource = ({
      src,
      transparent,
      currentTime,
      toneMapped
    }) => {
      return `http://localhost:${window.remotion_proxyPort}/proxy?src=${encodeURIComponent(getAbsoluteSrc(src))}&time=${encodeURIComponent(currentTime)}&transparent=${String(transparent)}&toneMapped=${String(toneMapped)}`;
    };
    flattenChildren = (children) => {
      const childrenArray = import_react54.default.Children.toArray(children);
      return childrenArray.reduce((flatChildren, child) => {
        if (child.type === import_react54.default.Fragment) {
          return flatChildren.concat(flattenChildren(child.props.children));
        }
        flatChildren.push(child);
        return flatChildren;
      }, []);
    };
    IsInsideSeriesContext = (0, import_react55.createContext)(false);
    IsInsideSeriesContainer = ({ children }) => {
      return (0, import_jsx_runtime27.jsx)(IsInsideSeriesContext.Provider, {
        value: true,
        children
      });
    };
    IsNotInsideSeriesProvider = ({ children }) => {
      return (0, import_jsx_runtime27.jsx)(IsInsideSeriesContext.Provider, {
        value: false,
        children
      });
    };
    useRequireToBeInsideSeries = () => {
      const isInsideSeries = import_react55.default.useContext(IsInsideSeriesContext);
      if (!isInsideSeries) {
        throw new Error("This component must be inside a <Series /> component.");
      }
    };
    SeriesSequenceRefForwardingFunction = ({ children }, _ref) => {
      useRequireToBeInsideSeries();
      return (0, import_jsx_runtime28.jsx)(IsNotInsideSeriesProvider, {
        children
      });
    };
    SeriesSequence = (0, import_react53.forwardRef)(SeriesSequenceRefForwardingFunction);
    Series = (props2) => {
      const childrenValue = (0, import_react53.useMemo)(() => {
        let startFrame = 0;
        const flattenedChildren = flattenChildren(props2.children);
        return import_react53.Children.map(flattenedChildren, (child, i) => {
          const castedChild = child;
          if (typeof castedChild === "string") {
            if (castedChild.trim() === "") {
              return null;
            }
            throw new TypeError(`The <Series /> component only accepts a list of <Series.Sequence /> components as its children, but you passed a string "${castedChild}"`);
          }
          if (castedChild.type !== SeriesSequence) {
            throw new TypeError(`The <Series /> component only accepts a list of <Series.Sequence /> components as its children, but got ${castedChild} instead`);
          }
          const debugInfo = `index = ${i}, duration = ${castedChild.props.durationInFrames}`;
          if (!(castedChild == null ? void 0 : castedChild.props.children)) {
            throw new TypeError(`A <Series.Sequence /> component (${debugInfo}) was detected to not have any children. Delete it to fix this error.`);
          }
          const durationInFramesProp = castedChild.props.durationInFrames;
          const {
            durationInFrames,
            children: _children,
            from,
            name,
            ...passedProps
          } = castedChild.props;
          if (i !== flattenedChildren.length - 1 || durationInFramesProp !== Infinity) {
            validateDurationInFrames(durationInFramesProp, {
              component: `of a <Series.Sequence /> component`,
              allowFloats: true
            });
          }
          const offset = castedChild.props.offset ?? 0;
          if (Number.isNaN(offset)) {
            throw new TypeError(`The "offset" property of a <Series.Sequence /> must not be NaN, but got NaN (${debugInfo}).`);
          }
          if (!Number.isFinite(offset)) {
            throw new TypeError(`The "offset" property of a <Series.Sequence /> must be finite, but got ${offset} (${debugInfo}).`);
          }
          if (offset % 1 !== 0) {
            throw new TypeError(`The "offset" property of a <Series.Sequence /> must be finite, but got ${offset} (${debugInfo}).`);
          }
          const currentStartFrame = startFrame + offset;
          startFrame += durationInFramesProp + offset;
          return (0, import_jsx_runtime28.jsx)(Sequence, {
            name: name || "<Series.Sequence>",
            from: currentStartFrame,
            durationInFrames: durationInFramesProp,
            ...passedProps,
            ref: castedChild.ref,
            children: child
          });
        });
      }, [props2.children]);
      if (ENABLE_V5_BREAKING_CHANGES) {
        return (0, import_jsx_runtime28.jsx)(IsInsideSeriesContainer, {
          children: (0, import_jsx_runtime28.jsx)(Sequence, {
            ...props2,
            children: childrenValue
          })
        });
      }
      return (0, import_jsx_runtime28.jsx)(IsInsideSeriesContainer, {
        children: childrenValue
      });
    };
    Series.Sequence = SeriesSequence;
    addSequenceStackTraces(SeriesSequence);
    validateSpringDuration = (dur) => {
      if (typeof dur === "undefined") {
        return;
      }
      if (typeof dur !== "number") {
        throw new TypeError(`A "duration" of a spring must be a "number" but is "${typeof dur}"`);
      }
      if (Number.isNaN(dur)) {
        throw new TypeError('A "duration" of a spring is NaN, which it must not be');
      }
      if (!Number.isFinite(dur)) {
        throw new TypeError('A "duration" of a spring must be finite, but is ' + dur);
      }
      if (dur <= 0) {
        throw new TypeError('A "duration" of a spring must be positive, but is ' + dur);
      }
    };
    defaultSpringConfig = {
      damping: 10,
      mass: 1,
      stiffness: 100,
      overshootClamping: false
    };
    advanceCache = {};
    calculationCache = {};
    cache = /* @__PURE__ */ new Map();
    Still = (props2) => {
      const newProps = {
        ...props2,
        durationInFrames: 1,
        fps: 1
      };
      return import_react56.default.createElement(Composition, newProps);
    };
    OffthreadVideoForRendering = ({
      onError,
      volume: volumeProp,
      playbackRate,
      src,
      muted,
      allowAmplificationDuringRender,
      transparent = false,
      toneMapped = true,
      toneFrequency,
      name,
      loopVolumeCurveBehavior,
      delayRenderRetries,
      delayRenderTimeoutInMilliseconds,
      onVideoFrame,
      ...props2
    }) => {
      const absoluteFrame = useTimelinePosition();
      const frame = useCurrentFrame();
      const volumePropsFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? "repeat");
      const videoConfig = useUnsafeVideoConfig();
      const sequenceContext = (0, import_react58.useContext)(SequenceContext);
      const mediaStartsAt = useMediaStartsAt();
      const { registerRenderAsset, unregisterRenderAsset } = (0, import_react58.useContext)(RenderAssetManager);
      if (!src) {
        throw new TypeError("No `src` was passed to <OffthreadVideo>.");
      }
      const id = (0, import_react58.useMemo)(() => `offthreadvideo-${random(src ?? "")}-${sequenceContext == null ? void 0 : sequenceContext.cumulatedFrom}-${sequenceContext == null ? void 0 : sequenceContext.relativeFrom}-${sequenceContext == null ? void 0 : sequenceContext.durationInFrames}`, [
        src,
        sequenceContext == null ? void 0 : sequenceContext.cumulatedFrom,
        sequenceContext == null ? void 0 : sequenceContext.relativeFrom,
        sequenceContext == null ? void 0 : sequenceContext.durationInFrames
      ]);
      if (!videoConfig) {
        throw new Error("No video config found");
      }
      const volume = evaluateVolume({
        volume: volumeProp,
        frame: volumePropsFrame,
        mediaVolume: 1,
        allowAmplificationDuringRender: allowAmplificationDuringRender ?? false
      });
      (0, import_react58.useEffect)(() => {
        if (!src) {
          throw new Error("No src passed");
        }
        if (!window.remotion_audioEnabled) {
          return;
        }
        if (muted) {
          return;
        }
        if (volume <= 0) {
          return;
        }
        registerRenderAsset({
          type: "video",
          src: getAbsoluteSrc(src),
          id,
          frame: absoluteFrame,
          volume,
          mediaFrame: frame,
          playbackRate: playbackRate ?? 1,
          allowAmplificationDuringRender: allowAmplificationDuringRender ?? false,
          toneFrequency: toneFrequency ?? null,
          audioStartFrame: Math.max(0, -((sequenceContext == null ? void 0 : sequenceContext.relativeFrom) ?? 0))
        });
        return () => unregisterRenderAsset(id);
      }, [
        muted,
        src,
        registerRenderAsset,
        id,
        unregisterRenderAsset,
        volume,
        frame,
        absoluteFrame,
        playbackRate,
        allowAmplificationDuringRender,
        toneFrequency,
        sequenceContext == null ? void 0 : sequenceContext.relativeFrom
      ]);
      const currentTime = (0, import_react58.useMemo)(() => {
        return getExpectedMediaFrameUncorrected({
          frame,
          playbackRate: playbackRate || 1,
          startFrom: -mediaStartsAt
        }) / videoConfig.fps;
      }, [frame, mediaStartsAt, playbackRate, videoConfig.fps]);
      const actualSrc = (0, import_react58.useMemo)(() => {
        return getOffthreadVideoSource({
          src,
          currentTime,
          transparent,
          toneMapped
        });
      }, [toneMapped, currentTime, src, transparent]);
      const [imageSrc, setImageSrc] = (0, import_react58.useState)(null);
      (0, import_react58.useLayoutEffect)(() => {
        if (!window.remotion_videoEnabled) {
          return;
        }
        const cleanup = [];
        setImageSrc(null);
        const controller = new AbortController();
        const newHandle = delayRender(`Fetching ${actualSrc} from server`, {
          retries: delayRenderRetries ?? void 0,
          timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? void 0
        });
        const execute = async () => {
          try {
            const res = await fetch(actualSrc, {
              signal: controller.signal
            });
            if (res.status !== 200) {
              if (res.status === 500) {
                const json = await res.json();
                if (json.error) {
                  const cleanedUpErrorMessage = json.error.replace(/^Error: /, "");
                  throw new Error(cleanedUpErrorMessage);
                }
              }
              throw new Error(`Server returned status ${res.status} while fetching ${actualSrc}`);
            }
            const blob = await res.blob();
            const url = URL.createObjectURL(blob);
            cleanup.push(() => URL.revokeObjectURL(url));
            setImageSrc({
              src: url,
              handle: newHandle
            });
          } catch (err) {
            if (err.message.includes("aborted")) {
              continueRender(newHandle);
              return;
            }
            if (controller.signal.aborted) {
              continueRender(newHandle);
              return;
            }
            if (err.message.includes("Failed to fetch")) {
              err = new Error(`Failed to fetch ${actualSrc}. This could be caused by Chrome rejecting the request because the disk space is low. Consider increasing the disk size of your environment.`, { cause: err });
            }
            if (onError) {
              onError(err);
            } else {
              cancelRender(err);
            }
          }
        };
        execute();
        cleanup.push(() => {
          if (controller.signal.aborted) {
            return;
          }
          controller.abort();
        });
        return () => {
          cleanup.forEach((c2) => c2());
        };
      }, [
        actualSrc,
        delayRenderRetries,
        delayRenderTimeoutInMilliseconds,
        onError
      ]);
      const onErr = (0, import_react58.useCallback)(() => {
        if (onError) {
          onError == null ? void 0 : onError(new Error("Failed to load image with src " + imageSrc));
        } else {
          cancelRender("Failed to load image with src " + imageSrc);
        }
      }, [imageSrc, onError]);
      const className = (0, import_react58.useMemo)(() => {
        return [OFFTHREAD_VIDEO_CLASS_NAME, props2.className].filter(truthy).join(" ");
      }, [props2.className]);
      const onImageFrame = (0, import_react58.useCallback)((img) => {
        if (onVideoFrame) {
          onVideoFrame(img);
        }
      }, [onVideoFrame]);
      if (!imageSrc || !window.remotion_videoEnabled) {
        return null;
      }
      continueRender(imageSrc.handle);
      return (0, import_jsx_runtime29.jsx)(Img, {
        src: imageSrc.src,
        className,
        delayRenderRetries,
        delayRenderTimeoutInMilliseconds,
        onImageFrame,
        ...props2,
        onError: onErr
      });
    };
    useEmitVideoFrame = ({
      ref,
      onVideoFrame
    }) => {
      (0, import_react60.useEffect)(() => {
        const { current } = ref;
        if (!current) {
          return;
        }
        if (!onVideoFrame) {
          return;
        }
        let handle = 0;
        const callback = () => {
          if (!ref.current) {
            return;
          }
          onVideoFrame(ref.current);
          handle = ref.current.requestVideoFrameCallback(callback);
        };
        callback();
        return () => {
          current.cancelVideoFrameCallback(handle);
        };
      }, [onVideoFrame, ref]);
    };
    VideoForDevelopmentRefForwardingFunction = (props2, ref) => {
      const videoRef = (0, import_react59.useRef)(null);
      const {
        volume,
        muted,
        playbackRate,
        onlyWarnForMediaSeekingError,
        src,
        onDuration,
        acceptableTimeShift,
        acceptableTimeShiftInSeconds,
        toneFrequency,
        name,
        _remotionInternalNativeLoopPassed,
        _remotionInternalStack,
        _remotionDebugSeeking,
        style,
        pauseWhenBuffering,
        showInTimeline,
        loopVolumeCurveBehavior,
        onError,
        onAutoPlayError,
        onVideoFrame,
        crossOrigin,
        ...nativeProps
      } = props2;
      const volumePropFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? "repeat");
      const { fps, durationInFrames } = useVideoConfig();
      const parentSequence = (0, import_react59.useContext)(SequenceContext);
      const { hidden } = (0, import_react59.useContext)(SequenceVisibilityToggleContext);
      const [timelineId] = (0, import_react59.useState)(() => String(Math.random()));
      const isSequenceHidden = hidden[timelineId] ?? false;
      if (typeof acceptableTimeShift !== "undefined") {
        throw new Error("acceptableTimeShift has been removed. Use acceptableTimeShiftInSeconds instead.");
      }
      const actualVolume = useMediaTagVolume(videoRef);
      const [mediaVolume] = useMediaVolumeState();
      const [mediaMuted] = useMediaMutedState();
      useMediaInTimeline({
        mediaRef: videoRef,
        volume,
        mediaVolume,
        mediaType: "video",
        src,
        playbackRate: props2.playbackRate ?? 1,
        displayName: name ?? null,
        id: timelineId,
        stack: _remotionInternalStack,
        showInTimeline,
        premountDisplay: null,
        onAutoPlayError: onAutoPlayError ?? null
      });
      useSyncVolumeWithMediaTag({
        volumePropFrame,
        actualVolume,
        volume,
        mediaVolume,
        mediaRef: videoRef
      });
      useMediaPlayback({
        mediaRef: videoRef,
        src,
        mediaType: "video",
        playbackRate: props2.playbackRate ?? 1,
        onlyWarnForMediaSeekingError,
        acceptableTimeshift: acceptableTimeShiftInSeconds ?? DEFAULT_ACCEPTABLE_TIMESHIFT,
        isPremounting: Boolean(parentSequence == null ? void 0 : parentSequence.premounting),
        pauseWhenBuffering,
        debugSeeking: _remotionDebugSeeking,
        onAutoPlayError: onAutoPlayError ?? null
      });
      const actualFrom = parentSequence ? parentSequence.relativeFrom : 0;
      const duration = parentSequence ? Math.min(parentSequence.durationInFrames, durationInFrames) : durationInFrames;
      const actualSrc = useAppendVideoFragment({
        actualSrc: usePreload(src),
        actualFrom,
        duration,
        fps
      });
      (0, import_react59.useImperativeHandle)(ref, () => {
        return videoRef.current;
      }, []);
      (0, import_react59.useEffect)(() => {
        const { current } = videoRef;
        if (!current) {
          return;
        }
        const errorHandler = () => {
          var _a;
          if (current.error) {
            console.error("Error occurred in video", current == null ? void 0 : current.error);
            if (onError) {
              const err = new Error(`Code ${current.error.code}: ${current.error.message}`);
              onError(err);
              return;
            }
            throw new Error(`The browser threw an error while playing the video ${src}: Code ${current.error.code} - ${(_a = current == null ? void 0 : current.error) == null ? void 0 : _a.message}. See https://remotion.dev/docs/media-playback-error for help. Pass an onError() prop to handle the error.`);
          } else {
            if (onError) {
              const err = new Error(`The browser threw an error while playing the video ${src}`);
              onError(err);
              return;
            }
            throw new Error("The browser threw an error while playing the video");
          }
        };
        current.addEventListener("error", errorHandler, { once: true });
        return () => {
          current.removeEventListener("error", errorHandler);
        };
      }, [onError, src]);
      const currentOnDurationCallback = (0, import_react59.useRef)();
      currentOnDurationCallback.current = onDuration;
      useEmitVideoFrame({ ref: videoRef, onVideoFrame });
      (0, import_react59.useEffect)(() => {
        var _a;
        const { current } = videoRef;
        if (!current) {
          return;
        }
        if (current.duration) {
          (_a = currentOnDurationCallback.current) == null ? void 0 : _a.call(currentOnDurationCallback, src, current.duration);
          return;
        }
        const onLoadedMetadata = () => {
          var _a2;
          (_a2 = currentOnDurationCallback.current) == null ? void 0 : _a2.call(currentOnDurationCallback, src, current.duration);
        };
        current.addEventListener("loadedmetadata", onLoadedMetadata);
        return () => {
          current.removeEventListener("loadedmetadata", onLoadedMetadata);
        };
      }, [src]);
      (0, import_react59.useEffect)(() => {
        const { current } = videoRef;
        if (!current) {
          return;
        }
        if (isIosSafari()) {
          current.preload = "metadata";
        } else {
          current.preload = "auto";
        }
      }, []);
      const actualStyle = (0, import_react59.useMemo)(() => {
        return {
          ...style,
          opacity: isSequenceHidden ? 0 : (style == null ? void 0 : style.opacity) ?? 1
        };
      }, [isSequenceHidden, style]);
      const crossOriginValue = crossOrigin ?? (onVideoFrame ? "anonymous" : void 0);
      return (0, import_jsx_runtime30.jsx)("video", {
        ref: videoRef,
        muted: muted || mediaMuted,
        playsInline: true,
        src: actualSrc,
        loop: _remotionInternalNativeLoopPassed,
        style: actualStyle,
        disableRemotePlayback: true,
        crossOrigin: crossOriginValue,
        ...nativeProps
      });
    };
    VideoForPreview = (0, import_react59.forwardRef)(VideoForDevelopmentRefForwardingFunction);
    OffthreadVideo = (props2) => {
      const {
        startFrom,
        endAt,
        name,
        pauseWhenBuffering,
        stack,
        showInTimeline,
        ...otherProps
      } = props2;
      const environment = getRemotionEnvironment();
      const onDuration = (0, import_react57.useCallback)(() => {
        return;
      }, []);
      if (typeof props2.src !== "string") {
        throw new TypeError(`The \`<OffthreadVideo>\` tag requires a string for \`src\`, but got ${JSON.stringify(props2.src)} instead.`);
      }
      if (props2.imageFormat) {
        throw new TypeError(`The \`<OffthreadVideo>\` tag does no longer accept \`imageFormat\`. Use the \`transparent\` prop if you want to render a transparent video.`);
      }
      if (typeof startFrom !== "undefined" || typeof endAt !== "undefined") {
        validateStartFromProps(startFrom, endAt);
        const startFromFrameNo = startFrom ?? 0;
        const endAtFrameNo = endAt ?? Infinity;
        return (0, import_jsx_runtime31.jsx)(Sequence, {
          layout: "none",
          from: 0 - startFromFrameNo,
          showInTimeline: false,
          durationInFrames: endAtFrameNo,
          name,
          children: (0, import_jsx_runtime31.jsx)(OffthreadVideo, {
            pauseWhenBuffering: pauseWhenBuffering ?? false,
            ...otherProps
          })
        });
      }
      validateMediaProps(props2, "Video");
      if (environment.isRendering) {
        return (0, import_jsx_runtime31.jsx)(OffthreadVideoForRendering, {
          ...otherProps
        });
      }
      const {
        transparent,
        toneMapped,
        _remotionDebugSeeking,
        onAutoPlayError,
        onVideoFrame,
        crossOrigin,
        ...withoutTransparent
      } = otherProps;
      return (0, import_jsx_runtime31.jsx)(VideoForPreview, {
        _remotionInternalStack: stack ?? null,
        _remotionInternalNativeLoopPassed: false,
        _remotionDebugSeeking: _remotionDebugSeeking ?? false,
        onDuration,
        onlyWarnForMediaSeekingError: true,
        pauseWhenBuffering: pauseWhenBuffering ?? false,
        showInTimeline: showInTimeline ?? true,
        onAutoPlayError: onAutoPlayError ?? void 0,
        onVideoFrame: onVideoFrame ?? null,
        crossOrigin,
        ...withoutTransparent
      });
    };
    roundTo6Commas = (num) => {
      return Math.round(num * 1e5) / 1e5;
    };
    seekToTime = (element, desiredTime) => {
      element.currentTime = desiredTime;
      let cancel;
      let cancelSeeked = null;
      const prom = new Promise((resolve) => {
        cancel = element.requestVideoFrameCallback((now, metadata) => {
          const displayIn = metadata.expectedDisplayTime - now;
          if (displayIn <= 0) {
            resolve(metadata.mediaTime);
            return;
          }
          setTimeout(() => {
            resolve(metadata.mediaTime);
          }, displayIn + 150);
        });
      });
      const waitForSeekedEvent = new Promise((resolve) => {
        const onDone = () => {
          resolve();
        };
        element.addEventListener("seeked", onDone, {
          once: true
        });
        cancelSeeked = () => {
          element.removeEventListener("seeked", onDone);
        };
      });
      return {
        wait: Promise.all([prom, waitForSeekedEvent]).then(([time]) => time),
        cancel: () => {
          cancelSeeked == null ? void 0 : cancelSeeked();
          element.cancelVideoFrameCallback(cancel);
        }
      };
    };
    seekToTimeMultipleUntilRight = (element, desiredTime, fps) => {
      const threshold = 1 / fps / 2;
      let currentCancel = () => {
        return;
      };
      if (Number.isFinite(element.duration) && element.currentTime >= element.duration && desiredTime >= element.duration) {
        return {
          prom: Promise.resolve(),
          cancel: () => {
          }
        };
      }
      const prom = new Promise((resolve, reject) => {
        const firstSeek = seekToTime(element, desiredTime + threshold);
        firstSeek.wait.then((seekedTo) => {
          const difference = Math.abs(desiredTime - seekedTo);
          if (difference <= threshold) {
            return resolve();
          }
          const sign = desiredTime > seekedTo ? 1 : -1;
          const newSeek = seekToTime(element, seekedTo + threshold * sign);
          currentCancel = newSeek.cancel;
          newSeek.wait.then((newTime) => {
            const newDifference = Math.abs(desiredTime - newTime);
            if (roundTo6Commas(newDifference) <= roundTo6Commas(threshold)) {
              return resolve();
            }
            const thirdSeek = seekToTime(element, desiredTime + threshold);
            currentCancel = thirdSeek.cancel;
            return thirdSeek.wait.then(() => {
              resolve();
            }).catch((err) => {
              reject(err);
            });
          }).catch((err) => {
            reject(err);
          });
        });
        currentCancel = firstSeek.cancel;
      });
      return {
        prom,
        cancel: () => {
          currentCancel();
        }
      };
    };
    VideoForRenderingForwardFunction = ({
      onError,
      volume: volumeProp,
      allowAmplificationDuringRender,
      playbackRate,
      onDuration,
      toneFrequency,
      name,
      acceptableTimeShiftInSeconds,
      delayRenderRetries,
      delayRenderTimeoutInMilliseconds,
      loopVolumeCurveBehavior,
      ...props2
    }, ref) => {
      const absoluteFrame = useTimelinePosition();
      const frame = useCurrentFrame();
      const volumePropsFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? "repeat");
      const videoConfig = useUnsafeVideoConfig();
      const videoRef = (0, import_react62.useRef)(null);
      const sequenceContext = (0, import_react62.useContext)(SequenceContext);
      const mediaStartsAt = useMediaStartsAt();
      const environment = getRemotionEnvironment();
      const { registerRenderAsset, unregisterRenderAsset } = (0, import_react62.useContext)(RenderAssetManager);
      const id = (0, import_react62.useMemo)(() => `video-${random(props2.src ?? "")}-${sequenceContext == null ? void 0 : sequenceContext.cumulatedFrom}-${sequenceContext == null ? void 0 : sequenceContext.relativeFrom}-${sequenceContext == null ? void 0 : sequenceContext.durationInFrames}`, [
        props2.src,
        sequenceContext == null ? void 0 : sequenceContext.cumulatedFrom,
        sequenceContext == null ? void 0 : sequenceContext.relativeFrom,
        sequenceContext == null ? void 0 : sequenceContext.durationInFrames
      ]);
      if (!videoConfig) {
        throw new Error("No video config found");
      }
      const volume = evaluateVolume({
        volume: volumeProp,
        frame: volumePropsFrame,
        mediaVolume: 1,
        allowAmplificationDuringRender: allowAmplificationDuringRender ?? false
      });
      (0, import_react62.useEffect)(() => {
        if (!props2.src) {
          throw new Error("No src passed");
        }
        if (props2.muted) {
          return;
        }
        if (volume <= 0) {
          return;
        }
        if (!window.remotion_audioEnabled) {
          return;
        }
        registerRenderAsset({
          type: "video",
          src: getAbsoluteSrc(props2.src),
          id,
          frame: absoluteFrame,
          volume,
          mediaFrame: frame,
          playbackRate: playbackRate ?? 1,
          allowAmplificationDuringRender: allowAmplificationDuringRender ?? false,
          toneFrequency: toneFrequency ?? null,
          audioStartFrame: Math.max(0, -((sequenceContext == null ? void 0 : sequenceContext.relativeFrom) ?? 0))
        });
        return () => unregisterRenderAsset(id);
      }, [
        props2.muted,
        props2.src,
        registerRenderAsset,
        id,
        unregisterRenderAsset,
        volume,
        frame,
        absoluteFrame,
        playbackRate,
        allowAmplificationDuringRender,
        toneFrequency,
        sequenceContext == null ? void 0 : sequenceContext.relativeFrom
      ]);
      (0, import_react62.useImperativeHandle)(ref, () => {
        return videoRef.current;
      }, []);
      (0, import_react62.useEffect)(() => {
        var _a, _b;
        if (!window.remotion_videoEnabled) {
          return;
        }
        const { current } = videoRef;
        if (!current) {
          return;
        }
        const currentTime = getMediaTime({
          frame,
          playbackRate: playbackRate || 1,
          startFrom: -mediaStartsAt,
          fps: videoConfig.fps
        });
        const handle = delayRender(`Rendering <Video /> with src="${props2.src}"`, {
          retries: delayRenderRetries ?? void 0,
          timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? void 0
        });
        if (((_b = (_a = window.process) == null ? void 0 : _a.env) == null ? void 0 : _b.NODE_ENV) === "test") {
          continueRender(handle);
          return;
        }
        if (isApproximatelyTheSame(current.currentTime, currentTime)) {
          if (current.readyState >= 2) {
            continueRender(handle);
            return;
          }
          const loadedDataHandler = () => {
            continueRender(handle);
          };
          current.addEventListener("loadeddata", loadedDataHandler, { once: true });
          return () => {
            current.removeEventListener("loadeddata", loadedDataHandler);
          };
        }
        const endedHandler = () => {
          continueRender(handle);
        };
        const seek2 = seekToTimeMultipleUntilRight(current, currentTime, videoConfig.fps);
        seek2.prom.then(() => {
          continueRender(handle);
        });
        current.addEventListener("ended", endedHandler, { once: true });
        const errorHandler = () => {
          var _a2;
          if (current == null ? void 0 : current.error) {
            console.error("Error occurred in video", current == null ? void 0 : current.error);
            if (onError) {
              return;
            }
            throw new Error(`The browser threw an error while playing the video ${props2.src}: Code ${current.error.code} - ${(_a2 = current == null ? void 0 : current.error) == null ? void 0 : _a2.message}. See https://remotion.dev/docs/media-playback-error for help. Pass an onError() prop to handle the error.`);
          } else {
            throw new Error("The browser threw an error");
          }
        };
        current.addEventListener("error", errorHandler, { once: true });
        return () => {
          seek2.cancel();
          current.removeEventListener("ended", endedHandler);
          current.removeEventListener("error", errorHandler);
          continueRender(handle);
        };
      }, [
        volumePropsFrame,
        props2.src,
        playbackRate,
        videoConfig.fps,
        frame,
        mediaStartsAt,
        onError,
        delayRenderRetries,
        delayRenderTimeoutInMilliseconds
      ]);
      const { src } = props2;
      if (environment.isRendering) {
        (0, import_react62.useLayoutEffect)(() => {
          var _a, _b;
          if (((_b = (_a = window.process) == null ? void 0 : _a.env) == null ? void 0 : _b.NODE_ENV) === "test") {
            return;
          }
          const newHandle = delayRender("Loading <Video> duration with src=" + src, {
            retries: delayRenderRetries ?? void 0,
            timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? void 0
          });
          const { current } = videoRef;
          const didLoad = () => {
            if (current == null ? void 0 : current.duration) {
              onDuration(src, current.duration);
            }
            continueRender(newHandle);
          };
          if (current == null ? void 0 : current.duration) {
            onDuration(src, current.duration);
            continueRender(newHandle);
          } else {
            current == null ? void 0 : current.addEventListener("loadedmetadata", didLoad, { once: true });
          }
          return () => {
            current == null ? void 0 : current.removeEventListener("loadedmetadata", didLoad);
            continueRender(newHandle);
          };
        }, [src, onDuration, delayRenderRetries, delayRenderTimeoutInMilliseconds]);
      }
      return (0, import_jsx_runtime32.jsx)("video", {
        ref: videoRef,
        ...props2
      });
    };
    VideoForRendering = (0, import_react62.forwardRef)(VideoForRenderingForwardFunction);
    VideoForwardingFunction = (props2, ref) => {
      const {
        startFrom,
        endAt,
        name,
        pauseWhenBuffering,
        stack,
        _remotionInternalNativeLoopPassed,
        showInTimeline,
        onAutoPlayError,
        ...otherProps
      } = props2;
      const { loop, _remotionDebugSeeking, ...propsOtherThanLoop } = props2;
      const { fps } = useVideoConfig();
      const environment = getRemotionEnvironment();
      const { durations, setDurations } = (0, import_react61.useContext)(DurationsContext);
      if (typeof ref === "string") {
        throw new Error("string refs are not supported");
      }
      if (typeof props2.src !== "string") {
        throw new TypeError(`The \`<Video>\` tag requires a string for \`src\`, but got ${JSON.stringify(props2.src)} instead.`);
      }
      const preloadedSrc = usePreload(props2.src);
      const onDuration = (0, import_react61.useCallback)((src, durationInSeconds) => {
        setDurations({ type: "got-duration", durationInSeconds, src });
      }, [setDurations]);
      const onVideoFrame = (0, import_react61.useCallback)(() => {
      }, []);
      const durationFetched = durations[getAbsoluteSrc(preloadedSrc)] ?? durations[getAbsoluteSrc(props2.src)];
      if (loop && durationFetched !== void 0) {
        const mediaDuration = durationFetched * fps;
        return (0, import_jsx_runtime33.jsx)(Loop, {
          durationInFrames: calculateLoopDuration({
            endAt,
            mediaDuration,
            playbackRate: props2.playbackRate ?? 1,
            startFrom
          }),
          layout: "none",
          name,
          children: (0, import_jsx_runtime33.jsx)(Video, {
            ...propsOtherThanLoop,
            ref,
            _remotionInternalNativeLoopPassed: true
          })
        });
      }
      if (typeof startFrom !== "undefined" || typeof endAt !== "undefined") {
        validateStartFromProps(startFrom, endAt);
        const startFromFrameNo = startFrom ?? 0;
        const endAtFrameNo = endAt ?? Infinity;
        return (0, import_jsx_runtime33.jsx)(Sequence, {
          layout: "none",
          from: 0 - startFromFrameNo,
          showInTimeline: false,
          durationInFrames: endAtFrameNo,
          name,
          children: (0, import_jsx_runtime33.jsx)(Video, {
            pauseWhenBuffering: pauseWhenBuffering ?? false,
            ...otherProps,
            ref
          })
        });
      }
      validateMediaProps(props2, "Video");
      if (environment.isRendering) {
        return (0, import_jsx_runtime33.jsx)(VideoForRendering, {
          onDuration,
          onVideoFrame: onVideoFrame ?? null,
          ...otherProps,
          ref
        });
      }
      return (0, import_jsx_runtime33.jsx)(VideoForPreview, {
        onlyWarnForMediaSeekingError: false,
        ...otherProps,
        ref,
        onVideoFrame: null,
        pauseWhenBuffering: pauseWhenBuffering ?? false,
        onDuration,
        _remotionInternalStack: stack ?? null,
        _remotionInternalNativeLoopPassed: _remotionInternalNativeLoopPassed ?? false,
        _remotionDebugSeeking: _remotionDebugSeeking ?? false,
        showInTimeline: showInTimeline ?? true,
        onAutoPlayError: onAutoPlayError ?? void 0
      });
    };
    Video = (0, import_react61.forwardRef)(VideoForwardingFunction);
    addSequenceStackTraces(Video);
    checkMultipleRemotionVersions();
    Experimental = {
      Clipper,
      Null,
      useIsPlayer
    };
    proxyObj = {};
    Config = new Proxy(proxyObj, {
      get(_, prop) {
        if (prop === "Bundling" || prop === "Rendering" || prop === "Log" || prop === "Puppeteer" || prop === "Output") {
          return Config;
        }
        return () => {
          console.warn("⚠️  The CLI configuration has been extracted from Remotion Core.");
          console.warn("Update the import from the config file:");
          console.warn();
          console.warn("- Delete:");
          console.warn('import {Config} from "remotion";');
          console.warn("+ Replace:");
          console.warn('import {Config} from "@remotion/cli/config";');
          console.warn();
          console.warn("For more information, see https://www.remotion.dev/docs/4-0-migration.");
          process.exit(1);
        };
      }
    });
    addSequenceStackTraces(Sequence);
  }
});

export {
  getRemotionEnvironment,
  VERSION,
  AbsoluteFill,
  staticFile,
  getInputProps,
  useVideoConfig,
  useCurrentFrame,
  Freeze,
  Sequence,
  Artifact,
  cancelRender,
  Loop,
  prefetch,
  random,
  useBufferState,
  interpolate,
  delayRender,
  continueRender,
  Audio,
  FolderContext,
  Folder,
  Composition,
  Easing,
  getStaticFiles,
  IFrame,
  Img,
  registerRoot,
  useCurrentScale,
  watchStaticFile,
  Internals,
  interpolateColors,
  Series,
  measureSpring,
  spring,
  Still,
  OffthreadVideo,
  Video,
  Experimental,
  Config,
  esm_exports,
  init_esm
};
//# sourceMappingURL=chunk-SSQXP3KT.js.map
