import {
  init_no_react,
  no_react_exports
} from "./chunk-M4ZRVHIN.js";
import {
  esm_exports,
  init_esm
} from "./chunk-SSQXP3KT.js";
import "./chunk-SHKDMIPV.js";
import "./chunk-U3R7WRSZ.js";
import {
  require_react
} from "./chunk-XO35FAC6.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-EWTE5DHJ.js";

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/audio-buffer/audio-buffer-to-wav.js
var require_audio_buffer_to_wav = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/audio-buffer/audio-buffer-to-wav.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.audioBufferToWav = audioBufferToWav;
    function interleave(inputL, inputR) {
      const length = inputL.length + inputR.length;
      const result = new Float32Array(length);
      let index = 0;
      let inputIndex = 0;
      while (index < length) {
        result[index++] = inputL[inputIndex];
        result[index++] = inputR[inputIndex];
        inputIndex++;
      }
      return result;
    }
    function writeFloat32(output, offset, input) {
      for (let i = 0; i < input.length; i++, offset += 4) {
        output.setFloat32(offset, input[i], true);
      }
    }
    function floatTo16BitPCM(output, offset, input) {
      for (let i = 0; i < input.length; i++, offset += 2) {
        const s = Math.max(-1, Math.min(1, input[i]));
        output.setInt16(offset, s < 0 ? s * 32768 : s * 32767, true);
      }
    }
    function writeString(view, offset, string) {
      for (let i = 0; i < string.length; i++) {
        view.setUint8(offset + i, string.charCodeAt(i));
      }
    }
    function encodeWAV({ samples, format, sampleRate, numChannels, bitDepth }) {
      const bytesPerSample = bitDepth / 8;
      const blockAlign = numChannels * bytesPerSample;
      const buffer = new ArrayBuffer(44 + samples.length * bytesPerSample);
      const view = new DataView(buffer);
      writeString(view, 0, "RIFF");
      view.setUint32(4, 36 + samples.length * bytesPerSample, true);
      writeString(view, 8, "WAVE");
      writeString(view, 12, "fmt ");
      view.setUint32(16, 16, true);
      view.setUint16(20, format, true);
      view.setUint16(22, numChannels, true);
      view.setUint32(24, sampleRate, true);
      view.setUint32(28, sampleRate * blockAlign, true);
      view.setUint16(32, blockAlign, true);
      view.setUint16(34, bitDepth, true);
      writeString(view, 36, "data");
      view.setUint32(40, samples.length * bytesPerSample, true);
      if (format === 1) {
        floatTo16BitPCM(view, 44, samples);
      } else {
        writeFloat32(view, 44, samples);
      }
      return buffer;
    }
    function audioBufferToWav(buffer, opt) {
      const numChannels = buffer.numberOfChannels;
      const { sampleRate } = buffer;
      const format = opt.float32 ? 3 : 1;
      const bitDepth = format === 3 ? 32 : 16;
      let result;
      if (numChannels === 2) {
        result = interleave(buffer.getChannelData(0), buffer.getChannelData(1));
      } else {
        result = buffer.getChannelData(0);
      }
      return encodeWAV({
        samples: result,
        format,
        sampleRate,
        numChannels,
        bitDepth
      });
    }
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/audio-buffer/audio-url-helpers.js
var require_audio_url_helpers = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/audio-buffer/audio-url-helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.audioBufferToDataUrl = void 0;
    var audio_buffer_to_wav_1 = require_audio_buffer_to_wav();
    var audioBufferToDataUrl = (buffer) => {
      const wavAsArrayBuffer = (0, audio_buffer_to_wav_1.audioBufferToWav)(buffer, {
        float32: true
      });
      let binary = "";
      const bytes = new Uint8Array(wavAsArrayBuffer);
      const len = bytes.byteLength;
      for (let i = 0; i < len; i++) {
        binary += String.fromCharCode(bytes[i]);
      }
      return "data:audio/wav;base64," + window.btoa(binary);
    };
    exports.audioBufferToDataUrl = audioBufferToDataUrl;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/is-remote-asset.js
var require_is_remote_asset = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/is-remote-asset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRemoteAsset = void 0;
    var isRemoteAsset = (asset) => !asset.startsWith(window.origin) && !asset.startsWith("data");
    exports.isRemoteAsset = isRemoteAsset;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/p-limit.js
var require_p_limit = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/p-limit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pLimit = void 0;
    var pLimit = (concurrency) => {
      const queue = [];
      let activeCount = 0;
      const next = () => {
        var _a;
        activeCount--;
        if (queue.length > 0) {
          (_a = queue.shift()) === null || _a === void 0 ? void 0 : _a();
        }
      };
      const run = async (fn, resolve, ...args) => {
        activeCount++;
        const result = (async () => fn(...args))();
        resolve(result);
        try {
          await result;
        } catch (_a) {
        }
        next();
      };
      const enqueue = (fn, resolve, ...args) => {
        queue.push(() => run(fn, resolve, ...args));
        (async () => {
          var _a;
          await Promise.resolve();
          if (activeCount < concurrency && queue.length > 0) {
            (_a = queue.shift()) === null || _a === void 0 ? void 0 : _a();
          }
        })();
      };
      const generator = (fn, ...args) => new Promise((resolve) => {
        enqueue(fn, resolve, ...args);
      });
      Object.defineProperties(generator, {
        activeCount: {
          get: () => activeCount
        },
        pendingCount: {
          get: () => queue.length
        },
        clearQueue: {
          value: () => {
            queue.length = 0;
          }
        }
      });
      return generator;
    };
    exports.pLimit = pLimit;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/get-audio-data.js
var require_get_audio_data = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/get-audio-data.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAudioData = void 0;
    var is_remote_asset_1 = require_is_remote_asset();
    var p_limit_1 = require_p_limit();
    var metadataCache = {};
    var limit = (0, p_limit_1.pLimit)(3);
    var fetchWithCorsCatch = async (src) => {
      try {
        const response = await fetch(src, {
          mode: "cors",
          referrerPolicy: "no-referrer-when-downgrade"
        });
        return response;
      } catch (err) {
        const error = err;
        if (
          // Chrome
          error.message.includes("Failed to fetch") || // Safari
          error.message.includes("Load failed") || // Firefox
          error.message.includes("NetworkError when attempting to fetch resource")
        ) {
          throw new TypeError(`Failed to read from ${src}: ${error.message}. Does the resource support CORS?`);
        }
        throw err;
      }
    };
    var fn = async (src, options) => {
      var _a;
      if (metadataCache[src]) {
        return metadataCache[src];
      }
      if (typeof document === "undefined") {
        throw new Error("getAudioData() is only available in the browser.");
      }
      const audioContext = new AudioContext({
        sampleRate: (_a = options === null || options === void 0 ? void 0 : options.sampleRate) !== null && _a !== void 0 ? _a : 48e3
      });
      const response = await fetchWithCorsCatch(src);
      const arrayBuffer = await response.arrayBuffer();
      const wave = await audioContext.decodeAudioData(arrayBuffer);
      const channelWaveforms = new Array(wave.numberOfChannels).fill(true).map((_, channel) => {
        return wave.getChannelData(channel);
      });
      const metadata = {
        channelWaveforms,
        sampleRate: wave.sampleRate,
        durationInSeconds: wave.duration,
        numberOfChannels: wave.numberOfChannels,
        resultId: String(Math.random()),
        isRemote: (0, is_remote_asset_1.isRemoteAsset)(src)
      };
      metadataCache[src] = metadata;
      return metadata;
    };
    var getAudioData = (src, options) => {
      return limit(fn, src, options);
    };
    exports.getAudioData = getAudioData;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/media-tag-error-handling.js
var require_media_tag_error_handling = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/media-tag-error-handling.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.onMediaError = void 0;
    async function fetchWithTimeout(url, options, timeout = 3e3) {
      const controller = new AbortController();
      const id = setTimeout(() => controller.abort(), timeout);
      options.signal = controller.signal;
      try {
        const response = await fetch(url, options);
        clearTimeout(id);
        return response;
      } catch (e) {
        clearTimeout(id);
        throw new Error(`Fetch timed out after ${timeout}ms`);
      }
    }
    var checkFor404 = (src) => {
      return fetchWithTimeout(src, {
        method: "HEAD",
        mode: "no-cors"
      }).then((res) => res.status);
    };
    var checkFor404OrSkip = async ({ suspecting404, sameOrigin, src }) => {
      if (!suspecting404) {
        return Promise.resolve(null);
      }
      if (!sameOrigin) {
        return Promise.resolve(null);
      }
      try {
        return await checkFor404(src);
      } catch (e) {
        return Promise.resolve(null);
      }
    };
    var onMediaError = ({ error, src, reject, cleanup, api }) => {
      const suspecting404 = error.MEDIA_ERR_SRC_NOT_SUPPORTED === error.code;
      const isSrcSameOriginAsCurrent = new URL(src, window.location.origin).toString().startsWith(window.location.origin);
      checkFor404OrSkip({
        suspecting404,
        sameOrigin: isSrcSameOriginAsCurrent,
        src
      }).then((status) => {
        const err = status === 404 ? new Error([
          `Failed to execute ${api}: Received a 404 error loading "${src}".`,
          "Correct the URL of the file."
        ].join(" ")) : new Error([
          `Failed to execute ${api}, Received a MediaError loading "${src}".`,
          status === null ? null : `HTTP Status code of the file: ${status}.`,
          error.message ? `Browser error message: ${error.message}` : null,
          "Check the path of the file and if it is a valid video."
        ].filter(Boolean).join(" "));
        reject(err);
        cleanup();
      }).catch((e) => {
        reject(e);
        cleanup();
      });
    };
    exports.onMediaError = onMediaError;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/get-audio-duration-in-seconds.js
var require_get_audio_duration_in_seconds = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/get-audio-duration-in-seconds.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAudioDuration = exports.getAudioDurationInSeconds = void 0;
    var media_tag_error_handling_1 = require_media_tag_error_handling();
    var p_limit_1 = require_p_limit();
    var limit = (0, p_limit_1.pLimit)(3);
    var metadataCache = {};
    var fn = (src) => {
      if (metadataCache[src]) {
        return Promise.resolve(metadataCache[src]);
      }
      if (typeof document === "undefined") {
        throw new Error("getAudioDuration() is only available in the browser.");
      }
      const audio = document.createElement("audio");
      audio.src = src;
      return new Promise((resolve, reject) => {
        const onError = () => {
          (0, media_tag_error_handling_1.onMediaError)({
            error: audio.error,
            src,
            cleanup,
            reject,
            api: "getAudioDurationInSeconds()"
          });
        };
        const onLoadedMetadata = () => {
          metadataCache[src] = audio.duration;
          resolve(audio.duration);
          cleanup();
        };
        const cleanup = () => {
          audio.removeEventListener("loadedmetadata", onLoadedMetadata);
          audio.removeEventListener("error", onError);
          audio.remove();
        };
        audio.addEventListener("loadedmetadata", onLoadedMetadata, { once: true });
        audio.addEventListener("error", onError, { once: true });
      });
    };
    var getAudioDurationInSeconds = (src) => {
      return limit(fn, src);
    };
    exports.getAudioDurationInSeconds = getAudioDurationInSeconds;
    var getAudioDuration = (src) => (0, exports.getAudioDurationInSeconds)(src);
    exports.getAudioDuration = getAudioDuration;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/get-image-dimensions.js
var require_get_image_dimensions = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/get-image-dimensions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getImageDimensions = getImageDimensions;
    var p_limit_1 = require_p_limit();
    var imageDimensionsCache = {};
    var limit = (0, p_limit_1.pLimit)(3);
    var fn = async (src) => {
      if (imageDimensionsCache[src]) {
        return imageDimensionsCache[src];
      }
      if (typeof document === "undefined") {
        throw new Error("getImageDimensions() is only available in the browser.");
      }
      const imageDimensions = await new Promise((resolved, reject) => {
        const image = new Image();
        image.onload = () => {
          const { width, height } = image;
          resolved({ width, height });
        };
        image.onerror = reject;
        image.src = src;
      });
      imageDimensionsCache[src] = imageDimensions;
      return imageDimensions;
    };
    function getImageDimensions(src) {
      return limit(fn, src);
    }
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/get-video-metadata.js
var require_get_video_metadata = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/get-video-metadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getVideoMetadata = void 0;
    var is_remote_asset_1 = require_is_remote_asset();
    var media_tag_error_handling_1 = require_media_tag_error_handling();
    var p_limit_1 = require_p_limit();
    var cache = {};
    var limit = (0, p_limit_1.pLimit)(3);
    var fn = (src) => {
      if (cache[src]) {
        return Promise.resolve(cache[src]);
      }
      if (typeof document === "undefined") {
        throw new Error("getVideoMetadata() is only available in the browser.");
      }
      const video = document.createElement("video");
      video.src = src;
      return new Promise((resolve, reject) => {
        const onError = () => {
          (0, media_tag_error_handling_1.onMediaError)({
            error: video.error,
            src,
            cleanup,
            reject,
            api: "getVideoMetadata()"
          });
        };
        const onLoadedMetadata = () => {
          const pixels = video.videoHeight * video.videoWidth;
          if (pixels === 0) {
            reject(new Error(`Unable to determine video metadata for ${src}`));
            return;
          }
          if (!Number.isFinite(video.duration)) {
            reject(new Error(`Unable to determine video duration for ${src} - got Infinity. Re-encoding this video may fix this issue.`));
            return;
          }
          const metadata = {
            durationInSeconds: video.duration,
            width: video.videoWidth,
            height: video.videoHeight,
            aspectRatio: video.videoWidth / video.videoHeight,
            isRemote: (0, is_remote_asset_1.isRemoteAsset)(src)
          };
          resolve(metadata);
          cache[src] = metadata;
          cleanup();
        };
        const cleanup = () => {
          video.removeEventListener("loadedmetadata", onLoadedMetadata);
          video.removeEventListener("error", onError);
          video.remove();
        };
        video.addEventListener("loadedmetadata", onLoadedMetadata, { once: true });
        video.addEventListener("error", onError, { once: true });
      });
    };
    var getVideoMetadata = (src) => {
      return limit(fn, src);
    };
    exports.getVideoMetadata = getVideoMetadata;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/get-wave-form-samples.js
var require_get_wave_form_samples = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/get-wave-form-samples.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWaveformSamples = void 0;
    var filterData = (audioBuffer, samples) => {
      const blockSize = Math.floor(audioBuffer.length / samples);
      if (blockSize === 0) {
        return [];
      }
      const filteredData = [];
      for (let i = 0; i < samples; i++) {
        const blockStart = blockSize * i;
        let sum = 0;
        for (let j = 0; j < blockSize; j++) {
          sum += Math.abs(audioBuffer[blockStart + j]);
        }
        filteredData.push(sum / blockSize);
      }
      return filteredData;
    };
    var normalizeData = (filteredData) => {
      const multiplier = Math.max(...filteredData) ** -1;
      return filteredData.map((n) => n * multiplier);
    };
    var getWaveformSamples = (waveform, sampleAmount) => {
      return normalizeData(filterData(waveform, sampleAmount));
    };
    exports.getWaveformSamples = getWaveformSamples;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/get-waveform-portion.js
var require_get_waveform_portion = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/get-waveform-portion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWaveformPortion = void 0;
    var get_wave_form_samples_1 = require_get_wave_form_samples();
    var getWaveformPortion = ({ audioData, startTimeInSeconds, durationInSeconds, numberOfSamples }) => {
      const startSample = Math.floor(startTimeInSeconds / audioData.durationInSeconds * audioData.channelWaveforms[0].length);
      const endSample = Math.floor((startTimeInSeconds + durationInSeconds) / audioData.durationInSeconds * audioData.channelWaveforms[0].length);
      return (0, get_wave_form_samples_1.getWaveformSamples)(audioData.channelWaveforms[0].slice(startSample, endSample), numberOfSamples).map((w, i) => {
        return {
          index: i,
          amplitude: w
        };
      });
    };
    exports.getWaveformPortion = getWaveformPortion;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/types.js
var require_types = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/use-audio-data.js
var require_use_audio_data = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/use-audio-data.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useAudioData = void 0;
    var react_1 = require_react();
    var remotion_1 = (init_esm(), __toCommonJS(esm_exports));
    var get_audio_data_1 = require_get_audio_data();
    var useAudioData = (src) => {
      if (!src) {
        throw new TypeError("useAudioData requires a 'src' parameter");
      }
      const mountState = (0, react_1.useRef)({ isMounted: true });
      (0, react_1.useEffect)(() => {
        const { current } = mountState;
        current.isMounted = true;
        return () => {
          current.isMounted = false;
        };
      }, []);
      const [metadata, setMetadata] = (0, react_1.useState)(null);
      const fetchMetadata = (0, react_1.useCallback)(async () => {
        const handle = (0, remotion_1.delayRender)(`Waiting for audio metadata with src="${src}" to be loaded`);
        try {
          const data = await (0, get_audio_data_1.getAudioData)(src);
          if (mountState.current.isMounted) {
            setMetadata(data);
          }
        } catch (err) {
          (0, remotion_1.cancelRender)(err);
        }
        (0, remotion_1.continueRender)(handle);
      }, [src]);
      (0, react_1.useLayoutEffect)(() => {
        fetchMetadata();
      }, [fetchMetadata]);
      return metadata;
    };
    exports.useAudioData = useAudioData;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/complex.js
var require_complex = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/complex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.complexMagnitude = exports.complexMultiply = exports.complexSubtract = exports.complexAdd = void 0;
    var complexAdd = function(a, b) {
      return [a[0] + b[0], a[1] + b[1]];
    };
    exports.complexAdd = complexAdd;
    var complexSubtract = function(a, b) {
      return [a[0] - b[0], a[1] - b[1]];
    };
    exports.complexSubtract = complexSubtract;
    var complexMultiply = function(a, b) {
      return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];
    };
    exports.complexMultiply = complexMultiply;
    var complexMagnitude = function(c) {
      return Math.sqrt(c[0] * c[0] + c[1] * c[1]);
    };
    exports.complexMagnitude = complexMagnitude;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/exponent.js
var require_exponent = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/exponent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.exponent = void 0;
    var mapExponent = {};
    var exponent = function(k, N) {
      const x = -2 * Math.PI * (k / N);
      mapExponent[N] = mapExponent[N] || {};
      mapExponent[N][k] = mapExponent[N][k] || [Math.cos(x), Math.sin(x)];
      return mapExponent[N][k];
    };
    exports.exponent = exponent;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/fft-accurate.js
var require_fft_accurate = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/fft-accurate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fftAccurate = void 0;
    var complex_1 = require_complex();
    var exponent_1 = require_exponent();
    var fftAccurate = function(vector) {
      const X = [];
      const N = vector.length;
      if (N === 1) {
        if (Array.isArray(vector[0])) {
          return [[vector[0][0], vector[0][1]]];
        }
        return [[vector[0], 0]];
      }
      const X_evens = (0, exports.fftAccurate)(vector.filter((_, ix) => ix % 2 === 0));
      const X_odds = (0, exports.fftAccurate)(vector.filter((__, ix) => ix % 2 === 1));
      for (let k = 0; k < N / 2; k++) {
        const t = X_evens[k];
        const e = (0, complex_1.complexMultiply)((0, exponent_1.exponent)(k, N), X_odds[k]);
        X[k] = (0, complex_1.complexAdd)(t, e);
        X[k + N / 2] = (0, complex_1.complexSubtract)(t, e);
      }
      return X;
    };
    exports.fftAccurate = fftAccurate;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/fft-fast.js
var require_fft_fast = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/fft-fast.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fftFast = void 0;
    function reverseBits(num, numBits) {
      let result = 0;
      for (let i = 0; i < numBits; i++) {
        result = result << 1 | num >> i & 1;
      }
      return result;
    }
    function hammingWindow(N) {
      const win = new Array(N);
      for (let i = 0; i < N; i++) {
        win[i] = 0.8 - 0.46 * Math.cos(2 * Math.PI * i / (N - 1));
      }
      return win;
    }
    function bitReversePermutation(N) {
      const bitReversed = new Array(N);
      for (let i = 0; i < N; i++) {
        bitReversed[i] = reverseBits(i, Math.log2(N));
      }
      return bitReversed;
    }
    var fftFast = function(vector) {
      const N = vector.length;
      const X = new Array(N);
      if (N <= 1) {
        for (let i = 0; i < vector.length; i++) {
          const value = vector[i];
          X[i] = [value * 2, 0];
        }
        return X;
      }
      const window2 = hammingWindow(N);
      for (let i = 0; i < N; i++) {
        X[i] = [vector[i] * window2[i], 0];
      }
      const bitReversed = bitReversePermutation(N);
      for (let i = 0; i < N; i++) {
        X[i] = [vector[bitReversed[i]], 0];
      }
      for (let s = 1; s <= Math.log2(N); s++) {
        const m = 1 << s;
        const mHalf = m / 2;
        const angleIncrement = 2 * Math.PI / m;
        for (let k = 0; k < N; k += m) {
          let omegaReal = 1;
          let omegaImag = 0;
          for (let j = 0; j < mHalf; j++) {
            const tReal = omegaReal * X[k + j + mHalf][0] - omegaImag * X[k + j + mHalf][1];
            const tImag = omegaReal * X[k + j + mHalf][1] + omegaImag * X[k + j + mHalf][0];
            const uReal = X[k + j][0];
            const uImag = X[k + j][1];
            X[k + j] = [uReal + tReal, uImag + tImag];
            X[k + j + mHalf] = [uReal - tReal, uImag - tImag];
            const tempReal = omegaReal * Math.cos(angleIncrement) - omegaImag * Math.sin(angleIncrement);
            omegaImag = omegaReal * Math.sin(angleIncrement) + omegaImag * Math.cos(angleIncrement);
            omegaReal = tempReal;
          }
        }
      }
      return X;
    };
    exports.fftFast = fftFast;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/mag.js
var require_mag = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/mag.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fftMag = void 0;
    var complex_1 = require_complex();
    var fftMag = function(fftBins) {
      const ret = fftBins.map((f) => (0, complex_1.complexMagnitude)(f));
      return ret.slice(0, ret.length / 2);
    };
    exports.fftMag = fftMag;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/smoothing.js
var require_smoothing = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/smoothing.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.smoothen = void 0;
    var smoothingPasses = 3;
    var smoothingPoints = 3;
    var smoothen = function(array) {
      let lastArray = array;
      const newArr = [];
      for (let pass = 0; pass < smoothingPasses; pass++) {
        const sidePoints = Math.floor(smoothingPoints / 2);
        const cn = 1 / (2 * sidePoints + 1);
        for (let i = 0; i < sidePoints; i++) {
          newArr[i] = lastArray[i];
          newArr[lastArray.length - i - 1] = lastArray[lastArray.length - i - 1];
        }
        for (let i = sidePoints; i < lastArray.length - sidePoints; i++) {
          let sum = 0;
          for (let n = -sidePoints; n <= sidePoints; n++) {
            sum += cn * lastArray[i + n] + n;
          }
          newArr[i] = sum;
        }
        lastArray = newArr;
      }
      return newArr;
    };
    exports.smoothen = smoothen;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/to-int-16.js
var require_to_int_16 = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/to-int-16.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toInt16 = void 0;
    var toInt16 = (x) => x > 0 ? x * 32767 : x * 32768;
    exports.toInt16 = toInt16;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/get-visualization.js
var require_get_visualization = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/get-visualization.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getVisualization = void 0;
    var fft_accurate_1 = require_fft_accurate();
    var fft_fast_1 = require_fft_fast();
    var mag_1 = require_mag();
    var smoothing_1 = require_smoothing();
    var to_int_16_1 = require_to_int_16();
    var getVisualization = ({ sampleSize, data, sampleRate, frame, fps, maxInt, optimizeFor = "accuracy" }) => {
      const isPowerOfTwo = sampleSize > 0 && (sampleSize & sampleSize - 1) === 0;
      if (!isPowerOfTwo) {
        throw new TypeError(`The argument "bars" must be a power of two. For example: 64, 128. Got instead: ${sampleSize}`);
      }
      if (!fps) {
        throw new TypeError('The argument "fps" was not provided');
      }
      if (data.length < sampleSize) {
        throw new TypeError("Audio data is not big enough to provide " + sampleSize + " bars.");
      }
      const start = Math.floor(frame / fps * sampleRate);
      const actualStart = Math.max(0, start - sampleSize / 2);
      const ints = new Int16Array({
        length: sampleSize
      });
      ints.set(data.subarray(actualStart, actualStart + sampleSize).map((x) => (0, to_int_16_1.toInt16)(x)));
      const alg = optimizeFor === "accuracy" ? fft_accurate_1.fftAccurate : fft_fast_1.fftFast;
      const phasors = alg(ints);
      const magnitudes = (0, mag_1.fftMag)(phasors).map((p) => p);
      return (0, smoothing_1.smoothen)(magnitudes).map((m) => m / (sampleSize / 2) / maxInt);
    };
    exports.getVisualization = getVisualization;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/max-value-cached.js
var require_max_value_cached = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/fft/max-value-cached.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMaxPossibleMagnitude = void 0;
    var to_int_16_1 = require_to_int_16();
    var getMax = (array) => {
      let max = 0;
      for (let i = 0; i < array.length; i++) {
        const val = array[i];
        if (val > max) {
          max = val;
        }
      }
      return max;
    };
    var cache = {};
    var getMaxPossibleMagnitude = (metadata) => {
      if (cache[metadata.resultId]) {
        return cache[metadata.resultId];
      }
      const result = (0, to_int_16_1.toInt16)(getMax(metadata.channelWaveforms[0]));
      cache[metadata.resultId] = result;
      return result;
    };
    exports.getMaxPossibleMagnitude = getMaxPossibleMagnitude;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/visualize-audio.js
var require_visualize_audio = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/visualize-audio.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.visualizeAudio = void 0;
    var no_react_1 = (init_no_react(), __toCommonJS(no_react_exports));
    var get_visualization_1 = require_get_visualization();
    var max_value_cached_1 = require_max_value_cached();
    var cache = {};
    var visualizeAudioFrame = ({ audioData: metadata, frame, fps, numberOfSamples, optimizeFor }) => {
      const cacheKey = metadata.resultId + frame + fps + numberOfSamples;
      if (cache[cacheKey]) {
        return cache[cacheKey];
      }
      const maxInt = (0, max_value_cached_1.getMaxPossibleMagnitude)(metadata);
      return (0, get_visualization_1.getVisualization)({
        sampleSize: numberOfSamples * 2,
        data: metadata.channelWaveforms[0],
        frame,
        fps,
        sampleRate: metadata.sampleRate,
        maxInt,
        optimizeFor: optimizeFor !== null && optimizeFor !== void 0 ? optimizeFor : no_react_1.NoReactInternals.ENABLE_V5_BREAKING_CHANGES ? "speed" : "accuracy"
      });
    };
    var visualizeAudio = ({ smoothing = true, ...parameters }) => {
      if (!smoothing) {
        return visualizeAudioFrame(parameters);
      }
      const toSmooth = [
        parameters.frame - 1,
        parameters.frame,
        parameters.frame + 1
      ];
      const all = toSmooth.map((s) => {
        return visualizeAudioFrame({ ...parameters, frame: s });
      });
      return new Array(parameters.numberOfSamples).fill(true).map((_x, i) => {
        return new Array(toSmooth.length).fill(true).map((_, j) => {
          return all[j][i];
        }).reduce((a, b) => a + b, 0) / toSmooth.length;
      });
    };
    exports.visualizeAudio = visualizeAudio;
  }
});

// node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/index.js
var require_dist = __commonJS({
  "node_modules/.pnpm/@remotion+media-utils@4.0.2_6e006f938b99d366f8d4a714c89f3dac/node_modules/@remotion/media-utils/dist/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.visualizeAudio = exports.useAudioData = exports.getWaveformPortion = exports.getVideoMetadata = exports.getImageDimensions = exports.getAudioDurationInSeconds = exports.getAudioDuration = exports.getAudioData = exports.audioBufferToDataUrl = void 0;
    var audio_url_helpers_1 = require_audio_url_helpers();
    Object.defineProperty(exports, "audioBufferToDataUrl", { enumerable: true, get: function() {
      return audio_url_helpers_1.audioBufferToDataUrl;
    } });
    var get_audio_data_1 = require_get_audio_data();
    Object.defineProperty(exports, "getAudioData", { enumerable: true, get: function() {
      return get_audio_data_1.getAudioData;
    } });
    var get_audio_duration_in_seconds_1 = require_get_audio_duration_in_seconds();
    Object.defineProperty(exports, "getAudioDuration", { enumerable: true, get: function() {
      return get_audio_duration_in_seconds_1.getAudioDuration;
    } });
    Object.defineProperty(exports, "getAudioDurationInSeconds", { enumerable: true, get: function() {
      return get_audio_duration_in_seconds_1.getAudioDurationInSeconds;
    } });
    var get_image_dimensions_1 = require_get_image_dimensions();
    Object.defineProperty(exports, "getImageDimensions", { enumerable: true, get: function() {
      return get_image_dimensions_1.getImageDimensions;
    } });
    var get_video_metadata_1 = require_get_video_metadata();
    Object.defineProperty(exports, "getVideoMetadata", { enumerable: true, get: function() {
      return get_video_metadata_1.getVideoMetadata;
    } });
    var get_waveform_portion_1 = require_get_waveform_portion();
    Object.defineProperty(exports, "getWaveformPortion", { enumerable: true, get: function() {
      return get_waveform_portion_1.getWaveformPortion;
    } });
    __exportStar(require_types(), exports);
    var use_audio_data_1 = require_use_audio_data();
    Object.defineProperty(exports, "useAudioData", { enumerable: true, get: function() {
      return use_audio_data_1.useAudioData;
    } });
    var visualize_audio_1 = require_visualize_audio();
    Object.defineProperty(exports, "visualizeAudio", { enumerable: true, get: function() {
      return visualize_audio_1.visualizeAudio;
    } });
  }
});
export default require_dist();
//# sourceMappingURL=@remotion_media-utils.js.map
