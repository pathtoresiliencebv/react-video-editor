{"version":3,"file":"helper.esm.js","sources":["../src/groups.ts","../src/GroupManager.ts"],"sourcesContent":["import { isArray, deepFlat, find } from \"@daybrush/utils\";\nimport { GroupChild, TargetGroupsObject, TargetGroupsType } from \"./types\";\n\nexport class Child {\n    public type: \"group\" | \"root\" | \"single\" = \"single\";\n    public depth = 0;\n    protected _scope: string[] = [];\n    constructor(public parent?: GroupArrayChild) {\n        if (parent) {\n            this.depth = parent.depth + 1;\n        }\n    }\n\n    public get scope(): string[] {\n        const parent = this.parent;\n\n        if (!parent || parent.type === \"root\") {\n            return [];\n        }\n        return [...parent.scope, parent.id];\n    }\n}\n\nexport class GroupSingleChild extends Child {\n    public type = \"single\" as const;\n    constructor(parent: GroupArrayChild, public value: HTMLElement | SVGElement) {\n        super(parent);\n    }\n}\n\n\nexport class GroupArrayChild extends Child {\n    public type: \"group\" | \"root\" = \"group\";\n    public value: GroupChild[] = [];\n    public id = \"\";\n    public map: Map<HTMLElement | SVGElement, GroupSingleChild> = new Map();\n\n    public compare(groups: TargetGroupsType, checker: -1 | 0 | 1 = 0) {\n        const elements = deepFlat(groups);\n        const map = this.map;\n        const elementsLength = elements.length;\n        const mapSize = map.size;\n        const sizeDiff = mapSize - elementsLength;\n\n        // 1 this > groups\n        // 0 this = groups\n        // -1 this < groups\n        const count = elements.filter(element => map.has(element)).length;\n\n        if ((checker > 0 && sizeDiff >= 0) || (checker === 0 && sizeDiff === 0)) {\n            return elementsLength === count;\n        } else if (checker < 0 && sizeDiff <= 0) {\n            return mapSize === count;\n        }\n        return false;\n    }\n    public has(target: HTMLElement | SVGElement) {\n        return this.map.has(target);\n    }\n    public contains(element: HTMLElement | SVGElement): boolean {\n        if (this.has(element)) {\n            return true;\n        }\n        return this.value.some(child => {\n            if (child.type === \"group\") {\n                return child.contains(element);\n            } else {\n                return false;\n            }\n        });\n    }\n    public findContainedChild(element: HTMLElement | SVGElement) {\n        return find(this.value, child => {\n            if (child.type === \"single\") {\n                return child.value === element;\n            } else {\n                return child.contains(element);\n            }\n        });\n    }\n    /**\n     * Exact group containing targets\n     */\n    public findExactChild(target: TargetGroupsType[0]): GroupChild | undefined {\n        const map = this.map;\n\n        if (!isArray(target)) {\n            return map.get(target);\n        }\n        const flatted = deepFlat(target);\n        const length = flatted.length;\n        const single = map.get(flatted[0]);\n\n        if (!single) {\n            return;\n        }\n\n        let parent: GroupArrayChild | undefined = single.parent;\n\n        while (parent) {\n            if (parent.map.size >= length) {\n                return parent;\n            }\n            parent = parent.parent;\n        }\n        return;\n    }\n    public findCommonParent(targets: TargetGroupsType): GroupArrayChild {\n        let depth = Infinity;\n        let childs = targets.map(target => this.findExactChild(target));\n\n        childs.forEach(child => {\n            if (!child) {\n                return;\n            }\n            depth = Math.min(child.depth, depth);\n        });\n\n        while (depth) {\n            --depth;\n            childs = childs.map(child => {\n                let parent: GroupChild | undefined = child;\n\n                while (parent && parent.depth !== depth) {\n                    parent = parent.parent;\n                }\n\n                return parent;\n            });\n            const firstChild = childs.find(child => child);\n\n            if (!firstChild) {\n                return this;\n            }\n            if (childs.every(child => !child || child === firstChild)) {\n                break;\n            }\n        }\n        const commonParent = childs.find(child => child) as GroupArrayChild;\n\n        return commonParent || this;\n    }\n    public findNextChild(\n        target: HTMLElement | SVGElement,\n        range: TargetGroupsType = this.toTargetGroups(),\n        isExact = true,\n    ): GroupArrayChild | null {\n        let nextChild: GroupArrayChild | null = null;\n\n        const length = range.length;\n\n        range.some(child => {\n            if (!isExact && length === 1 && isArray(child)) {\n                nextChild = this.findNextChild(target, child);\n                return nextChild;\n            }\n\n\n            const nextGroupChild = this.findExactChild(child);\n\n            if (!nextGroupChild) {\n                return;\n            }\n\n            if (\"map\" in nextGroupChild) {\n                if (nextGroupChild.map.has(target)) {\n                    nextChild = nextGroupChild;\n                    return true;\n                }\n            }\n        });\n\n        return nextChild;\n    }\n    public findNextExactChild(\n        target: HTMLElement | SVGElement,\n        selected: Array<HTMLElement | SVGElement>,\n        range: TargetGroupsType = this.toTargetGroups(),\n    ): GroupArrayChild | null {\n        // [[1, 2]] => group([1, 2]) exact\n        // [[[1, 2], 3]] => group([1, 2])\n        const nextChild = this.findNextChild(target, range, true);\n\n        if (!nextChild) {\n            return null;\n        }\n\n        if (nextChild.compare(selected, -1)) {\n            return nextChild;\n        }\n        return null;\n    }\n    /**\n     * Finds a group that does not overlap within the range and includes the target.\n     */\n    public findPureChild(\n        target: HTMLElement | SVGElement,\n        range: Array<HTMLElement | SVGElement>,\n    ): GroupArrayChild | null {\n        let nextGroupChild: GroupArrayChild | null = null;\n\n        const childSelected = range.filter(element => this.has(element));\n\n        if (!childSelected.length) {\n            return this;\n        }\n\n        this.value.some(nextChild => {\n            if (nextChild.type !== \"single\" && nextChild.has(target)) {\n                nextGroupChild = nextChild.findPureChild(target, childSelected);\n\n                if (nextGroupChild) {\n                    return true;\n                }\n            }\n        });\n\n        return nextGroupChild;\n    }\n    public findNextPureChild(\n        target: HTMLElement | SVGElement,\n        range: Array<HTMLElement | SVGElement>,\n    ): GroupArrayChild | null {\n        const nextChild = this.findNextChild(target);\n\n        if (nextChild) {\n            return nextChild.findPureChild(target, range);\n        }\n        return null;\n    }\n    public toTargetGroups(): TargetGroupsType {\n        return this.value.map(child => {\n            if (child.type === \"single\") {\n                return child.value;\n            } else {\n                return child.toTargetGroups();\n            }\n        });\n    }\n    public findArrayChild(targets: TargetGroupsType): GroupArrayChild | null {\n        const {\n            value,\n        } = this;\n\n        let result = false;\n\n        if (this.type !== \"root\") {\n            result = value.every(child => {\n                if (child.type === \"single\")  {\n                    return targets.some(target => child.value === target);\n                } else {\n                    return targets.some(target => {\n                        return isArray(target) && child.findArrayChild(target);\n                    });\n                }\n            });\n            // result = targets.every(target => {\n            //     if (isArray(target)) {\n            //         return value.some(child => {\n            //             return child.type === \"group\" && child.findArrayChild(target);\n            //         });\n            //     } else {\n            //         return map.get(target);\n            //     }\n            // });\n        }\n\n        if (result && targets.length === value.length) {\n            return this;\n        } else {\n            let childResult: GroupArrayChild | null = null;\n\n            value.some(child => {\n                if (child.type === \"group\") {\n                    childResult = child.findArrayChild(targets);\n\n                    return childResult;\n                }\n            });\n\n            return childResult;\n        }\n    }\n    public groupByPerfect(selected: Array<HTMLElement | SVGElement>) {\n        return this.value.filter(child => {\n            if (child.type !== \"single\") {\n                return child.compare(selected, -1);\n            }\n            return selected.indexOf(child.value) > -1;\n        });\n    }\n    public add(targets: TargetGroupsObject) {\n        const {\n            value,\n            map,\n        } = this;\n        const depth = this.depth;\n\n        targets.forEach(child => {\n            if (\"groupId\" in child) {\n                const group = new GroupArrayChild(this);\n\n                group.id = child.groupId;\n                group.depth = depth + 1;\n                value.push(group);\n\n                group.add(child.children);\n            } else if (isArray(child)) {\n                const group = new GroupArrayChild(this);\n\n                group.depth = depth + 1;\n                value.push(group);\n\n                group.add(child);\n            } else {\n                const element = \"current\" in child ? child.current : child;\n                const single = new GroupSingleChild(this, element!);\n\n                single.depth = depth + 1;\n                value.push(single);\n                map.set(element!, single);\n            }\n        });\n\n        value.forEach(child => {\n            if (child.type === \"single\") {\n                map.set(child.value, child);\n            } else {\n                child.map.forEach((nextChild, element) => {\n                    map.set(element, nextChild);\n                });\n            }\n        });\n        return parent;\n    }\n}\n","/* eslint-disable no-cond-assign */\nimport { deepFlat, isArray } from \"@daybrush/utils\";\nimport { GroupArrayChild, GroupSingleChild } from \"./groups\";\nimport { GroupChild, TargetGroupsObject, TargetGroupsType, TargetList } from \"./types\";\n\n\nexport function toTargetList(raw: GroupChild[]): TargetList {\n    function targets(childs: GroupChild[] = []) {\n        const arr: TargetGroupsType = [];\n\n        childs.forEach((child) => {\n            if (child.type === \"single\") {\n                arr.push(child.value);\n            } else {\n                arr.push(targets(child.value));\n            }\n        });\n\n        return arr;\n    }\n\n    return {\n        raw: () => raw,\n        targets() {\n            return targets(this.raw());\n        },\n        flatten() {\n            return deepFlat(this.targets());\n        },\n    };\n}\n\nexport class GroupManager extends GroupArrayChild {\n    public type = \"root\" as const;\n    private _targets:  Array<HTMLElement | SVGElement> = [];\n\n    constructor(\n        targetGroups: TargetGroupsType,\n        targets?: Array<HTMLElement | SVGElement>,\n    ) {\n        super();\n        this.set(targetGroups, targets);\n    }\n    public set(\n        targetGroups: TargetGroupsObject,\n        targets: Array<HTMLElement | SVGElement> = [],\n    ) {\n        this.map = new Map();\n        this.value = [];\n\n        const map = this.map;\n        const value = this.value;\n\n        this.add(targetGroups);\n        targets.forEach(target => {\n            if (map.has(target)) {\n                return;\n            }\n            const single = new GroupSingleChild(this, target);\n\n            single.depth = 1;\n            value.push(single);\n            map.set(target, single);\n        });\n        this._targets = targets;\n    }\n    public selectSubChilds(targets: TargetGroupsType, target: HTMLElement | SVGElement) {\n        const root = this;\n        const nextChild = root.findNextChild(target, targets, false);\n        const targetChild = root.map.get(target);\n\n        let nextChilds: GroupChild[] = [];\n\n        if (nextChild) {\n            nextChilds = [nextChild];\n        } else if (targetChild) {\n            nextChilds = [targetChild];\n        } else {\n            nextChilds = [];\n        }\n\n        return toTargetList(nextChilds);\n    }\n    public selectSingleChilds(\n        targets: TargetGroupsType,\n        added: Array<HTMLElement | SVGElement>,\n        removed: Array<HTMLElement | SVGElement>,\n    ) {\n        const nextTargets = [...targets];\n\n        // group can't be added, removed.\n        removed.forEach(element => {\n            const index = nextTargets.indexOf(element);\n\n            if (index > -1) {\n                nextTargets.splice(index, 1);\n            }\n        });\n\n        // Targets can be added one by one\n        added.forEach(element => {\n            nextTargets.push(element);\n        });\n\n        return toTargetList(this.toChilds(nextTargets));\n    }\n    public selectCompletedChilds(\n        targets: TargetGroupsType,\n        added: Array<HTMLElement | SVGElement>,\n        removed: Array<HTMLElement | SVGElement>,\n        continueSelect?: boolean,\n    ) {\n\n        const nextTargets = [...targets];\n        const startSelected = deepFlat(nextTargets);\n\n        // group can be added, removed.\n        removed.forEach(element => {\n            // Single Target\n            const index = nextTargets.indexOf(element);\n\n            if (index > -1) {\n                // single target or group\n                nextTargets.splice(index, 1);\n                return;\n            }\n            // Group Target\n            const removedChild = continueSelect\n                // Finds the nearest child for element and nextTargets.\n                ? this.findNextChild(element, nextTargets)\n                // Find the nearest exact child for element, all removed and nextTargets.\n                : this.findNextExactChild(element, removed, nextTargets);\n\n            if (removedChild) {\n                const groupIndex = nextTargets.findIndex(target => {\n                    return isArray(target) && removedChild.compare(target);\n                });\n\n                if (groupIndex > -1) {\n                    nextTargets.splice(groupIndex, 1);\n                }\n            }\n        });\n\n        added.forEach(element => {\n            const parentGroup = this._findParentGroup(element, startSelected);\n\n            const nextChild = parentGroup.findContainedChild(element);\n\n            if (nextChild?.type === \"group\") {\n                nextTargets.push(nextChild.toTargetGroups());\n                return;\n            }\n            nextTargets.push(element);\n        });\n        return toTargetList(this.toChilds(nextTargets));\n    }\n    public selectSameDepthChilds(\n        targets: TargetGroupsType,\n        added: Array<HTMLElement | SVGElement>,\n        removed: Array<HTMLElement | SVGElement>,\n        continueSelect?: boolean,\n    ) {\n        const nextTargets = [...targets];\n        const commonParent = this.findCommonParent(nextTargets);\n\n        removed.forEach(element => {\n            // Single Target\n            const index = nextTargets.indexOf(element);\n\n            if (index > -1) {\n                // single target or group\n                nextTargets.splice(index, 1);\n                return;\n            }\n            const removedChild = continueSelect\n                // Find the nearest exact child for element, all removed and nextTargets.\n                ? commonParent.findNextExactChild(element, removed, nextTargets)\n                // Finds the nearest child for element and nextTargets.\n                : commonParent.findNextChild(element, nextTargets, true);\n\n            if (removedChild) {\n                const groupIndex = nextTargets.findIndex(target => {\n                    return isArray(target) && removedChild.compare(target);\n                });\n\n                if (groupIndex > -1) {\n                    nextTargets.splice(groupIndex, 1);\n                }\n            }\n        });\n        const addedChildren = commonParent.groupByPerfect(added);\n\n        addedChildren.forEach(child => {\n            if (child.type === \"single\") {\n                nextTargets.push(child.value);\n            } else {\n                const groupIndex = nextTargets.findIndex(target => {\n                    return isArray(target) && child.compare(target, 1);\n                });\n\n                if (groupIndex > -1) {\n                    nextTargets.splice(groupIndex, 1);\n                }\n                nextTargets.push(child.toTargetGroups());\n            }\n        });\n        return toTargetList(this.toChilds(nextTargets));\n    }\n    public toChilds(targets: TargetGroupsType): GroupChild[] {\n        const childs: GroupChild[] = [];\n\n        targets.forEach(target => {\n            if (isArray(target)) {\n                const arrayChild = this.findArrayChild(target);\n\n                if (arrayChild) {\n                    childs.push(arrayChild);\n                }\n            } else {\n                const single = this.map.get(target);\n\n                if (single) {\n                    childs.push(single);\n                } else {\n                    childs.push(new GroupSingleChild(this, target));\n                }\n            }\n        });\n\n        return childs;\n    }\n    public toSingleChild(element: HTMLElement | SVGElement, isAuto: true): GroupSingleChild;\n    public toSingleChild(element: HTMLElement | SVGElement, isAuto?: boolean): GroupSingleChild | undefined;\n    public toSingleChild(element: HTMLElement | SVGElement, isAuto?: boolean): GroupSingleChild | undefined {\n        const value = this.map.get(element);\n\n        if (isAuto) {\n            return value || new GroupSingleChild(this, element);\n        }\n        return value;\n    }\n    public findArrayChildById(id: string): GroupArrayChild | null {\n        let value: GroupArrayChild | null = null;\n\n        this.value.some(function find(child: GroupChild) {\n            if (child.type !== \"single\") {\n                if (child.id === id) {\n                    value = child;\n                    return true;\n                } else {\n                    return child.value.some(find);\n                }\n            }\n        });\n\n        return value;\n    }\n    public group(targets: TargetGroupsType, flatten?: boolean): TargetGroupsType | null {\n        const commonParent = this.findCommonParent(targets);\n        const groupChilds = targets.map(target => {\n            if (isArray(target)) {\n                return this.findArrayChild(target);\n            }\n            return this.toSingleChild(target);\n        });\n        const isGroupable = groupChilds.every(child => child?.parent === commonParent);\n\n        if (!isGroupable) {\n            return null;\n        }\n        const group = new GroupArrayChild(commonParent);\n        const nextChilds = commonParent.value.filter(target => groupChilds.indexOf(target) === -1);\n\n        nextChilds.unshift(group);\n\n        group.add(flatten ? deepFlat(targets) : targets);\n        commonParent.value = nextChilds;\n\n        this.set(this.toTargetGroups(), this._targets);\n\n        return group.toTargetGroups();\n    }\n    public ungroup(targets: TargetGroupsType) {\n        if (targets.length === 1 && isArray(targets[0])) {\n            targets = targets[0];\n        }\n        const commonParent = this.findCommonParent(targets);\n        const groupChilds = targets.map(target => {\n            if (isArray(target)) {\n                return this.findArrayChild(target);\n            }\n            return this.toSingleChild(target);\n        });\n        const isGroupable = commonParent.value.every(child => groupChilds.indexOf(child) > -1);\n\n        if (!isGroupable || commonParent === this) {\n            // has no group\n            return null;\n        }\n\n        const parent = commonParent.parent;\n\n        if (!parent) {\n            return null;\n        }\n        const nextChilds = parent.value.filter(target => target !== commonParent);\n\n        nextChilds.push(...commonParent.value);\n        parent.value = nextChilds;\n\n        this.set(this.toTargetGroups(), this._targets);\n        return commonParent.toTargetGroups();\n    }\n    protected _findParentGroup(\n        element: HTMLElement | SVGElement,\n        range: Array<HTMLElement | SVGElement>,\n    ) {\n        if (!range.length) {\n            return this;\n        }\n        const single = this.map.get(element);\n\n        if (!single) {\n            return this;\n        }\n        let parent: GroupArrayChild | undefined = single.parent;\n\n        while (parent) {\n            if (range.some(element => parent!.contains(element))) {\n                return parent;\n            }\n            parent = parent.parent;\n        }\n        return this;\n    }\n}\n"],"names":["Child","parent","type","depth","_scope","Object","defineProperty","get","__spreadArray","scope","id","GroupSingleChild","_super","__extends","value","_this","call","GroupArrayChild","apply","arguments","map","Map","compare","groups","checker","elements","deepFlat","elementsLength","length","mapSize","size","sizeDiff","count","filter","element","has","target","contains","some","child","findContainedChild","find","findExactChild","isArray","flatted","single","findCommonParent","targets","Infinity","childs","forEach","Math","min","firstChild","every","commonParent","findNextChild","range","isExact","toTargetGroups","nextChild","nextGroupChild","findNextExactChild","selected","findPureChild","childSelected","findNextPureChild","findArrayChild","result","childResult_1","groupByPerfect","indexOf","add","_a","group","groupId","push","children","current","set","toTargetList","raw","arr","flatten","GroupManager","targetGroups","_targets","selectSubChilds","root","targetChild","nextChilds","selectSingleChilds","added","removed","nextTargets","index","splice","toChilds","selectCompletedChilds","continueSelect","startSelected","removedChild","groupIndex","findIndex","parentGroup","_findParentGroup","selectSameDepthChilds","addedChildren","arrayChild","toSingleChild","isAuto","findArrayChildById","groupChilds","isGroupable","unshift","ungroup"],"mappings":"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"}