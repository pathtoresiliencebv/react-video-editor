{"version":3,"file":"helper.js","sources":["../src/groups.ts","../src/GroupManager.ts","../src/index.umd.ts"],"sourcesContent":["import { isArray, deepFlat, find } from \"@daybrush/utils\";\nimport { GroupChild, TargetGroupsObject, TargetGroupsType } from \"./types\";\n\nexport class Child {\n    public type: \"group\" | \"root\" | \"single\" = \"single\";\n    public depth = 0;\n    protected _scope: string[] = [];\n    constructor(public parent?: GroupArrayChild) {\n        if (parent) {\n            this.depth = parent.depth + 1;\n        }\n    }\n\n    public get scope(): string[] {\n        const parent = this.parent;\n\n        if (!parent || parent.type === \"root\") {\n            return [];\n        }\n        return [...parent.scope, parent.id];\n    }\n}\n\nexport class GroupSingleChild extends Child {\n    public type = \"single\" as const;\n    constructor(parent: GroupArrayChild, public value: HTMLElement | SVGElement) {\n        super(parent);\n    }\n}\n\n\nexport class GroupArrayChild extends Child {\n    public type: \"group\" | \"root\" = \"group\";\n    public value: GroupChild[] = [];\n    public id = \"\";\n    public map: Map<HTMLElement | SVGElement, GroupSingleChild> = new Map();\n\n    public compare(groups: TargetGroupsType, checker: -1 | 0 | 1 = 0) {\n        const elements = deepFlat(groups);\n        const map = this.map;\n        const elementsLength = elements.length;\n        const mapSize = map.size;\n        const sizeDiff = mapSize - elementsLength;\n\n        // 1 this > groups\n        // 0 this = groups\n        // -1 this < groups\n        const count = elements.filter(element => map.has(element)).length;\n\n        if ((checker > 0 && sizeDiff >= 0) || (checker === 0 && sizeDiff === 0)) {\n            return elementsLength === count;\n        } else if (checker < 0 && sizeDiff <= 0) {\n            return mapSize === count;\n        }\n        return false;\n    }\n    public has(target: HTMLElement | SVGElement) {\n        return this.map.has(target);\n    }\n    public contains(element: HTMLElement | SVGElement): boolean {\n        if (this.has(element)) {\n            return true;\n        }\n        return this.value.some(child => {\n            if (child.type === \"group\") {\n                return child.contains(element);\n            } else {\n                return false;\n            }\n        });\n    }\n    public findContainedChild(element: HTMLElement | SVGElement) {\n        return find(this.value, child => {\n            if (child.type === \"single\") {\n                return child.value === element;\n            } else {\n                return child.contains(element);\n            }\n        });\n    }\n    /**\n     * Exact group containing targets\n     */\n    public findExactChild(target: TargetGroupsType[0]): GroupChild | undefined {\n        const map = this.map;\n\n        if (!isArray(target)) {\n            return map.get(target);\n        }\n        const flatted = deepFlat(target);\n        const length = flatted.length;\n        const single = map.get(flatted[0]);\n\n        if (!single) {\n            return;\n        }\n\n        let parent: GroupArrayChild | undefined = single.parent;\n\n        while (parent) {\n            if (parent.map.size >= length) {\n                return parent;\n            }\n            parent = parent.parent;\n        }\n        return;\n    }\n    public findCommonParent(targets: TargetGroupsType): GroupArrayChild {\n        let depth = Infinity;\n        let childs = targets.map(target => this.findExactChild(target));\n\n        childs.forEach(child => {\n            if (!child) {\n                return;\n            }\n            depth = Math.min(child.depth, depth);\n        });\n\n        while (depth) {\n            --depth;\n            childs = childs.map(child => {\n                let parent: GroupChild | undefined = child;\n\n                while (parent && parent.depth !== depth) {\n                    parent = parent.parent;\n                }\n\n                return parent;\n            });\n            const firstChild = childs.find(child => child);\n\n            if (!firstChild) {\n                return this;\n            }\n            if (childs.every(child => !child || child === firstChild)) {\n                break;\n            }\n        }\n        const commonParent = childs.find(child => child) as GroupArrayChild;\n\n        return commonParent || this;\n    }\n    public findNextChild(\n        target: HTMLElement | SVGElement,\n        range: TargetGroupsType = this.toTargetGroups(),\n        isExact = true,\n    ): GroupArrayChild | null {\n        let nextChild: GroupArrayChild | null = null;\n\n        const length = range.length;\n\n        range.some(child => {\n            if (!isExact && length === 1 && isArray(child)) {\n                nextChild = this.findNextChild(target, child);\n                return nextChild;\n            }\n\n\n            const nextGroupChild = this.findExactChild(child);\n\n            if (!nextGroupChild) {\n                return;\n            }\n\n            if (\"map\" in nextGroupChild) {\n                if (nextGroupChild.map.has(target)) {\n                    nextChild = nextGroupChild;\n                    return true;\n                }\n            }\n        });\n\n        return nextChild;\n    }\n    public findNextExactChild(\n        target: HTMLElement | SVGElement,\n        selected: Array<HTMLElement | SVGElement>,\n        range: TargetGroupsType = this.toTargetGroups(),\n    ): GroupArrayChild | null {\n        // [[1, 2]] => group([1, 2]) exact\n        // [[[1, 2], 3]] => group([1, 2])\n        const nextChild = this.findNextChild(target, range, true);\n\n        if (!nextChild) {\n            return null;\n        }\n\n        if (nextChild.compare(selected, -1)) {\n            return nextChild;\n        }\n        return null;\n    }\n    /**\n     * Finds a group that does not overlap within the range and includes the target.\n     */\n    public findPureChild(\n        target: HTMLElement | SVGElement,\n        range: Array<HTMLElement | SVGElement>,\n    ): GroupArrayChild | null {\n        let nextGroupChild: GroupArrayChild | null = null;\n\n        const childSelected = range.filter(element => this.has(element));\n\n        if (!childSelected.length) {\n            return this;\n        }\n\n        this.value.some(nextChild => {\n            if (nextChild.type !== \"single\" && nextChild.has(target)) {\n                nextGroupChild = nextChild.findPureChild(target, childSelected);\n\n                if (nextGroupChild) {\n                    return true;\n                }\n            }\n        });\n\n        return nextGroupChild;\n    }\n    public findNextPureChild(\n        target: HTMLElement | SVGElement,\n        range: Array<HTMLElement | SVGElement>,\n    ): GroupArrayChild | null {\n        const nextChild = this.findNextChild(target);\n\n        if (nextChild) {\n            return nextChild.findPureChild(target, range);\n        }\n        return null;\n    }\n    public toTargetGroups(): TargetGroupsType {\n        return this.value.map(child => {\n            if (child.type === \"single\") {\n                return child.value;\n            } else {\n                return child.toTargetGroups();\n            }\n        });\n    }\n    public findArrayChild(targets: TargetGroupsType): GroupArrayChild | null {\n        const {\n            value,\n        } = this;\n\n        let result = false;\n\n        if (this.type !== \"root\") {\n            result = value.every(child => {\n                if (child.type === \"single\")  {\n                    return targets.some(target => child.value === target);\n                } else {\n                    return targets.some(target => {\n                        return isArray(target) && child.findArrayChild(target);\n                    });\n                }\n            });\n            // result = targets.every(target => {\n            //     if (isArray(target)) {\n            //         return value.some(child => {\n            //             return child.type === \"group\" && child.findArrayChild(target);\n            //         });\n            //     } else {\n            //         return map.get(target);\n            //     }\n            // });\n        }\n\n        if (result && targets.length === value.length) {\n            return this;\n        } else {\n            let childResult: GroupArrayChild | null = null;\n\n            value.some(child => {\n                if (child.type === \"group\") {\n                    childResult = child.findArrayChild(targets);\n\n                    return childResult;\n                }\n            });\n\n            return childResult;\n        }\n    }\n    public groupByPerfect(selected: Array<HTMLElement | SVGElement>) {\n        return this.value.filter(child => {\n            if (child.type !== \"single\") {\n                return child.compare(selected, -1);\n            }\n            return selected.indexOf(child.value) > -1;\n        });\n    }\n    public add(targets: TargetGroupsObject) {\n        const {\n            value,\n            map,\n        } = this;\n        const depth = this.depth;\n\n        targets.forEach(child => {\n            if (\"groupId\" in child) {\n                const group = new GroupArrayChild(this);\n\n                group.id = child.groupId;\n                group.depth = depth + 1;\n                value.push(group);\n\n                group.add(child.children);\n            } else if (isArray(child)) {\n                const group = new GroupArrayChild(this);\n\n                group.depth = depth + 1;\n                value.push(group);\n\n                group.add(child);\n            } else {\n                const element = \"current\" in child ? child.current : child;\n                const single = new GroupSingleChild(this, element!);\n\n                single.depth = depth + 1;\n                value.push(single);\n                map.set(element!, single);\n            }\n        });\n\n        value.forEach(child => {\n            if (child.type === \"single\") {\n                map.set(child.value, child);\n            } else {\n                child.map.forEach((nextChild, element) => {\n                    map.set(element, nextChild);\n                });\n            }\n        });\n        return parent;\n    }\n}\n","/* eslint-disable no-cond-assign */\nimport { deepFlat, isArray } from \"@daybrush/utils\";\nimport { GroupArrayChild, GroupSingleChild } from \"./groups\";\nimport { GroupChild, TargetGroupsObject, TargetGroupsType, TargetList } from \"./types\";\n\n\nexport function toTargetList(raw: GroupChild[]): TargetList {\n    function targets(childs: GroupChild[] = []) {\n        const arr: TargetGroupsType = [];\n\n        childs.forEach((child) => {\n            if (child.type === \"single\") {\n                arr.push(child.value);\n            } else {\n                arr.push(targets(child.value));\n            }\n        });\n\n        return arr;\n    }\n\n    return {\n        raw: () => raw,\n        targets() {\n            return targets(this.raw());\n        },\n        flatten() {\n            return deepFlat(this.targets());\n        },\n    };\n}\n\nexport class GroupManager extends GroupArrayChild {\n    public type = \"root\" as const;\n    private _targets:  Array<HTMLElement | SVGElement> = [];\n\n    constructor(\n        targetGroups: TargetGroupsType,\n        targets?: Array<HTMLElement | SVGElement>,\n    ) {\n        super();\n        this.set(targetGroups, targets);\n    }\n    public set(\n        targetGroups: TargetGroupsObject,\n        targets: Array<HTMLElement | SVGElement> = [],\n    ) {\n        this.map = new Map();\n        this.value = [];\n\n        const map = this.map;\n        const value = this.value;\n\n        this.add(targetGroups);\n        targets.forEach(target => {\n            if (map.has(target)) {\n                return;\n            }\n            const single = new GroupSingleChild(this, target);\n\n            single.depth = 1;\n            value.push(single);\n            map.set(target, single);\n        });\n        this._targets = targets;\n    }\n    public selectSubChilds(targets: TargetGroupsType, target: HTMLElement | SVGElement) {\n        const root = this;\n        const nextChild = root.findNextChild(target, targets, false);\n        const targetChild = root.map.get(target);\n\n        let nextChilds: GroupChild[] = [];\n\n        if (nextChild) {\n            nextChilds = [nextChild];\n        } else if (targetChild) {\n            nextChilds = [targetChild];\n        } else {\n            nextChilds = [];\n        }\n\n        return toTargetList(nextChilds);\n    }\n    public selectSingleChilds(\n        targets: TargetGroupsType,\n        added: Array<HTMLElement | SVGElement>,\n        removed: Array<HTMLElement | SVGElement>,\n    ) {\n        const nextTargets = [...targets];\n\n        // group can't be added, removed.\n        removed.forEach(element => {\n            const index = nextTargets.indexOf(element);\n\n            if (index > -1) {\n                nextTargets.splice(index, 1);\n            }\n        });\n\n        // Targets can be added one by one\n        added.forEach(element => {\n            nextTargets.push(element);\n        });\n\n        return toTargetList(this.toChilds(nextTargets));\n    }\n    public selectCompletedChilds(\n        targets: TargetGroupsType,\n        added: Array<HTMLElement | SVGElement>,\n        removed: Array<HTMLElement | SVGElement>,\n        continueSelect?: boolean,\n    ) {\n\n        const nextTargets = [...targets];\n        const startSelected = deepFlat(nextTargets);\n\n        // group can be added, removed.\n        removed.forEach(element => {\n            // Single Target\n            const index = nextTargets.indexOf(element);\n\n            if (index > -1) {\n                // single target or group\n                nextTargets.splice(index, 1);\n                return;\n            }\n            // Group Target\n            const removedChild = continueSelect\n                // Finds the nearest child for element and nextTargets.\n                ? this.findNextChild(element, nextTargets)\n                // Find the nearest exact child for element, all removed and nextTargets.\n                : this.findNextExactChild(element, removed, nextTargets);\n\n            if (removedChild) {\n                const groupIndex = nextTargets.findIndex(target => {\n                    return isArray(target) && removedChild.compare(target);\n                });\n\n                if (groupIndex > -1) {\n                    nextTargets.splice(groupIndex, 1);\n                }\n            }\n        });\n\n        added.forEach(element => {\n            const parentGroup = this._findParentGroup(element, startSelected);\n\n            const nextChild = parentGroup.findContainedChild(element);\n\n            if (nextChild?.type === \"group\") {\n                nextTargets.push(nextChild.toTargetGroups());\n                return;\n            }\n            nextTargets.push(element);\n        });\n        return toTargetList(this.toChilds(nextTargets));\n    }\n    public selectSameDepthChilds(\n        targets: TargetGroupsType,\n        added: Array<HTMLElement | SVGElement>,\n        removed: Array<HTMLElement | SVGElement>,\n        continueSelect?: boolean,\n    ) {\n        const nextTargets = [...targets];\n        const commonParent = this.findCommonParent(nextTargets);\n\n        removed.forEach(element => {\n            // Single Target\n            const index = nextTargets.indexOf(element);\n\n            if (index > -1) {\n                // single target or group\n                nextTargets.splice(index, 1);\n                return;\n            }\n            const removedChild = continueSelect\n                // Find the nearest exact child for element, all removed and nextTargets.\n                ? commonParent.findNextExactChild(element, removed, nextTargets)\n                // Finds the nearest child for element and nextTargets.\n                : commonParent.findNextChild(element, nextTargets, true);\n\n            if (removedChild) {\n                const groupIndex = nextTargets.findIndex(target => {\n                    return isArray(target) && removedChild.compare(target);\n                });\n\n                if (groupIndex > -1) {\n                    nextTargets.splice(groupIndex, 1);\n                }\n            }\n        });\n        const addedChildren = commonParent.groupByPerfect(added);\n\n        addedChildren.forEach(child => {\n            if (child.type === \"single\") {\n                nextTargets.push(child.value);\n            } else {\n                const groupIndex = nextTargets.findIndex(target => {\n                    return isArray(target) && child.compare(target, 1);\n                });\n\n                if (groupIndex > -1) {\n                    nextTargets.splice(groupIndex, 1);\n                }\n                nextTargets.push(child.toTargetGroups());\n            }\n        });\n        return toTargetList(this.toChilds(nextTargets));\n    }\n    public toChilds(targets: TargetGroupsType): GroupChild[] {\n        const childs: GroupChild[] = [];\n\n        targets.forEach(target => {\n            if (isArray(target)) {\n                const arrayChild = this.findArrayChild(target);\n\n                if (arrayChild) {\n                    childs.push(arrayChild);\n                }\n            } else {\n                const single = this.map.get(target);\n\n                if (single) {\n                    childs.push(single);\n                } else {\n                    childs.push(new GroupSingleChild(this, target));\n                }\n            }\n        });\n\n        return childs;\n    }\n    public toSingleChild(element: HTMLElement | SVGElement, isAuto: true): GroupSingleChild;\n    public toSingleChild(element: HTMLElement | SVGElement, isAuto?: boolean): GroupSingleChild | undefined;\n    public toSingleChild(element: HTMLElement | SVGElement, isAuto?: boolean): GroupSingleChild | undefined {\n        const value = this.map.get(element);\n\n        if (isAuto) {\n            return value || new GroupSingleChild(this, element);\n        }\n        return value;\n    }\n    public findArrayChildById(id: string): GroupArrayChild | null {\n        let value: GroupArrayChild | null = null;\n\n        this.value.some(function find(child: GroupChild) {\n            if (child.type !== \"single\") {\n                if (child.id === id) {\n                    value = child;\n                    return true;\n                } else {\n                    return child.value.some(find);\n                }\n            }\n        });\n\n        return value;\n    }\n    public group(targets: TargetGroupsType, flatten?: boolean): TargetGroupsType | null {\n        const commonParent = this.findCommonParent(targets);\n        const groupChilds = targets.map(target => {\n            if (isArray(target)) {\n                return this.findArrayChild(target);\n            }\n            return this.toSingleChild(target);\n        });\n        const isGroupable = groupChilds.every(child => child?.parent === commonParent);\n\n        if (!isGroupable) {\n            return null;\n        }\n        const group = new GroupArrayChild(commonParent);\n        const nextChilds = commonParent.value.filter(target => groupChilds.indexOf(target) === -1);\n\n        nextChilds.unshift(group);\n\n        group.add(flatten ? deepFlat(targets) : targets);\n        commonParent.value = nextChilds;\n\n        this.set(this.toTargetGroups(), this._targets);\n\n        return group.toTargetGroups();\n    }\n    public ungroup(targets: TargetGroupsType) {\n        if (targets.length === 1 && isArray(targets[0])) {\n            targets = targets[0];\n        }\n        const commonParent = this.findCommonParent(targets);\n        const groupChilds = targets.map(target => {\n            if (isArray(target)) {\n                return this.findArrayChild(target);\n            }\n            return this.toSingleChild(target);\n        });\n        const isGroupable = commonParent.value.every(child => groupChilds.indexOf(child) > -1);\n\n        if (!isGroupable || commonParent === this) {\n            // has no group\n            return null;\n        }\n\n        const parent = commonParent.parent;\n\n        if (!parent) {\n            return null;\n        }\n        const nextChilds = parent.value.filter(target => target !== commonParent);\n\n        nextChilds.push(...commonParent.value);\n        parent.value = nextChilds;\n\n        this.set(this.toTargetGroups(), this._targets);\n        return commonParent.toTargetGroups();\n    }\n    protected _findParentGroup(\n        element: HTMLElement | SVGElement,\n        range: Array<HTMLElement | SVGElement>,\n    ) {\n        if (!range.length) {\n            return this;\n        }\n        const single = this.map.get(element);\n\n        if (!single) {\n            return this;\n        }\n        let parent: GroupArrayChild | undefined = single.parent;\n\n        while (parent) {\n            if (range.some(element => parent!.contains(element))) {\n                return parent;\n            }\n            parent = parent.parent;\n        }\n        return this;\n    }\n}\n","import * as modules from \"./index\";\n\n\nmodule.exports = modules;\nexport * from \"./index\";\nexport default modules;\n"],"names":["Child","parent","type","depth","_scope","Object","defineProperty","get","__spreadArray","scope","id","GroupSingleChild","_super","__extends","value","_this","call","GroupArrayChild","apply","arguments","map","Map","compare","groups","checker","elements","deepFlat","elementsLength","length","mapSize","size","sizeDiff","count","filter","element","has","target","contains","some","child","findContainedChild","find","findExactChild","isArray","flatted","single","findCommonParent","targets","Infinity","childs","forEach","Math","min","firstChild","every","commonParent","findNextChild","range","isExact","toTargetGroups","nextChild","nextGroupChild","findNextExactChild","selected","findPureChild","childSelected","findNextPureChild","findArrayChild","result","childResult_1","groupByPerfect","indexOf","add","_a","group","groupId","push","children","current","set","toTargetList","raw","arr","flatten","GroupManager","targetGroups","_targets","selectSubChilds","root","targetChild","nextChilds","selectSingleChilds","added","removed","nextTargets","index","splice","toChilds","selectCompletedChilds","continueSelect","startSelected","removedChild","groupIndex","findIndex","parentGroup","_findParentGroup","selectSameDepthChilds","addedChildren","arrayChild","toSingleChild","isAuto","findArrayChildById","groupChilds","isGroupable","unshift","ungroup","module","exports","modules"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,QAAAA,KAAA;IAAA;IAAA,YAAA;MAII,SAAAA,KAAA,CAAmBC,MAAnB,EAA2C;QAAxB,IAAMA,CAAAA,MAAN,GAAAA,MAAA,CAAA;QAHZ,IAAIC,CAAAA,IAAJ,GAAoC,QAApC,CAAA;QACA,IAAKC,CAAAA,KAAL,GAAQ,CAAR,CAAA;QACG,IAAMC,CAAAA,MAAN,GAAmB,EAAnB,CAAA;;IAEN,IAAA,IAAIH,MAAJ,EAAY;IACR,MAAA,IAAA,CAAKE,KAAL,GAAaF,MAAM,CAACE,KAAP,GAAe,CAA5B,CAAA;IACH,KAAA;IACJ,GAAA;;IARL,EAAA,IAAA,OAAA,GAAA,KAAA,CAAA,SAAA,CAAA;IAUIE,EAAAA,MAAA,CAAAC,cAAA,CAAgB,OAAA,EAAA,OAAhB,EAAgB;IAAhBC,IAAAA,GAAA,EAAA,YAAA;UACI,IAAMN,MAAM,GAAG,IAAA,CAAKA,MAApB,CAAA;;UAEA,IAAI,CAACA,MAAD,IAAWA,MAAM,CAACC,IAAP,KAAgB,MAA/B,EAAuC;IACnC,QAAA,OAAO,EAAP,CAAA;IACH,OAAA;;UACD,OAAAM,aAAA,CAAAA,aAAA,CAAA,EAAA,EAAWP,MAAM,CAACQ,KAAlB,MAAA,CAAA,GAAyBR,MAAM,CAACS,GAAhC,EAAoC,KAApC,CAAA,CAAA;SANY;yBAAA;;OAAhB,CAAA,CAAA;IAQJ,EAAA,OAACV,KAAD,CAAA;IAAC,CAlBD,GAAA;;AAoBA,QAAAW,gBAAA;IAAA;IAAA,UAAAC,MAAA,EAAA;IAAsCC,EAAAA,SAAK,CAAAF,gBAAA,EAAAC,MAAA,CAAL,CAAA;;IAElC,EAAA,SAAYD,gBAAZ,CAAYV,MAAZ,EAA4Ca,KAA5C,EAA2E;QAA3E,IACIC,KAAA,GAAAH,MAAA,CAAAI,IAAA,CAAA,IAAA,EAAMf,MAAN,CAAA,IACH,IAFD,CAAA;;QAA4Cc,KAAK,CAAAD,KAAL,GAAAA,KAAA,CAAA;QADrCC,KAAI,CAAAb,IAAJ,GAAO,QAAP,CAAA;;IAGN,GAAA;;IACL,EAAA,OAACS,gBAAD,CAAA;IALA,CAAA,CAAsCX,KAAtC,EAAA;;AAQA,QAAAiB,eAAA;IAAA;IAAA,UAAAL,MAAA,EAAA;IAAqCC,EAAAA,SAAK,CAAAI,eAAA,EAAAL,MAAA,CAAL,CAAA;;IAArC,EAAA,SAAAK,eAAA,GAAA;IAAA,IAAA,IAgTCF,KAAA,GAAAH,MAAA,KAAA,IAAA,IAAAA,MAAA,CAAAM,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,IAAA,IAhTD,CAAA;;QACWJ,KAAI,CAAAb,IAAJ,GAAyB,OAAzB,CAAA;QACAa,KAAK,CAAAD,KAAL,GAAsB,EAAtB,CAAA;QACAC,KAAE,CAAAL,EAAF,GAAK,EAAL,CAAA;IACAK,IAAAA,KAAA,CAAAK,GAAA,GAAuD,IAAIC,GAAJ,EAAvD,CAAA;;IA4SV,GAAA;;IAhTD,EAAA,IAAA,OAAA,GAAA,eAAA,CAAA,SAAA,CAAA;;IAMW,EAAA,OAAA,CAAAC,OAAA,GAAP,UAAeC,MAAf,EAAyCC,OAAzC,EAAgE;IAAvB,IAAA,IAAAA,OAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,MAAAA,OAAuB,GAAA,CAAvB,CAAA;IAAuB,KAAA;;IAC5D,IAAA,IAAMC,QAAQ,GAAGC,cAAQ,CAACH,MAAD,CAAzB,CAAA;QACA,IAAMH,GAAG,GAAG,IAAA,CAAKA,GAAjB,CAAA;IACA,IAAA,IAAMO,cAAc,GAAGF,QAAQ,CAACG,MAAhC,CAAA;IACA,IAAA,IAAMC,OAAO,GAAGT,GAAG,CAACU,IAApB,CAAA;IACA,IAAA,IAAMC,QAAQ,GAAGF,OAAO,GAAGF,cAA3B,CAL4D;IAQ5D;IACA;;QACA,IAAMK,KAAK,GAAGP,QAAQ,CAACQ,MAAT,CAAgB,UAAAC,OAAA,EAAW;IAAA,MAAA,OAAAd,GAAG,CAACe,GAAJ,CAAQD,OAAR,CAAA,CAAA;IAAgB,KAA3C,EAA6CN,MAA3D,CAAA;;IAEA,IAAA,IAAKJ,OAAO,GAAG,CAAV,IAAeO,QAAQ,IAAI,CAA5B,IAAmCP,OAAO,KAAK,CAAZ,IAAiBO,QAAQ,KAAK,CAArE,EAAyE;UACrE,OAAOJ,cAAc,KAAKK,KAA1B,CAAA;SADJ,MAEO,IAAIR,OAAO,GAAG,CAAV,IAAeO,QAAQ,IAAI,CAA/B,EAAkC;UACrC,OAAOF,OAAO,KAAKG,KAAnB,CAAA;IACH,KAAA;;IACD,IAAA,OAAO,KAAP,CAAA;OAjBG,CAAA;;IAmBA,EAAA,OAAA,CAAGG,GAAH,GAAP,UAAWC,MAAX,EAA2C;IACvC,IAAA,OAAO,KAAKhB,GAAL,CAASe,GAAT,CAAaC,MAAb,CAAP,CAAA;OADG,CAAA;;IAGA,EAAA,OAAA,CAAQC,QAAR,GAAP,UAAgBH,OAAhB,EAAiD;IAC7C,IAAA,IAAI,IAAKC,CAAAA,GAAL,CAASD,OAAT,CAAJ,EAAuB;IACnB,MAAA,OAAO,IAAP,CAAA;IACH,KAAA;;IACD,IAAA,OAAO,KAAKpB,KAAL,CAAWwB,IAAX,CAAgB,UAAAC,KAAA,EAAK;IACxB,MAAA,IAAIA,KAAK,CAACrC,IAAN,KAAe,OAAnB,EAA4B;IACxB,QAAA,OAAOqC,KAAK,CAACF,QAAN,CAAeH,OAAf,CAAP,CAAA;IACH,OAFD,MAEO;IACH,QAAA,OAAO,KAAP,CAAA;IACH,OAAA;IACJ,KANM,CAAP,CAAA;OAJG,CAAA;;IAYA,EAAA,OAAA,CAAkBM,kBAAlB,GAAP,UAA0BN,OAA1B,EAA2D;IACvD,IAAA,OAAOO,UAAI,CAAC,IAAA,CAAK3B,KAAN,EAAa,UAAAyB,KAAA,EAAK;IACzB,MAAA,IAAIA,KAAK,CAACrC,IAAN,KAAe,QAAnB,EAA6B;IACzB,QAAA,OAAOqC,KAAK,CAACzB,KAAN,KAAgBoB,OAAvB,CAAA;IACH,OAFD,MAEO;IACH,QAAA,OAAOK,KAAK,CAACF,QAAN,CAAeH,OAAf,CAAP,CAAA;IACH,OAAA;IACJ,KANU,CAAX,CAAA;OADG,CAAA;IASP;;IAEG;;;IACI,EAAA,OAAA,CAAcQ,cAAd,GAAP,UAAsBN,MAAtB,EAAiD;QAC7C,IAAMhB,GAAG,GAAG,IAAA,CAAKA,GAAjB,CAAA;;IAEA,IAAA,IAAI,CAACuB,aAAO,CAACP,MAAD,CAAZ,EAAsB;IAClB,MAAA,OAAOhB,GAAG,CAACb,GAAJ,CAAQ6B,MAAR,CAAP,CAAA;IACH,KAAA;;IACD,IAAA,IAAMQ,OAAO,GAAGlB,cAAQ,CAACU,MAAD,CAAxB,CAAA;IACA,IAAA,IAAMR,MAAM,GAAGgB,OAAO,CAAChB,MAAvB,CAAA;QACA,IAAMiB,MAAM,GAAGzB,GAAG,CAACb,GAAJ,CAAQqC,OAAO,CAAC,CAAD,CAAf,CAAf,CAAA;;QAEA,IAAI,CAACC,MAAL,EAAa;IACT,MAAA,OAAA;IACH,KAAA;;IAED,IAAA,IAAI5C,MAAM,GAAgC4C,MAAM,CAAC5C,MAAjD,CAAA;;IAEA,IAAA,OAAOA,MAAP,EAAe;IACX,MAAA,IAAIA,MAAM,CAACmB,GAAP,CAAWU,IAAX,IAAmBF,MAAvB,EAA+B;IAC3B,QAAA,OAAO3B,MAAP,CAAA;IACH,OAAA;;UACDA,MAAM,GAAGA,MAAM,CAACA,MAAhB,CAAA;IACH,KAAA;;IACD,IAAA,OAAA;OAtBG,CAAA;;IAwBA,EAAA,OAAA,CAAgB6C,gBAAhB,GAAP,UAAwBC,OAAxB,EAAiD;QAAjD,IAkCChC,KAAA,GAAA,IAlCD,CAAA;;QACI,IAAIZ,KAAK,GAAG6C,QAAZ,CAAA;QACA,IAAIC,MAAM,GAAGF,OAAO,CAAC3B,GAAR,CAAY,UAAAgB,MAAA,EAAM;IAAI,MAAA,OAAArB,KAAI,CAAC2B,cAAL,CAAoBN,MAApB,CAAA,CAAA;IAA2B,KAAjD,CAAb,CAAA;IAEAa,IAAAA,MAAM,CAACC,OAAP,CAAe,UAAAX,KAAA,EAAK;UAChB,IAAI,CAACA,KAAL,EAAY;IACR,QAAA,OAAA;IACH,OAAA;;UACDpC,KAAK,GAAGgD,IAAI,CAACC,GAAL,CAASb,KAAK,CAACpC,KAAf,EAAsBA,KAAtB,CAAR,CAAA;SAJJ,CAAA,CAAA;;;IAQI,MAAA,EAAEA,KAAF,CAAA;IACA8C,MAAAA,MAAM,GAAGA,MAAM,CAAC7B,GAAP,CAAW,UAAAmB,KAAA,EAAK;YACrB,IAAItC,MAAM,GAA2BsC,KAArC,CAAA;;IAEA,QAAA,OAAOtC,MAAM,IAAIA,MAAM,CAACE,KAAP,KAAiBA,KAAlC,EAAyC;cACrCF,MAAM,GAAGA,MAAM,CAACA,MAAhB,CAAA;IACH,SAAA;;IAED,QAAA,OAAOA,MAAP,CAAA;IACH,OARQ,CAAT,CAAA;UASA,IAAMoD,UAAU,GAAGJ,MAAM,CAACR,IAAP,CAAY,UAAAF,KAAA,EAAK;IAAI,QAAA,OAAAA,KAAA,CAAA;IAAK,OAA1B,CAAnB,CAAA;;UAEA,IAAI,CAACc,UAAL,EAAiB;;;;IAEhB,OAAA;;IACD,MAAA,IAAIJ,MAAM,CAACK,KAAP,CAAa,UAAAf,KAAA,EAAS;IAAA,QAAA,OAAA,CAACA,KAAD,IAAUA,KAAK,KAAKc,UAApB,CAAA;IAA8B,OAApD,CAAJ,EAA2D;;IAE1D,OAAA;;;;;IAlBL,IAAA,OAAOlD,KAAP,EAAY;;;;;IAmBX,KAAA;;QACD,IAAMoD,YAAY,GAAGN,MAAM,CAACR,IAAP,CAAY,UAAAF,KAAA,EAAK;IAAI,MAAA,OAAAA,KAAA,CAAA;IAAK,KAA1B,CAArB,CAAA;QAEA,OAAOgB,YAAY,IAAI,IAAvB,CAAA;OAjCG,CAAA;;MAmCA,OAAAC,CAAAA,aAAA,GAAP,UACIpB,MADJ,EAEIqB,KAFJ,EAGIC,OAHJ,EAGkB;QAHlB,IA+BC3C,KAAA,GAAA,IA/BD,CAAA;;IAEI,IAAA,IAAA0C,KAAA,KAAA,KAAA,CAAA,EAAA;UAAAA,KAAA,GAA0B,IAAKE,CAAAA,cAAL,EAA1B,CAAA;IAA+C,KAAA;;IAC/C,IAAA,IAAAD,OAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,MAAAA,OAAc,GAAA,IAAd,CAAA;IAAc,KAAA;;QAEd,IAAIE,SAAS,GAA2B,IAAxC,CAAA;IAEA,IAAA,IAAMhC,MAAM,GAAG6B,KAAK,CAAC7B,MAArB,CAAA;IAEA6B,IAAAA,KAAK,CAACnB,IAAN,CAAW,UAAAC,KAAA,EAAK;UACZ,IAAI,CAACmB,OAAD,IAAY9B,MAAM,KAAK,CAAvB,IAA4Be,aAAO,CAACJ,KAAD,CAAvC,EAAgD;YAC5CqB,SAAS,GAAG7C,KAAI,CAACyC,aAAL,CAAmBpB,MAAnB,EAA2BG,KAA3B,CAAZ,CAAA;IACA,QAAA,OAAOqB,SAAP,CAAA;IACH,OAAA;;IAGD,MAAA,IAAMC,cAAc,GAAG9C,KAAI,CAAC2B,cAAL,CAAoBH,KAApB,CAAvB,CAAA;;UAEA,IAAI,CAACsB,cAAL,EAAqB;IACjB,QAAA,OAAA;IACH,OAAA;;UAED,IAAI,KAAA,IAASA,cAAb,EAA6B;YACzB,IAAIA,cAAc,CAACzC,GAAf,CAAmBe,GAAnB,CAAuBC,MAAvB,CAAJ,EAAoC;IAChCwB,UAAAA,SAAS,GAAGC,cAAZ,CAAA;IACA,UAAA,OAAO,IAAP,CAAA;IACH,SAAA;IACJ,OAAA;SAlBL,CAAA,CAAA;IAqBA,IAAA,OAAOD,SAAP,CAAA;OA9BG,CAAA;;MAgCA,OAAAE,CAAAA,kBAAA,GAAP,UACI1B,MADJ,EAEI2B,QAFJ,EAGIN,KAHJ,EAGmD;IAA/C,IAAA,IAAAA,KAAA,KAAA,KAAA,CAAA,EAAA;UAAAA,KAAA,GAA0B,IAAKE,CAAAA,cAAL,EAA1B,CAAA;IAA+C,KAAA;IAG/C;;;QACA,IAAMC,SAAS,GAAG,IAAA,CAAKJ,aAAL,CAAmBpB,MAAnB,EAA2BqB,KAA3B,EAAkC,IAAlC,CAAlB,CAAA;;QAEA,IAAI,CAACG,SAAL,EAAgB;IACZ,MAAA,OAAO,IAAP,CAAA;IACH,KAAA;;QAED,IAAIA,SAAS,CAACtC,OAAV,CAAkByC,QAAlB,EAA4B,CAAC,CAA7B,CAAJ,EAAqC;IACjC,MAAA,OAAOH,SAAP,CAAA;IACH,KAAA;;IACD,IAAA,OAAO,IAAP,CAAA;OAhBG,CAAA;IAkBP;;IAEG;;;IACI,EAAA,OAAA,CAAAI,aAAA,GAAP,UACI5B,MADJ,EAEIqB,KAFJ,EAE0C;QAF1C,IAuBC1C,KAAA,GAAA,IAvBD,CAAA;;QAII,IAAI8C,cAAc,GAA2B,IAA7C,CAAA;QAEA,IAAMI,aAAa,GAAGR,KAAK,CAACxB,MAAN,CAAa,UAAAC,OAAA,EAAO;IAAI,MAAA,OAAAnB,KAAI,CAACoB,GAAL,CAASD,OAAT,CAAA,CAAA;IAAiB,KAAzC,CAAtB,CAAA;;IAEA,IAAA,IAAI,CAAC+B,aAAa,CAACrC,MAAnB,EAA2B;IACvB,MAAA,OAAO,IAAP,CAAA;IACH,KAAA;;IAED,IAAA,IAAA,CAAKd,KAAL,CAAWwB,IAAX,CAAgB,UAAAsB,SAAA,EAAS;IACrB,MAAA,IAAIA,SAAS,CAAC1D,IAAV,KAAmB,QAAnB,IAA+B0D,SAAS,CAACzB,GAAV,CAAcC,MAAd,CAAnC,EAA0D;YACtDyB,cAAc,GAAGD,SAAS,CAACI,aAAV,CAAwB5B,MAAxB,EAAgC6B,aAAhC,CAAjB,CAAA;;IAEA,QAAA,IAAIJ,cAAJ,EAAoB;IAChB,UAAA,OAAO,IAAP,CAAA;IACH,SAAA;IACJ,OAAA;SAPL,CAAA,CAAA;IAUA,IAAA,OAAOA,cAAP,CAAA;OAtBG,CAAA;;IAwBA,EAAA,OAAA,CAAAK,iBAAA,GAAP,UACI9B,MADJ,EAEIqB,KAFJ,EAE0C;IAEtC,IAAA,IAAMG,SAAS,GAAG,IAAA,CAAKJ,aAAL,CAAmBpB,MAAnB,CAAlB,CAAA;;IAEA,IAAA,IAAIwB,SAAJ,EAAe;IACX,MAAA,OAAOA,SAAS,CAACI,aAAV,CAAwB5B,MAAxB,EAAgCqB,KAAhC,CAAP,CAAA;IACH,KAAA;;IACD,IAAA,OAAO,IAAP,CAAA;OATG,CAAA;;MAWA,OAAAE,CAAAA,cAAA,GAAP,YAAA;IACI,IAAA,OAAO,KAAK7C,KAAL,CAAWM,GAAX,CAAe,UAAAmB,KAAA,EAAK;IACvB,MAAA,IAAIA,KAAK,CAACrC,IAAN,KAAe,QAAnB,EAA6B;YACzB,OAAOqC,KAAK,CAACzB,KAAb,CAAA;IACH,OAFD,MAEO;YACH,OAAOyB,KAAK,CAACoB,cAAN,EAAP,CAAA;IACH,OAAA;IACJ,KANM,CAAP,CAAA;OADG,CAAA;;IASA,EAAA,OAAA,CAAcQ,cAAd,GAAP,UAAsBpB,OAAtB,EAA+C;QAEvC,IAAAjC,KAAK,GACL,IAAA,CAAIA,KADJ,CAAA;QAGJ,IAAIsD,MAAM,GAAG,KAAb,CAAA;;IAEA,IAAA,IAAI,IAAKlE,CAAAA,IAAL,KAAc,MAAlB,EAA0B;IACtBkE,MAAAA,MAAM,GAAGtD,KAAK,CAACwC,KAAN,CAAY,UAAAf,KAAA,EAAK;IACtB,QAAA,IAAIA,KAAK,CAACrC,IAAN,KAAe,QAAnB,EAA8B;IAC1B,UAAA,OAAO6C,OAAO,CAACT,IAAR,CAAa,UAAAF,MAAA,EAAU;IAAA,YAAA,OAAAG,KAAK,CAACzB,KAAN,KAAgBsB,MAAhB,CAAA;IAAsB,WAA7C,CAAP,CAAA;IACH,SAFD,MAEO;IACH,UAAA,OAAOW,OAAO,CAACT,IAAR,CAAa,UAAAF,MAAA,EAAM;gBACtB,OAAOO,aAAO,CAACP,MAAD,CAAP,IAAmBG,KAAK,CAAC4B,cAAN,CAAqB/B,MAArB,CAA1B,CAAA;IACH,WAFM,CAAP,CAAA;IAGH,SAAA;WAPI,CAAT,CADsB;IAWtB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACH,KAAA;;QAED,IAAIgC,MAAM,IAAIrB,OAAO,CAACnB,MAAR,KAAmBd,KAAK,CAACc,MAAvC,EAA+C;IAC3C,MAAA,OAAO,IAAP,CAAA;IACH,KAFD,MAEO;UACH,IAAIyC,aAAW,GAA2B,IAA1C,CAAA;IAEAvD,MAAAA,KAAK,CAACwB,IAAN,CAAW,UAAAC,KAAA,EAAK;IACZ,QAAA,IAAIA,KAAK,CAACrC,IAAN,KAAe,OAAnB,EAA4B;IACxBmE,UAAAA,aAAW,GAAG9B,KAAK,CAAC4B,cAAN,CAAqBpB,OAArB,CAAd,CAAA;IAEA,UAAA,OAAOsB,aAAP,CAAA;IACH,SAAA;WALL,CAAA,CAAA;IAQA,MAAA,OAAOA,aAAP,CAAA;IACH,KAAA;OA1CE,CAAA;;IA4CA,EAAA,OAAA,CAAcC,cAAd,GAAP,UAAsBP,QAAtB,EAA+D;IAC3D,IAAA,OAAO,KAAKjD,KAAL,CAAWmB,MAAX,CAAkB,UAAAM,KAAA,EAAK;IAC1B,MAAA,IAAIA,KAAK,CAACrC,IAAN,KAAe,QAAnB,EAA6B;YACzB,OAAOqC,KAAK,CAACjB,OAAN,CAAcyC,QAAd,EAAwB,CAAC,CAAzB,CAAP,CAAA;IACH,OAAA;;UACD,OAAOA,QAAQ,CAACQ,OAAT,CAAiBhC,KAAK,CAACzB,KAAvB,CAAgC,GAAA,CAAC,CAAxC,CAAA;IACH,KALM,CAAP,CAAA;OADG,CAAA;;IAQA,EAAA,OAAA,CAAG0D,GAAH,GAAP,UAAWzB,OAAX,EAAsC;QAAtC,IA2CChC,KAAA,GAAA,IA3CD,CAAA;;QACU,IAAA0D,EAAA,GAGF,IAHE;IAAA,QACF3D,KAAK,WADH;IAAA,QAEFM,GAAG,SAFD,CAAA;;QAIN,IAAMjB,KAAK,GAAG,IAAA,CAAKA,KAAnB,CAAA;IAEA4C,IAAAA,OAAO,CAACG,OAAR,CAAgB,UAAAX,KAAA,EAAK;UACjB,IAAI,SAAA,IAAaA,KAAjB,EAAwB;IACpB,QAAA,IAAMmC,KAAK,GAAG,IAAIzD,eAAJ,CAAoBF,KAApB,CAAd,CAAA;IAEA2D,QAAAA,KAAK,CAAChE,EAAN,GAAW6B,KAAK,CAACoC,OAAjB,CAAA;IACAD,QAAAA,KAAK,CAACvE,KAAN,GAAcA,KAAK,GAAG,CAAtB,CAAA;YACAW,KAAK,CAAC8D,IAAN,CAAWF,KAAX,CAAA,CAAA;IAEAA,QAAAA,KAAK,CAACF,GAAN,CAAUjC,KAAK,CAACsC,QAAhB,CAAA,CAAA;IACH,OARD,MAQO,IAAIlC,aAAO,CAACJ,KAAD,CAAX,EAAoB;IACvB,QAAA,IAAMmC,KAAK,GAAG,IAAIzD,eAAJ,CAAoBF,KAApB,CAAd,CAAA;IAEA2D,QAAAA,KAAK,CAACvE,KAAN,GAAcA,KAAK,GAAG,CAAtB,CAAA;YACAW,KAAK,CAAC8D,IAAN,CAAWF,KAAX,CAAA,CAAA;YAEAA,KAAK,CAACF,GAAN,CAAUjC,KAAV,CAAA,CAAA;IACH,OAPM,MAOA;YACH,IAAML,OAAO,GAAG,SAAaK,IAAAA,KAAb,GAAqBA,KAAK,CAACuC,OAA3B,GAAqCvC,KAArD,CAAA;YACA,IAAMM,MAAM,GAAG,IAAIlC,gBAAJ,CAAqBI,KAArB,EAA2BmB,OAA3B,CAAf,CAAA;IAEAW,QAAAA,MAAM,CAAC1C,KAAP,GAAeA,KAAK,GAAG,CAAvB,CAAA;YACAW,KAAK,CAAC8D,IAAN,CAAW/B,MAAX,CAAA,CAAA;IACAzB,QAAAA,GAAG,CAAC2D,GAAJ,CAAQ7C,OAAR,EAAkBW,MAAlB,CAAA,CAAA;IACH,OAAA;SAvBL,CAAA,CAAA;IA0BA/B,IAAAA,KAAK,CAACoC,OAAN,CAAc,UAAAX,KAAA,EAAK;IACf,MAAA,IAAIA,KAAK,CAACrC,IAAN,KAAe,QAAnB,EAA6B;IACzBkB,QAAAA,GAAG,CAAC2D,GAAJ,CAAQxC,KAAK,CAACzB,KAAd,EAAqByB,KAArB,CAAA,CAAA;IACH,OAFD,MAEO;YACHA,KAAK,CAACnB,GAAN,CAAU8B,OAAV,CAAkB,UAACU,SAAD,EAAY1B,OAAZ,EAAmB;IACjCd,UAAAA,GAAG,CAAC2D,GAAJ,CAAQ7C,OAAR,EAAiB0B,SAAjB,CAAA,CAAA;aADJ,CAAA,CAAA;IAGH,OAAA;SAPL,CAAA,CAAA;IASA,IAAA,OAAO3D,MAAP,CAAA;OA1CG,CAAA;;IA4CX,EAAA,OAACgB,eAAD,CAAA;IAhTA,CAAA,CAAqCjB,KAArC;;ICzBM,SAAUgF,YAAV,CAAuBC,GAAvB,EAAwC;MAC1C,SAASlC,OAAT,CAAiBE,MAAjB,EAA0C;IAAzB,IAAA,IAAAA,MAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,MAAAA,MAAyB,GAAA,EAAzB,CAAA;IAAyB,KAAA;;QACtC,IAAMiC,GAAG,GAAqB,EAA9B,CAAA;IAEAjC,IAAAA,MAAM,CAACC,OAAP,CAAe,UAACX,KAAD,EAAM;IACjB,MAAA,IAAIA,KAAK,CAACrC,IAAN,KAAe,QAAnB,EAA6B;IACzBgF,QAAAA,GAAG,CAACN,IAAJ,CAASrC,KAAK,CAACzB,KAAf,CAAA,CAAA;IACH,OAFD,MAEO;YACHoE,GAAG,CAACN,IAAJ,CAAS7B,OAAO,CAACR,KAAK,CAACzB,KAAP,CAAhB,CAAA,CAAA;IACH,OAAA;SALL,CAAA,CAAA;IAQA,IAAA,OAAOoE,GAAP,CAAA;IACH,GAAA;;MAED,OAAO;IACHD,IAAAA,GAAG,EAAE,YAAA;IAAM,MAAA,OAAAA,GAAA,CAAA;SADR;IAEHlC,IAAAA,OAAO,EAAA,YAAA;IACH,MAAA,OAAOA,OAAO,CAAC,IAAKkC,CAAAA,GAAL,EAAD,CAAd,CAAA;SAHD;IAKHE,IAAAA,OAAO,EAAA,YAAA;IACH,MAAA,OAAOzD,cAAQ,CAAC,IAAKqB,CAAAA,OAAL,EAAD,CAAf,CAAA;IACH,KAAA;OAPL,CAAA;IASH,CAAA;;AAED,QAAAqC,YAAA;IAAA;IAAA,UAAAxE,MAAA,EAAA;IAAkCC,EAAAA,SAAe,CAAAuE,YAAA,EAAAxE,MAAA,CAAf,CAAA;;IAI9B,EAAA,SACIwE,YADJ,CACIC,YADJ,EAEItC,OAFJ,EAE6C;QAF7C,IAAAhC,KAAA,GAIIH,WAAA,KAAA,KAEH,IAND,CAAA;;QAHOG,KAAI,CAAAb,IAAJ,GAAO,MAAP,CAAA;QACCa,KAAQ,CAAAuE,QAAR,GAA6C,EAA7C,CAAA;;IAOJvE,IAAAA,KAAI,CAACgE,GAAL,CAASM,YAAT,EAAuBtC,OAAvB,CAAA,CAAA;;;IACH,GAAA;;IAVL,EAAA,IAAA,OAAA,GAAA,YAAA,CAAA,SAAA,CAAA;;IAWW,EAAA,OAAA,CAAAgC,GAAA,GAAP,UACIM,YADJ,EAEItC,OAFJ,EAEiD;QAFjD,IAsBChC,KAAA,GAAA,IAtBD,CAAA;;IAEI,IAAA,IAAAgC,OAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,MAAAA,OAA6C,GAAA,EAA7C,CAAA;IAA6C,KAAA;;IAE7C,IAAA,IAAA,CAAK3B,GAAL,GAAW,IAAIC,GAAJ,EAAX,CAAA;QACA,IAAKP,CAAAA,KAAL,GAAa,EAAb,CAAA;QAEA,IAAMM,GAAG,GAAG,IAAA,CAAKA,GAAjB,CAAA;QACA,IAAMN,KAAK,GAAG,IAAA,CAAKA,KAAnB,CAAA;QAEA,IAAK0D,CAAAA,GAAL,CAASa,YAAT,CAAA,CAAA;IACAtC,IAAAA,OAAO,CAACG,OAAR,CAAgB,UAAAd,MAAA,EAAM;IAClB,MAAA,IAAIhB,GAAG,CAACe,GAAJ,CAAQC,MAAR,CAAJ,EAAqB;IACjB,QAAA,OAAA;IACH,OAAA;;UACD,IAAMS,MAAM,GAAG,IAAIlC,gBAAJ,CAAqBI,KAArB,EAA2BqB,MAA3B,CAAf,CAAA;UAEAS,MAAM,CAAC1C,KAAP,GAAe,CAAf,CAAA;UACAW,KAAK,CAAC8D,IAAN,CAAW/B,MAAX,CAAA,CAAA;IACAzB,MAAAA,GAAG,CAAC2D,GAAJ,CAAQ3C,MAAR,EAAgBS,MAAhB,CAAA,CAAA;SARJ,CAAA,CAAA;QAUA,IAAKyC,CAAAA,QAAL,GAAgBvC,OAAhB,CAAA;OArBG,CAAA;;IAuBA,EAAA,OAAA,CAAAwC,eAAA,GAAP,UAAuBxC,OAAvB,EAAkDX,MAAlD,EAAkF;QAC9E,IAAMoD,IAAI,GAAG,IAAb,CAAA;QACA,IAAM5B,SAAS,GAAG4B,IAAI,CAAChC,aAAL,CAAmBpB,MAAnB,EAA2BW,OAA3B,EAAoC,KAApC,CAAlB,CAAA;QACA,IAAM0C,WAAW,GAAGD,IAAI,CAACpE,GAAL,CAASb,GAAT,CAAa6B,MAAb,CAApB,CAAA;QAEA,IAAIsD,UAAU,GAAiB,EAA/B,CAAA;;IAEA,IAAA,IAAI9B,SAAJ,EAAe;UACX8B,UAAU,GAAG,CAAC9B,SAAD,CAAb,CAAA;SADJ,MAEO,IAAI6B,WAAJ,EAAiB;UACpBC,UAAU,GAAG,CAACD,WAAD,CAAb,CAAA;IACH,KAFM,MAEA;IACHC,MAAAA,UAAU,GAAG,EAAb,CAAA;IACH,KAAA;;QAED,OAAOV,YAAY,CAACU,UAAD,CAAnB,CAAA;OAfG,CAAA;;MAiBA,OAAAC,CAAAA,kBAAA,GAAP,UACI5C,OADJ,EAEI6C,KAFJ,EAGIC,OAHJ,EAG4C;QAExC,IAAMC,WAAW,GAAAtF,aAAA,CAAA,EAAA,EAAOuC,OAAP,EAAc,IAAd,CAAjB,CAFwC;;;IAKxC8C,IAAAA,OAAO,CAAC3C,OAAR,CAAgB,UAAAhB,OAAA,EAAO;IACnB,MAAA,IAAM6D,KAAK,GAAGD,WAAW,CAACvB,OAAZ,CAAoBrC,OAApB,CAAd,CAAA;;IAEA,MAAA,IAAI6D,KAAK,GAAG,CAAC,CAAb,EAAgB;IACZD,QAAAA,WAAW,CAACE,MAAZ,CAAmBD,KAAnB,EAA0B,CAA1B,CAAA,CAAA;IACH,OAAA;IACJ,KAND,EALwC;;IAcxCH,IAAAA,KAAK,CAAC1C,OAAN,CAAc,UAAAhB,OAAA,EAAO;UACjB4D,WAAW,CAAClB,IAAZ,CAAiB1C,OAAjB,CAAA,CAAA;SADJ,CAAA,CAAA;IAIA,IAAA,OAAO8C,YAAY,CAAC,IAAA,CAAKiB,QAAL,CAAcH,WAAd,CAAD,CAAnB,CAAA;OArBG,CAAA;;MAuBA,OAAqBI,CAAAA,qBAArB,GAAP,UACInD,OADJ,EAEI6C,KAFJ,EAGIC,OAHJ,EAIIM,cAJJ,EAI4B;QAJ5B,IAkDCpF,KAAA,GAAA,IAlDD,CAAA;;QAOI,IAAM+E,WAAW,GAAAtF,aAAA,CAAA,EAAA,EAAOuC,OAAP,EAAc,IAAd,CAAjB,CAAA;;IACA,IAAA,IAAMqD,aAAa,GAAG1E,cAAQ,CAACoE,WAAD,CAA9B,CAJwB;;IAOxBD,IAAAA,OAAO,CAAC3C,OAAR,CAAgB,UAAAhB,OAAA,EAAO;IACnB;IACA,MAAA,IAAM6D,KAAK,GAAGD,WAAW,CAACvB,OAAZ,CAAoBrC,OAApB,CAAd,CAAA;;IAEA,MAAA,IAAI6D,KAAK,GAAG,CAAC,CAAb,EAAgB;IACZ;IACAD,QAAAA,WAAW,CAACE,MAAZ,CAAmBD,KAAnB,EAA0B,CAA1B,CAAA,CAAA;IACA,QAAA,OAAA;IACH,OARkB;;;UAUnB,IAAMM,YAAY,GAAGF,cAAc;YAE7BpF,KAAI,CAACyC,aAAL,CAAmBtB,OAAnB,EAA4B4D,WAA5B,CAF6B;YAI7B/E,KAAI,CAAC+C,kBAAL,CAAwB5B,OAAxB,EAAiC2D,OAAjC,EAA0CC,WAA1C,CAJN,CAAA;;IAMA,MAAA,IAAIO,YAAJ,EAAkB;YACd,IAAMC,UAAU,GAAGR,WAAW,CAACS,SAAZ,CAAsB,UAAAnE,MAAA,EAAM;cAC3C,OAAOO,aAAO,CAACP,MAAD,CAAP,IAAmBiE,YAAY,CAAC/E,OAAb,CAAqBc,MAArB,CAA1B,CAAA;IACH,SAFkB,CAAnB,CAAA;;IAIA,QAAA,IAAIkE,UAAU,GAAG,CAAC,CAAlB,EAAqB;IACjBR,UAAAA,WAAW,CAACE,MAAZ,CAAmBM,UAAnB,EAA+B,CAA/B,CAAA,CAAA;IACH,SAAA;IACJ,OAAA;SAxBL,CAAA,CAAA;IA2BAV,IAAAA,KAAK,CAAC1C,OAAN,CAAc,UAAAhB,OAAA,EAAO;UACjB,IAAMsE,WAAW,GAAGzF,KAAI,CAAC0F,gBAAL,CAAsBvE,OAAtB,EAA+BkE,aAA/B,CAApB,CAAA;;IAEA,MAAA,IAAMxC,SAAS,GAAG4C,WAAW,CAAChE,kBAAZ,CAA+BN,OAA/B,CAAlB,CAAA;;IAEA,MAAA,IAAI,CAAA0B,SAAS,KAAA,IAAT,IAAAA,SAAS,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAAA,SAAS,CAAE1D,IAAX,MAAoB,OAAxB,EAAiC;IAC7B4F,QAAAA,WAAW,CAAClB,IAAZ,CAAiBhB,SAAS,CAACD,cAAV,EAAjB,CAAA,CAAA;IACA,QAAA,OAAA;IACH,OAAA;;UACDmC,WAAW,CAAClB,IAAZ,CAAiB1C,OAAjB,CAAA,CAAA;SATJ,CAAA,CAAA;IAWA,IAAA,OAAO8C,YAAY,CAAC,IAAA,CAAKiB,QAAL,CAAcH,WAAd,CAAD,CAAnB,CAAA;OAjDG,CAAA;;MAmDA,OAAqBY,CAAAA,qBAArB,GAAP,UACI3D,OADJ,EAEI6C,KAFJ,EAGIC,OAHJ,EAIIM,cAJJ,EAI4B;QAExB,IAAML,WAAW,GAAAtF,aAAA,CAAA,EAAA,EAAOuC,OAAP,EAAc,IAAd,CAAjB,CAAA;;IACA,IAAA,IAAMQ,YAAY,GAAG,IAAA,CAAKT,gBAAL,CAAsBgD,WAAtB,CAArB,CAAA;IAEAD,IAAAA,OAAO,CAAC3C,OAAR,CAAgB,UAAAhB,OAAA,EAAO;IACnB;IACA,MAAA,IAAM6D,KAAK,GAAGD,WAAW,CAACvB,OAAZ,CAAoBrC,OAApB,CAAd,CAAA;;IAEA,MAAA,IAAI6D,KAAK,GAAG,CAAC,CAAb,EAAgB;IACZ;IACAD,QAAAA,WAAW,CAACE,MAAZ,CAAmBD,KAAnB,EAA0B,CAA1B,CAAA,CAAA;IACA,QAAA,OAAA;IACH,OAAA;;UACD,IAAMM,YAAY,GAAGF,cAAc;YAE7B5C,YAAY,CAACO,kBAAb,CAAgC5B,OAAhC,EAAyC2D,OAAzC,EAAkDC,WAAlD,CAF6B;YAI7BvC,YAAY,CAACC,aAAb,CAA2BtB,OAA3B,EAAoC4D,WAApC,EAAiD,IAAjD,CAJN,CAAA;;IAMA,MAAA,IAAIO,YAAJ,EAAkB;YACd,IAAMC,UAAU,GAAGR,WAAW,CAACS,SAAZ,CAAsB,UAAAnE,MAAA,EAAM;cAC3C,OAAOO,aAAO,CAACP,MAAD,CAAP,IAAmBiE,YAAY,CAAC/E,OAAb,CAAqBc,MAArB,CAA1B,CAAA;IACH,SAFkB,CAAnB,CAAA;;IAIA,QAAA,IAAIkE,UAAU,GAAG,CAAC,CAAlB,EAAqB;IACjBR,UAAAA,WAAW,CAACE,MAAZ,CAAmBM,UAAnB,EAA+B,CAA/B,CAAA,CAAA;IACH,SAAA;IACJ,OAAA;SAvBL,CAAA,CAAA;IAyBA,IAAA,IAAMK,aAAa,GAAGpD,YAAY,CAACe,cAAb,CAA4BsB,KAA5B,CAAtB,CAAA;IAEAe,IAAAA,aAAa,CAACzD,OAAd,CAAsB,UAAAX,KAAA,EAAK;IACvB,MAAA,IAAIA,KAAK,CAACrC,IAAN,KAAe,QAAnB,EAA6B;IACzB4F,QAAAA,WAAW,CAAClB,IAAZ,CAAiBrC,KAAK,CAACzB,KAAvB,CAAA,CAAA;IACH,OAFD,MAEO;YACH,IAAMwF,UAAU,GAAGR,WAAW,CAACS,SAAZ,CAAsB,UAAAnE,MAAA,EAAM;IAC3C,UAAA,OAAOO,aAAO,CAACP,MAAD,CAAP,IAAmBG,KAAK,CAACjB,OAAN,CAAcc,MAAd,EAAsB,CAAtB,CAA1B,CAAA;IACH,SAFkB,CAAnB,CAAA;;IAIA,QAAA,IAAIkE,UAAU,GAAG,CAAC,CAAlB,EAAqB;IACjBR,UAAAA,WAAW,CAACE,MAAZ,CAAmBM,UAAnB,EAA+B,CAA/B,CAAA,CAAA;IACH,SAAA;;IACDR,QAAAA,WAAW,CAAClB,IAAZ,CAAiBrC,KAAK,CAACoB,cAAN,EAAjB,CAAA,CAAA;IACH,OAAA;SAZL,CAAA,CAAA;IAcA,IAAA,OAAOqB,YAAY,CAAC,IAAA,CAAKiB,QAAL,CAAcH,WAAd,CAAD,CAAnB,CAAA;OAlDG,CAAA;;IAoDA,EAAA,OAAA,CAAQG,QAAR,GAAP,UAAgBlD,OAAhB,EAAyC;QAAzC,IAsBChC,KAAA,GAAA,IAtBD,CAAA;;QACI,IAAMkC,MAAM,GAAiB,EAA7B,CAAA;IAEAF,IAAAA,OAAO,CAACG,OAAR,CAAgB,UAAAd,MAAA,EAAM;IAClB,MAAA,IAAIO,aAAO,CAACP,MAAD,CAAX,EAAqB;IACjB,QAAA,IAAMwE,UAAU,GAAG7F,KAAI,CAACoD,cAAL,CAAoB/B,MAApB,CAAnB,CAAA;;IAEA,QAAA,IAAIwE,UAAJ,EAAgB;cACZ3D,MAAM,CAAC2B,IAAP,CAAYgC,UAAZ,CAAA,CAAA;IACH,SAAA;IACJ,OAND,MAMO;YACH,IAAM/D,MAAM,GAAG9B,KAAI,CAACK,GAAL,CAASb,GAAT,CAAa6B,MAAb,CAAf,CAAA;;IAEA,QAAA,IAAIS,MAAJ,EAAY;cACRI,MAAM,CAAC2B,IAAP,CAAY/B,MAAZ,CAAA,CAAA;IACH,SAFD,MAEO;cACHI,MAAM,CAAC2B,IAAP,CAAY,IAAIjE,gBAAJ,CAAqBI,KAArB,EAA2BqB,MAA3B,CAAZ,CAAA,CAAA;IACH,SAAA;IACJ,OAAA;SAfL,CAAA,CAAA;IAkBA,IAAA,OAAOa,MAAP,CAAA;OArBG,CAAA;;IAyBA,EAAA,OAAA,CAAA4D,aAAA,GAAP,UAAqB3E,OAArB,EAAwD4E,MAAxD,EAAwE;QACpE,IAAMhG,KAAK,GAAG,IAAKM,CAAAA,GAAL,CAASb,GAAT,CAAa2B,OAAb,CAAd,CAAA;;IAEA,IAAA,IAAI4E,MAAJ,EAAY;UACR,OAAOhG,KAAK,IAAI,IAAIH,gBAAJ,CAAqB,IAArB,EAA2BuB,OAA3B,CAAhB,CAAA;IACH,KAAA;;IACD,IAAA,OAAOpB,KAAP,CAAA;OANG,CAAA;;IAQA,EAAA,OAAA,CAAkBiG,kBAAlB,GAAP,UAA0BrG,EAA1B,EAAoC;QAChC,IAAII,KAAK,GAA2B,IAApC,CAAA;QAEA,IAAKA,CAAAA,KAAL,CAAWwB,IAAX,CAAgB,SAASG,IAAT,CAAcF,KAAd,EAA+B;IAC3C,MAAA,IAAIA,KAAK,CAACrC,IAAN,KAAe,QAAnB,EAA6B;IACzB,QAAA,IAAIqC,KAAK,CAAC7B,EAAN,KAAaA,EAAjB,EAAqB;IACjBI,UAAAA,KAAK,GAAGyB,KAAR,CAAA;IACA,UAAA,OAAO,IAAP,CAAA;IACH,SAHD,MAGO;IACH,UAAA,OAAOA,KAAK,CAACzB,KAAN,CAAYwB,IAAZ,CAAiBG,IAAjB,CAAP,CAAA;IACH,SAAA;IACJ,OAAA;SARL,CAAA,CAAA;IAWA,IAAA,OAAO3B,KAAP,CAAA;OAdG,CAAA;;IAgBA,EAAA,OAAA,CAAA4D,KAAA,GAAP,UAAa3B,OAAb,EAAwCoC,OAAxC,EAAyD;QAAzD,IAwBCpE,KAAA,GAAA,IAxBD,CAAA;;IACI,IAAA,IAAMwC,YAAY,GAAG,IAAA,CAAKT,gBAAL,CAAsBC,OAAtB,CAArB,CAAA;QACA,IAAMiE,WAAW,GAAGjE,OAAO,CAAC3B,GAAR,CAAY,UAAAgB,MAAA,EAAM;IAClC,MAAA,IAAIO,aAAO,CAACP,MAAD,CAAX,EAAqB;IACjB,QAAA,OAAOrB,KAAI,CAACoD,cAAL,CAAoB/B,MAApB,CAAP,CAAA;IACH,OAAA;;IACD,MAAA,OAAOrB,KAAI,CAAC8F,aAAL,CAAmBzE,MAAnB,CAAP,CAAA;IACH,KALmB,CAApB,CAAA;QAMA,IAAM6E,WAAW,GAAGD,WAAW,CAAC1D,KAAZ,CAAkB,UAAAf,KAAA,EAAK;IAAI,MAAA,OAAA,CAAAA,KAAK,KAAL,IAAA,IAAAA,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,KAAK,CAAEtC,MAAP,MAAkBsD,YAAlB,CAAA;IAA8B,KAAzD,CAApB,CAAA;;QAEA,IAAI,CAAC0D,WAAL,EAAkB;IACd,MAAA,OAAO,IAAP,CAAA;IACH,KAAA;;IACD,IAAA,IAAMvC,KAAK,GAAG,IAAIzD,eAAJ,CAAoBsC,YAApB,CAAd,CAAA;QACA,IAAMmC,UAAU,GAAGnC,YAAY,CAACzC,KAAb,CAAmBmB,MAAnB,CAA0B,UAAAG,MAAA,EAAU;IAAA,MAAA,OAAA4E,WAAW,CAACzC,OAAZ,CAAoBnC,MAApB,CAAA,KAAgC,CAAC,CAAjC,CAAA;IAAkC,KAAtE,CAAnB,CAAA;QAEAsD,UAAU,CAACwB,OAAX,CAAmBxC,KAAnB,CAAA,CAAA;QAEAA,KAAK,CAACF,GAAN,CAAUW,OAAO,GAAGzD,cAAQ,CAACqB,OAAD,CAAX,GAAuBA,OAAxC,CAAA,CAAA;QACAQ,YAAY,CAACzC,KAAb,GAAqB4E,UAArB,CAAA;IAEA,IAAA,IAAA,CAAKX,GAAL,CAAS,IAAA,CAAKpB,cAAL,EAAT,EAAgC,KAAK2B,QAArC,CAAA,CAAA;QAEA,OAAOZ,KAAK,CAACf,cAAN,EAAP,CAAA;OAvBG,CAAA;;IAyBA,EAAA,OAAA,CAAOwD,OAAP,GAAP,UAAepE,OAAf,EAAwC;QAAxC,IA8BChC,KAAA,GAAA,IA9BD,CAAA;;IACI,IAAA,IAAIgC,OAAO,CAACnB,MAAR,KAAmB,CAAnB,IAAwBe,aAAO,CAACI,OAAO,CAAC,CAAD,CAAR,CAAnC,EAAiD;IAC7CA,MAAAA,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAjB,CAAA;IACH,KAAA;;IACD,IAAA,IAAMQ,YAAY,GAAG,IAAA,CAAKT,gBAAL,CAAsBC,OAAtB,CAArB,CAAA;QACA,IAAMiE,WAAW,GAAGjE,OAAO,CAAC3B,GAAR,CAAY,UAAAgB,MAAA,EAAM;IAClC,MAAA,IAAIO,aAAO,CAACP,MAAD,CAAX,EAAqB;IACjB,QAAA,OAAOrB,KAAI,CAACoD,cAAL,CAAoB/B,MAApB,CAAP,CAAA;IACH,OAAA;;IACD,MAAA,OAAOrB,KAAI,CAAC8F,aAAL,CAAmBzE,MAAnB,CAAP,CAAA;IACH,KALmB,CAApB,CAAA;QAMA,IAAM6E,WAAW,GAAG1D,YAAY,CAACzC,KAAb,CAAmBwC,KAAnB,CAAyB,UAAAf,KAAA,EAAS;IAAA,MAAA,OAAAyE,WAAW,CAACzC,OAAZ,CAAoBhC,KAApB,CAAA,GAA6B,CAAC,CAA9B,CAAA;IAA+B,KAAjE,CAApB,CAAA;;IAEA,IAAA,IAAI,CAAC0E,WAAD,IAAgB1D,YAAY,KAAK,IAArC,EAA2C;IACvC;IACA,MAAA,OAAO,IAAP,CAAA;IACH,KAAA;;IAED,IAAA,IAAMtD,MAAM,GAAGsD,YAAY,CAACtD,MAA5B,CAAA;;QAEA,IAAI,CAACA,MAAL,EAAa;IACT,MAAA,OAAO,IAAP,CAAA;IACH,KAAA;;QACD,IAAMyF,UAAU,GAAGzF,MAAM,CAACa,KAAP,CAAamB,MAAb,CAAoB,UAAAG,MAAA,EAAM;UAAI,OAAAA,MAAM,KAAKmB,YAAX,CAAA;IAAuB,KAArD,CAAnB,CAAA;QAEAmC,UAAU,CAACd,IAAX,CAAA1D,KAAA,CAAAwE,UAAA,EAAmBnC,YAAY,CAACzC,KAAhC,CAAA,CAAA;QACAb,MAAM,CAACa,KAAP,GAAe4E,UAAf,CAAA;IAEA,IAAA,IAAA,CAAKX,GAAL,CAAS,IAAA,CAAKpB,cAAL,EAAT,EAAgC,KAAK2B,QAArC,CAAA,CAAA;QACA,OAAO/B,YAAY,CAACI,cAAb,EAAP,CAAA;OA7BG,CAAA;;IA+BG,EAAA,OAAA,CAAA8C,gBAAA,GAAV,UACIvE,OADJ,EAEIuB,KAFJ,EAE0C;IAEtC,IAAA,IAAI,CAACA,KAAK,CAAC7B,MAAX,EAAmB;IACf,MAAA,OAAO,IAAP,CAAA;IACH,KAAA;;QACD,IAAMiB,MAAM,GAAG,IAAKzB,CAAAA,GAAL,CAASb,GAAT,CAAa2B,OAAb,CAAf,CAAA;;QAEA,IAAI,CAACW,MAAL,EAAa;IACT,MAAA,OAAO,IAAP,CAAA;IACH,KAAA;;IACD,IAAA,IAAI5C,MAAM,GAAgC4C,MAAM,CAAC5C,MAAjD,CAAA;;IAEA,IAAA,OAAOA,MAAP,EAAe;IACX,MAAA,IAAIwD,KAAK,CAACnB,IAAN,CAAW,UAAAJ,OAAA,EAAW;IAAA,QAAA,OAAAjC,MAAO,CAACoC,QAAR,CAAiBH,OAAjB,CAAA,CAAA;IAAyB,OAA/C,CAAJ,EAAsD;IAClD,QAAA,OAAOjC,MAAP,CAAA;IACH,OAAA;;UACDA,MAAM,GAAGA,MAAM,CAACA,MAAhB,CAAA;IACH,KAAA;;IACD,IAAA,OAAO,IAAP,CAAA;OApBM,CAAA;;IAsBd,EAAA,OAACmF,YAAD,CAAA;IAhTA,CAAA,CAAkCnE,eAAlC;;;;;;;;;;;IC7BAmG,MAAM,CAACC,OAAP,GAAiBC,OAAjB;;;;;;;;;;;;;"}