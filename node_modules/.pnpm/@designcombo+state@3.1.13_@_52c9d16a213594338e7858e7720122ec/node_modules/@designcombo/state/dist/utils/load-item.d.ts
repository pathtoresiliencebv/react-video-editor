import { IAudio, ICaption, IComposition, IDisplay, IIllustration, IImage, IShape, ISize, ITemplate, IText, ITrack, ITrackItem, ITrim, IVideo, IVideoDetails } from '@designcombo/types';

type OptionsType = {
    size: {
        width: number;
        height: number;
    };
    origin: number;
    scaleMode?: string;
};
export declare const loadVideoItem: (layer: ITrackItem & IVideo, options: Partial<OptionsType>) => Promise<{
    trim: ITrim;
    type: string;
    name: string;
    details: IVideoDetails;
    playbackRate: number;
    display: IDisplay;
    duration: number;
    id: string;
    preview?: string;
    isMain?: boolean;
    animations?: {
        in: import('@designcombo/types').IBasicAnimation;
        out: import('@designcombo/types').IBasicAnimation;
    };
    modifier?: IDisplay;
    activeEdit?: boolean;
    metadata: Record<string, any>;
    transitionInfo?: {
        isFrom: boolean;
        isTo: boolean;
        transition: import('@designcombo/types').ITransition;
    };
}>;
export declare const loadAudioItem: (payload: ITrackItem & IAudio) => Promise<{
    id: string;
    name: string;
    type: string;
    display: IDisplay;
    trim: ITrim;
    playbackRate: number;
    details: {
        src: any;
        volume: any;
    };
    metadata: {
        [x: string]: any;
    };
    duration: number;
}>;
export declare const loadTemplateItem: (payload: ITemplate, options: {
    size: ISize;
}) => Promise<{
    id: string;
    type: string;
    details: {
        top: any;
        left: any;
        scale: number;
        rotate: any;
        width: number;
        height: number;
        type?: string;
        name?: string;
    };
    trim: IDisplay;
    display: IDisplay;
    activeEdit: boolean;
}>;
export declare const loadCompositionItem: (payload: IComposition, options: {
    size: ISize;
}) => Promise<{
    id: string;
    type: string;
    details: {
        top: any;
        left: any;
        scale: number;
        rotate: any;
        width: number;
        height: number;
        type?: string;
        name?: string;
    };
    display: IDisplay;
}>;
export declare const loadIllustrationItem: (payload: ITrackItem & IIllustration, options: {
    size?: {
        width: number;
        height: number;
    };
}) => Promise<{
    id: string;
    name: string;
    type: "illustration";
    display: IDisplay;
    playbackRate: number;
    details: {
        src: any;
        width: any;
        height: any;
        opacity: any;
        transform: any;
        border: any;
        borderRadius: any;
        top: any;
        left: any;
        borderWidth: any;
        borderColor: any;
        flipX: any;
        flipY: any;
        rotate: any;
        visibility: any;
        svgString: string;
        initialSvgString: string;
        colorMap: any;
    };
    metadata: Record<string, any>;
}>;
export declare const loadShapeItem: (payload: ITrackItem & IShape, options: {
    size?: {
        width: number;
        height: number;
    };
}) => Promise<{
    id: string;
    name: string;
    type: "shape";
    display: IDisplay;
    playbackRate: number;
    details: {
        src: any;
        width: any;
        height: any;
        opacity: any;
        transform: any;
        border: any;
        borderRadius: any;
        top: any;
        left: any;
        borderWidth: any;
        borderColor: any;
        flipX: any;
        flipY: any;
        rotate: any;
        visibility: any;
        backgroundColor: any;
    };
    metadata: Record<string, any>;
}>;
export declare const loadImageItem: (payload: ITrackItem & IImage, options: {
    origin?: number;
    size?: {
        width: number;
        height: number;
    };
    scaleMode?: string;
}) => Promise<{
    id: string;
    type: string;
    name: string;
    display: IDisplay;
    playbackRate: number;
    details: {
        src: any;
        width: any;
        height: any;
        opacity: any;
        transform: any;
        border: any;
        borderRadius: any;
        boxShadow: any;
        top: any;
        left: any;
        borderWidth: any;
        borderColor: any;
        blur: any;
        brightness: any;
        flipX: any;
        flipY: any;
        rotate: any;
        visibility: any;
    };
    metadata: Record<string, any>;
}>;
export declare const loadCaptionItem: (trackItem: ITrackItem, options: {
    origin?: number;
    size?: {
        width: number;
        height: number;
    };
}) => Promise<{
    id: string;
    name: string;
    type: string;
    display: IDisplay;
    details: {
        text: string;
        height: number;
        fontUrl: string;
        top: string | number;
        left: string | number;
        borderWidth: number;
        borderColor: string;
        boxShadow: {
            color: string;
            x: number;
            y: number;
            blur: number;
        };
        words: import('@designcombo/types').ICaptionWord[];
        appearedColor: string;
        activeColor: string;
        activeFillColor: string;
        skewX: number;
        skewY: number;
        fontSize: number;
        fontFamily: string;
        color: string;
        lineHeight: number | string;
        letterSpacing: number | string;
        fontWeight: number;
        fontStyle: string;
        textDecoration: string;
        textAlign: "center" | "left" | "right";
        wordSpacing: number | string;
        textShadow: string;
        backgroundColor: string;
        opacity: number;
        width: number;
        textTransform: "capitalize" | "uppercase" | "lowercase";
        border: string;
        wordWrap: "normal" | "break-word";
        wordBreak: "normal" | "break-word" | "break-all";
        WebkitTextStrokeColor: string;
        WebkitTextStrokeWidth: string;
        transform?: string;
        borderRadius?: number;
    };
    metadata: Record<string, any>;
}>;
export declare const loadTextItem: (payload: ITrackItem & IText, options: {
    origin?: number;
    size?: {
        width: number;
        height: number;
    };
}) => Promise<{
    id: string;
    name: string;
    type: string;
    display: IDisplay;
    details: {
        text: any;
        height: number;
        fontUrl: any;
        top: string | number;
        left: string | number;
        borderWidth: any;
        borderColor: any;
        boxShadow: any;
        skewX: number;
        skewY: number;
        fontSize: number;
        fontFamily: string;
        color: string;
        lineHeight: number | string;
        letterSpacing: number | string;
        fontWeight: number;
        fontStyle: string;
        textDecoration: string;
        textAlign: "center" | "left" | "right";
        wordSpacing: number | string;
        textShadow: string;
        backgroundColor: string;
        opacity: number;
        width: number;
        textTransform: "capitalize" | "uppercase" | "lowercase";
        border: string;
        wordWrap: "normal" | "break-word";
        wordBreak: "normal" | "break-word" | "break-all";
        WebkitTextStrokeColor: string;
        WebkitTextStrokeWidth: string;
        transform?: string;
        borderRadius?: number;
    };
    metadata: {};
}>;
export declare const loadTrackItem: (payload: ITrackItem & (IVideo | IAudio | IImage | IText | ICaption | ITemplate), options?: {
    size?: {
        width: number;
        height: number;
    };
    origin?: number;
}) => Promise<{
    trim: ITrim;
    type: string;
    name: string;
    details: IVideoDetails;
    playbackRate: number;
    display: IDisplay;
    duration: number;
    id: string;
    preview?: string;
    isMain?: boolean;
    animations?: {
        in: import('@designcombo/types').IBasicAnimation;
        out: import('@designcombo/types').IBasicAnimation;
    };
    modifier?: IDisplay;
    activeEdit?: boolean;
    metadata: Record<string, any>;
    transitionInfo?: {
        isFrom: boolean;
        isTo: boolean;
        transition: import('@designcombo/types').ITransition;
    };
} | {
    id: string;
    name: string;
    type: string;
    display: IDisplay;
    trim: ITrim;
    playbackRate: number;
    details: {
        src: any;
        volume: any;
    };
    metadata: {
        [x: string]: any;
    };
    duration: number;
} | {
    id: string;
    type: string;
    details: {
        top: any;
        left: any;
        scale: number;
        rotate: any;
        width: number;
        height: number;
        type?: string;
        name?: string;
    };
    trim: IDisplay;
    display: IDisplay;
    activeEdit: boolean;
} | {
    id: string;
    type: string;
    name: string;
    display: IDisplay;
    playbackRate: number;
    details: {
        src: any;
        width: any;
        height: any;
        opacity: any;
        transform: any;
        border: any;
        borderRadius: any;
        boxShadow: any;
        top: any;
        left: any;
        borderWidth: any;
        borderColor: any;
        blur: any;
        brightness: any;
        flipX: any;
        flipY: any;
        rotate: any;
        visibility: any;
    };
    metadata: Record<string, any>;
} | {
    id: string;
    name: string;
    type: string;
    display: IDisplay;
    details: {
        text: any;
        height: number;
        fontUrl: any;
        top: string | number;
        left: string | number;
        borderWidth: any;
        borderColor: any;
        boxShadow: any;
        skewX: number;
        skewY: number;
        fontSize: number;
        fontFamily: string;
        color: string;
        lineHeight: number | string;
        letterSpacing: number | string;
        fontWeight: number;
        fontStyle: string;
        textDecoration: string;
        textAlign: "center" | "left" | "right";
        wordSpacing: number | string;
        textShadow: string;
        backgroundColor: string;
        opacity: number;
        width: number;
        textTransform: "capitalize" | "uppercase" | "lowercase";
        border: string;
        wordWrap: "normal" | "break-word";
        wordBreak: "normal" | "break-word" | "break-all";
        WebkitTextStrokeColor: string;
        WebkitTextStrokeWidth: string;
        transform?: string;
        borderRadius?: number;
    };
    metadata: {};
}>;
export declare function checkIfItemIsInTrack(tracks: ITrack[], trackItemIds: string[]): boolean;
export declare function checkIfTrackExists(currentTracks: ITrack[], nextTracks: ITrack[]): boolean;
export declare const loadTracks: (tracks?: Partial<ITrack>[], trackItems?: ITrackItem[]) => ITrack[];
export {};
