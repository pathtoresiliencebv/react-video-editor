"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMediaPlayback = exports.DEFAULT_ACCEPTABLE_TIMESHIFT = void 0;
const react_1 = require("react");
const use_audio_frame_js_1 = require("./audio/use-audio-frame.js");
const buffer_until_first_frame_js_1 = require("./buffer-until-first-frame.js");
const buffering_js_1 = require("./buffering.js");
const play_and_handle_not_allowed_error_js_1 = require("./play-and-handle-not-allowed-error.js");
const timeline_position_state_js_1 = require("./timeline-position-state.js");
const use_current_frame_js_1 = require("./use-current-frame.js");
const use_media_buffering_js_1 = require("./use-media-buffering.js");
const use_request_video_callback_time_js_1 = require("./use-request-video-callback-time.js");
const use_video_config_js_1 = require("./use-video-config.js");
const get_current_time_js_1 = require("./video/get-current-time.js");
const video_fragment_js_1 = require("./video/video-fragment.js");
const warn_about_non_seekable_media_js_1 = require("./warn-about-non-seekable-media.js");
exports.DEFAULT_ACCEPTABLE_TIMESHIFT = 0.45;
const seek = (mediaRef, time) => {
    if (!mediaRef.current) {
        return;
    }
    // iOS seeking does not support multiple decimals
    const timeToSet = (0, video_fragment_js_1.isIosSafari)() ? Number(time.toFixed(1)) : time;
    mediaRef.current.currentTime = timeToSet;
};
const useMediaPlayback = ({ mediaRef, src, mediaType, playbackRate: localPlaybackRate, onlyWarnForMediaSeekingError, acceptableTimeshift, pauseWhenBuffering, isPremounting, debugSeeking, onAutoPlayError, }) => {
    const { playbackRate: globalPlaybackRate } = (0, react_1.useContext)(timeline_position_state_js_1.TimelineContext);
    const frame = (0, use_current_frame_js_1.useCurrentFrame)();
    const absoluteFrame = (0, timeline_position_state_js_1.useTimelinePosition)();
    const [playing] = (0, timeline_position_state_js_1.usePlayingState)();
    const buffering = (0, react_1.useContext)(buffering_js_1.BufferingContextReact);
    const { fps } = (0, use_video_config_js_1.useVideoConfig)();
    const mediaStartsAt = (0, use_audio_frame_js_1.useMediaStartsAt)();
    const lastSeekDueToShift = (0, react_1.useRef)(null);
    const lastSeek = (0, react_1.useRef)(null);
    if (!buffering) {
        throw new Error('useMediaPlayback must be used inside a <BufferingContext>');
    }
    const isVariableFpsVideoMap = (0, react_1.useRef)({});
    const onVariableFpsVideoDetected = (0, react_1.useCallback)(() => {
        if (!src) {
            return;
        }
        if (debugSeeking) {
            // eslint-disable-next-line no-console
            console.log(`Detected ${src} as a variable FPS video. Disabling buffering while seeking.`);
        }
        isVariableFpsVideoMap.current[src] = true;
    }, [debugSeeking, src]);
    const currentTime = (0, use_request_video_callback_time_js_1.useRequestVideoCallbackTime)({
        mediaRef,
        mediaType,
        lastSeek,
        onVariableFpsVideoDetected,
    });
    const desiredUnclampedTime = (0, get_current_time_js_1.getMediaTime)({
        frame,
        playbackRate: localPlaybackRate,
        startFrom: -mediaStartsAt,
        fps,
    });
    const isMediaTagBuffering = (0, use_media_buffering_js_1.useMediaBuffering)({
        element: mediaRef,
        shouldBuffer: pauseWhenBuffering,
        isPremounting,
    });
    const { bufferUntilFirstFrame, isBuffering } = (0, buffer_until_first_frame_js_1.useBufferUntilFirstFrame)({
        mediaRef,
        mediaType,
        onVariableFpsVideoDetected,
        pauseWhenBuffering,
    });
    const playbackRate = localPlaybackRate * globalPlaybackRate;
    // For short audio, a lower acceptable time shift is used
    const acceptableTimeShiftButLessThanDuration = (() => {
        var _a;
        if ((_a = mediaRef.current) === null || _a === void 0 ? void 0 : _a.duration) {
            return Math.min(mediaRef.current.duration, acceptableTimeshift !== null && acceptableTimeshift !== void 0 ? acceptableTimeshift : exports.DEFAULT_ACCEPTABLE_TIMESHIFT);
        }
        return acceptableTimeshift;
    })();
    const isPlayerBuffering = (0, buffering_js_1.useIsPlayerBuffering)(buffering);
    (0, react_1.useEffect)(() => {
        var _a, _b;
        if (!playing) {
            (_a = mediaRef.current) === null || _a === void 0 ? void 0 : _a.pause();
            return;
        }
        const isMediaTagBufferingOrStalled = isMediaTagBuffering || isBuffering();
        if (isPlayerBuffering && !isMediaTagBufferingOrStalled) {
            (_b = mediaRef.current) === null || _b === void 0 ? void 0 : _b.pause();
        }
    }, [isBuffering, isMediaTagBuffering, isPlayerBuffering, mediaRef, playing]);
    (0, react_1.useEffect)(() => {
        var _a;
        const tagName = mediaType === 'audio' ? '<Audio>' : '<Video>';
        if (!mediaRef.current) {
            throw new Error(`No ${mediaType} ref found`);
        }
        if (!src) {
            throw new Error(`No 'src' attribute was passed to the ${tagName} element.`);
        }
        const playbackRateToSet = Math.max(0, playbackRate);
        if (mediaRef.current.playbackRate !== playbackRateToSet) {
            mediaRef.current.playbackRate = playbackRateToSet;
        }
        const { duration } = mediaRef.current;
        const shouldBeTime = !Number.isNaN(duration) && Number.isFinite(duration)
            ? Math.min(duration, desiredUnclampedTime)
            : desiredUnclampedTime;
        const mediaTagTime = mediaRef.current.currentTime;
        const rvcTime = (_a = currentTime.current) !== null && _a !== void 0 ? _a : null;
        const isVariableFpsVideo = isVariableFpsVideoMap.current[src];
        const timeShiftMediaTag = Math.abs(shouldBeTime - mediaTagTime);
        const timeShiftRvcTag = rvcTime ? Math.abs(shouldBeTime - rvcTime) : null;
        const timeShift = timeShiftRvcTag && !isVariableFpsVideo
            ? timeShiftRvcTag
            : timeShiftMediaTag;
        if (debugSeeking) {
            // eslint-disable-next-line no-console
            console.log({
                mediaTagTime,
                rvcTime,
                shouldBeTime,
                state: mediaRef.current.readyState,
                playing: !mediaRef.current.paused,
                isVariableFpsVideo,
            });
        }
        if (timeShift > acceptableTimeShiftButLessThanDuration &&
            lastSeekDueToShift.current !== shouldBeTime) {
            // If scrubbing around, adjust timing
            // or if time shift is bigger than 0.45sec
            if (debugSeeking) {
                // eslint-disable-next-line no-console
                console.log('Seeking', {
                    shouldBeTime,
                    isTime: mediaTagTime,
                    rvcTime,
                    timeShift,
                    isVariableFpsVideo,
                });
            }
            seek(mediaRef, shouldBeTime);
            lastSeek.current = shouldBeTime;
            lastSeekDueToShift.current = shouldBeTime;
            if (playing && !isVariableFpsVideo) {
                if (playbackRate > 0) {
                    bufferUntilFirstFrame(shouldBeTime);
                }
                if (mediaRef.current.paused) {
                    (0, play_and_handle_not_allowed_error_js_1.playAndHandleNotAllowedError)(mediaRef, mediaType, onAutoPlayError);
                }
            }
            if (!onlyWarnForMediaSeekingError) {
                (0, warn_about_non_seekable_media_js_1.warnAboutNonSeekableMedia)(mediaRef.current, onlyWarnForMediaSeekingError ? 'console-warning' : 'console-error');
            }
            return;
        }
        const seekThreshold = playing ? 0.15 : 0.00001;
        // Only perform a seek if the time is not already the same.
        // Chrome rounds to 6 digits, so 0.033333333 -> 0.033333,
        // therefore a threshold is allowed.
        // Refer to the https://github.com/remotion-dev/video-buffering-example
        // which is fixed by only seeking conditionally.
        const makesSenseToSeek = Math.abs(mediaRef.current.currentTime - shouldBeTime) > seekThreshold;
        const isMediaTagBufferingOrStalled = isMediaTagBuffering || isBuffering();
        const isSomethingElseBuffering = buffering.buffering.current && !isMediaTagBufferingOrStalled;
        if (!playing || isSomethingElseBuffering) {
            if (makesSenseToSeek) {
                seek(mediaRef, shouldBeTime);
                lastSeek.current = shouldBeTime;
            }
            return;
        }
        // We assured we are in playing state
        if ((mediaRef.current.paused && !mediaRef.current.ended) ||
            absoluteFrame === 0) {
            if (makesSenseToSeek) {
                seek(mediaRef, shouldBeTime);
                lastSeek.current = shouldBeTime;
            }
            (0, play_and_handle_not_allowed_error_js_1.playAndHandleNotAllowedError)(mediaRef, mediaType, onAutoPlayError);
            if (!isVariableFpsVideo) {
                if (playbackRate > 0) {
                    bufferUntilFirstFrame(shouldBeTime);
                }
            }
        }
    }, [
        absoluteFrame,
        acceptableTimeShiftButLessThanDuration,
        bufferUntilFirstFrame,
        buffering.buffering,
        currentTime,
        debugSeeking,
        desiredUnclampedTime,
        isBuffering,
        isMediaTagBuffering,
        mediaRef,
        mediaType,
        onlyWarnForMediaSeekingError,
        playbackRate,
        playing,
        src,
        onAutoPlayError,
    ]);
};
exports.useMediaPlayback = useMediaPlayback;
