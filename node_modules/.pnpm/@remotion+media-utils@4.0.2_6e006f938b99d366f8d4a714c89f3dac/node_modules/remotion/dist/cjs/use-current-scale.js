"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCurrentScale = exports.calculateScale = exports.PreviewSizeContext = exports.CurrentScaleContext = void 0;
const react_1 = __importStar(require("react"));
const get_remotion_environment_1 = require("./get-remotion-environment");
const use_unsafe_video_config_1 = require("./use-unsafe-video-config");
exports.CurrentScaleContext = react_1.default.createContext(null);
exports.PreviewSizeContext = (0, react_1.createContext)({
    setSize: () => undefined,
    size: { size: 'auto', translation: { x: 0, y: 0 } },
});
const calculateScale = ({ canvasSize, compositionHeight, compositionWidth, previewSize, }) => {
    const heightRatio = canvasSize.height / compositionHeight;
    const widthRatio = canvasSize.width / compositionWidth;
    const ratio = Math.min(heightRatio, widthRatio);
    return previewSize === 'auto' ? ratio : Number(previewSize);
};
exports.calculateScale = calculateScale;
/**
 * Gets the current scale of the container in which the component is being rendered.
 * Only works in the Remotion Studio and in the Remotion Player.
 */
const useCurrentScale = (options) => {
    const hasContext = react_1.default.useContext(exports.CurrentScaleContext);
    const zoomContext = react_1.default.useContext(exports.PreviewSizeContext);
    const config = (0, use_unsafe_video_config_1.useUnsafeVideoConfig)();
    if (hasContext === null || config === null || zoomContext === null) {
        if (options === null || options === void 0 ? void 0 : options.dontThrowIfOutsideOfRemotion) {
            return 1;
        }
        if ((0, get_remotion_environment_1.getRemotionEnvironment)().isRendering) {
            return 1;
        }
        throw new Error([
            'useCurrentScale() was called outside of a Remotion context.',
            'This hook can only be called in a component that is being rendered by Remotion.',
            'If you want to this hook to return 1 outside of Remotion, pass {dontThrowIfOutsideOfRemotion: true} as an option.',
            'If you think you called this hook in a Remotion component, make sure all versions of Remotion are aligned.',
        ].join('\n'));
    }
    if (hasContext.type === 'scale') {
        return hasContext.scale;
    }
    return (0, exports.calculateScale)({
        canvasSize: hasContext.canvasSize,
        compositionHeight: config.height,
        compositionWidth: config.width,
        previewSize: zoomContext.size.size,
    });
};
exports.useCurrentScale = useCurrentScale;
