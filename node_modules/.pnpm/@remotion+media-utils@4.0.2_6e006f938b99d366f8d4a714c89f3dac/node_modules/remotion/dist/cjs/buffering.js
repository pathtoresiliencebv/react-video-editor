"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useIsPlayerBuffering = exports.BufferingProvider = exports.BufferingContextReact = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const useBufferManager = () => {
    const [blocks, setBlocks] = (0, react_1.useState)([]);
    const [onBufferingCallbacks, setOnBufferingCallbacks] = (0, react_1.useState)([]);
    const [onResumeCallbacks, setOnResumeCallbacks] = (0, react_1.useState)([]);
    const buffering = (0, react_1.useRef)(false);
    const addBlock = (0, react_1.useCallback)((block) => {
        setBlocks((b) => [...b, block]);
        return {
            unblock: () => {
                setBlocks((b) => {
                    const newArr = b.filter((bx) => bx !== block);
                    if (newArr.length === b.length) {
                        return b;
                    }
                    return newArr;
                });
            },
        };
    }, []);
    const listenForBuffering = (0, react_1.useCallback)((callback) => {
        setOnBufferingCallbacks((c) => [...c, callback]);
        return {
            remove: () => {
                setOnBufferingCallbacks((c) => c.filter((cb) => cb !== callback));
            },
        };
    }, []);
    const listenForResume = (0, react_1.useCallback)((callback) => {
        setOnResumeCallbacks((c) => [...c, callback]);
        return {
            remove: () => {
                setOnResumeCallbacks((c) => c.filter((cb) => cb !== callback));
            },
        };
    }, []);
    (0, react_1.useEffect)(() => {
        if (blocks.length > 0) {
            onBufferingCallbacks.forEach((c) => c());
        }
        // Intentionally only firing when blocks change, not the callbacks
        // otherwise a buffering callback might remove itself after being called
        // and trigger again
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [blocks]);
    (0, react_1.useEffect)(() => {
        if (blocks.length === 0) {
            onResumeCallbacks.forEach((c) => c());
        }
        // Intentionally only firing when blocks change, not the callbacks
        // otherwise a resume callback might remove itself after being called
        // and trigger again
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [blocks]);
    return (0, react_1.useMemo)(() => {
        return { addBlock, listenForBuffering, listenForResume, buffering };
    }, [addBlock, buffering, listenForBuffering, listenForResume]);
};
exports.BufferingContextReact = react_1.default.createContext(null);
const BufferingProvider = ({ children }) => {
    const bufferManager = useBufferManager();
    return ((0, jsx_runtime_1.jsx)(exports.BufferingContextReact.Provider, { value: bufferManager, children: children }));
};
exports.BufferingProvider = BufferingProvider;
const useIsPlayerBuffering = (bufferManager) => {
    const [isBuffering, setIsBuffering] = (0, react_1.useState)(bufferManager.buffering.current);
    (0, react_1.useEffect)(() => {
        const onBuffer = () => {
            setIsBuffering(true);
        };
        const onResume = () => {
            setIsBuffering(false);
        };
        bufferManager.listenForBuffering(onBuffer);
        bufferManager.listenForResume(onResume);
        return () => {
            bufferManager.listenForBuffering(() => undefined);
            bufferManager.listenForResume(() => undefined);
        };
    }, [bufferManager]);
    return isBuffering;
};
exports.useIsPlayerBuffering = useIsPlayerBuffering;
