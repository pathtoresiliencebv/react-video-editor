export type { ArtifactAsset, AudioOrVideoAsset, TRenderAsset, } from './CompositionManager';
export { EasingFunction, ExtrapolateType, interpolate, InterpolateOptions, } from './interpolate';
export type { ClipRegion } from './NativeLayers';
export { random, RandomSeed } from './random.js';
export type { VideoConfig } from './video-config';
import { processColor } from './interpolate-colors';
import { truthy } from './truthy';
import { validateDimension } from './validation/validate-dimensions';
import { validateDurationInFrames } from './validation/validate-duration-in-frames';
import { validateFps } from './validation/validate-fps';
export declare const NoReactInternals: {
    processColor: typeof processColor;
    truthy: typeof truthy;
    validateFps: typeof validateFps;
    validateDimension: typeof validateDimension;
    validateDurationInFrames: typeof validateDurationInFrames;
    validateDefaultAndInputProps: (defaultProps: unknown, name: "defaultProps" | "inputProps", compositionId: string | null) => void;
    validateFrame: ({ allowFloats, durationInFrames, frame, }: {
        frame: number;
        durationInFrames: number;
        allowFloats: boolean;
    }) => void;
    serializeJSONWithDate: ({ data, indent, staticBase, }: {
        data: Record<string, unknown>;
        indent: number | undefined;
        staticBase: string | null;
    }) => import("./input-props-serialization").SerializedJSONWithCustomFields;
    bundleName: string;
    bundleMapName: string;
    deserializeJSONWithCustomFields: <T = Record<string, unknown>>(data: string) => T;
    DELAY_RENDER_CALLSTACK_TOKEN: string;
    DELAY_RENDER_RETRY_TOKEN: string;
    DELAY_RENDER_ATTEMPT_TOKEN: string;
    getOffthreadVideoSource: ({ src, transparent, currentTime, toneMapped, }: {
        src: string;
        transparent: boolean;
        currentTime: number;
        toneMapped: boolean;
    }) => string;
    getExpectedMediaFrameUncorrected: ({ frame, playbackRate, startFrom, }: {
        frame: number;
        playbackRate: number;
        startFrom: number;
    }) => number;
    ENABLE_V5_BREAKING_CHANGES: false;
    MIN_NODE_VERSION: number;
    MIN_BUN_VERSION: string;
    colorNames: {
        [key: string]: number;
    };
    DATE_TOKEN: string;
    FILE_TOKEN: string;
};
