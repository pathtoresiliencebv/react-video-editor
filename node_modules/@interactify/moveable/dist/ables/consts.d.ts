export declare const MOVEABLE_ABLES: readonly [{
    readonly isPinch: true;
    readonly name: "beforeRenderable";
    readonly props: readonly [];
    readonly events: readonly ["beforeRenderStart", "beforeRender", "beforeRenderEnd", "beforeRenderGroupStart", "beforeRenderGroup", "beforeRenderGroupEnd"];
    readonly dragRelation: "weak";
    readonly setTransform: (moveable: import('../types').MoveableManagerInterface<import('../types').BeforeRenderableProps>, e: any) => void;
    readonly resetStyle: (e: any) => void;
    readonly fillDragStartParams: (moveable: import('../types').MoveableManagerInterface<import('../types').BeforeRenderableProps>, e: any) => import('../types').OnBeforeRenderStart;
    readonly fillDragParams: (moveable: import('../types').MoveableManagerInterface<import('../types').BeforeRenderableProps>, e: any) => import('../types').OnBeforeRender;
    readonly dragStart: (moveable: import('../types').MoveableManagerInterface<import('../types').BeforeRenderableProps>, e: any) => void;
    readonly drag: (moveable: import('../types').MoveableManagerInterface<import('../types').BeforeRenderableProps>, e: any) => void;
    readonly dragEnd: (moveable: import('../types').MoveableManagerInterface<import('../types').BeforeRenderableProps>, e: any) => void;
    readonly dragGroupStart: (moveable: import('../types').MoveableGroupInterface<import('../types').BeforeRenderableProps>, e: any) => void;
    readonly dragGroup: (moveable: import('../types').MoveableGroupInterface<import('../types').BeforeRenderableProps>, e: any) => void;
    readonly dragGroupEnd: (moveable: import('../types').MoveableGroupInterface<import('../types').BeforeRenderableProps>, e: any) => void;
    readonly dragControlStart: (moveable: import('../types').MoveableManagerInterface<import('../types').BeforeRenderableProps>, e: any) => any;
    readonly dragControl: (moveable: import('../types').MoveableManagerInterface<import('../types').BeforeRenderableProps>, e: any) => any;
    readonly dragControlEnd: (moveable: import('../types').MoveableManagerInterface<import('../types').BeforeRenderableProps>, e: any) => any;
    readonly dragGroupControlStart: (moveable: import('../types').MoveableGroupInterface<import('../types').BeforeRenderableProps>, e: any) => any;
    readonly dragGroupControl: (moveable: import('../types').MoveableGroupInterface<import('../types').BeforeRenderableProps>, e: any) => any;
    readonly dragGroupControlEnd: (moveable: import('../types').MoveableGroupInterface<import('../types').BeforeRenderableProps>, e: any) => any;
}, {
    name: string;
    props: readonly ["target", "dragTargetSelf", "dragTarget", "dragContainer", "container", "warpSelf", "rootContainer", "useResizeObserver", "useMutationObserver", "zoom", "dragFocusedInput", "transformOrigin", "ables", "className", "pinchThreshold", "pinchOutside", "triggerAblesSimultaneously", "checkInput", "cspNonce", "translateZ", "hideDefaultLines", "props", "flushSync", "stopPropagation", "preventClickEventOnDrag", "preventClickDefault", "viewContainer", "persistData", "useAccuratePosition", "firstRenderState", "linePadding", "controlPadding", "preventDefault", "preventRightClick", "preventWheelClick", "requestStyles"];
    events: readonly ["changeTargets"];
}, {
    name: string;
    dragRelation: string;
    props: readonly ["snappable", "snapContainer", "snapDirections", "elementSnapDirections", "snapGap", "snapGridWidth", "snapGridHeight", "isDisplaySnapDigit", "isDisplayInnerSnapDigit", "isDisplayGridGuidelines", "snapDigit", "snapThreshold", "snapRenderThreshold", "snapGridAll", "snapRotationThreshold", "snapRotationDegrees", "snapHorizontalThreshold", "snapVerticalThreshold", "horizontalGuidelines", "verticalGuidelines", "elementGuidelines", "bounds", "innerBounds", "snapDistFormat", "maxSnapElementGuidelineDistance", "maxSnapElementGapDistance"];
    events: readonly ["snap", "bound"];
    css: string[];
    render(moveable: import('../types').MoveableManagerInterface<import('../types').SnappableProps, import('../types').SnappableState>, React: import('../types').Renderer): any[];
    dragStart(moveable: import('../types').MoveableManagerInterface<import('../types').SnappableProps, import('../types').SnappableState>, e: any): void;
    drag(moveable: import('../types').MoveableManagerInterface<import('../types').SnappableProps, import('../types').SnappableState>): void;
    pinchStart(moveable: import('../types').MoveableManagerInterface<import('../types').SnappableProps, import('../types').SnappableState>): void;
    dragEnd(moveable: import('../types').MoveableManagerInterface<import('../types').SnappableProps, import('../types').SnappableState>): void;
    dragControlCondition(moveable: import('../types').MoveableManagerInterface, e: any): boolean;
    dragControlStart(moveable: import('../types').MoveableManagerInterface<import('../types').SnappableProps, import('../types').SnappableState>): void;
    dragControl(moveable: import('../types').MoveableManagerInterface<import('../types').SnappableProps, import('../types').SnappableState>): void;
    dragControlEnd(moveable: import('../types').MoveableManagerInterface<import('../types').SnappableProps, import('../types').SnappableState>): void;
    dragGroupStart(moveable: any, e: any): void;
    dragGroup(moveable: import('../types').MoveableGroupInterface<import('../types').SnappableProps, import('../types').SnappableState>): void;
    dragGroupEnd(moveable: import('../types').MoveableGroupInterface<import('../types').SnappableProps, import('../types').SnappableState>): void;
    dragGroupControlStart(moveable: import('../types').MoveableGroupInterface<import('../types').SnappableProps, import('../types').SnappableState>): void;
    dragGroupControl(moveable: import('../types').MoveableManagerInterface<import('../types').SnappableProps, import('../types').SnappableState>): void;
    dragGroupControlEnd(moveable: import('../types').MoveableGroupInterface<import('../types').SnappableProps, import('../types').SnappableState>): void;
    unset(moveable: any): void;
}, {
    readonly events: readonly ["pinchStart", "pinch", "pinchEnd", "pinchGroupStart", "pinchGroup", "pinchGroupEnd"];
    readonly props: readonly ["pinchable"];
    readonly name: "pinchable";
} & {
    props: readonly ["pinchable"];
    events: readonly ["pinchStart", "pinch", "pinchEnd", "pinchGroupStart", "pinchGroup", "pinchGroupEnd"];
    dragStart(): boolean;
    pinchStart(moveable: import('../types').MoveableManagerInterface<import('../types').PinchableProps, import('../types').SnappableState>, e: any): any;
    pinch(moveable: import('../types').MoveableManagerInterface<import('../types').PinchableProps>, e: any): any;
    pinchEnd(moveable: import('../types').MoveableManagerInterface<import('../types').PinchableProps>, e: any): any;
    pinchGroupStart(moveable: import('../types').MoveableGroupInterface<any, any>, e: any): any;
    pinchGroup(moveable: import('../types').MoveableGroupInterface, e: any): any;
    pinchGroupEnd(moveable: import('../types').MoveableGroupInterface, e: any): any;
}, {
    name: string;
    props: readonly ["draggable", "throttleDrag", "throttleDragRotate", "hideThrottleDragRotateLine", "startDragRotate", "edgeDraggable"];
    events: readonly ["dragStart", "drag", "dragEnd", "dragGroupStart", "dragGroup", "dragGroupEnd"];
    requestStyle(): string[];
    requestChildStyle(): string[];
    render(moveable: import('../types').MoveableManagerInterface<import('../types').DraggableProps, import('../types').DraggableState>, React: import('../types').Renderer): any[];
    dragStart(moveable: import('../types').MoveableManagerInterface<import('../types').DraggableProps, any>, e: any): false | import('../types').OnDragStart;
    drag(moveable: import('../types').MoveableManagerInterface<import('../types').DraggableProps, any>, e: any): import('../types').OnDrag | undefined;
    dragAfter(moveable: import('../types').MoveableManagerInterface<import('../types').DraggableProps, import('../types').DraggableState>, e: any): any;
    dragEnd(moveable: import('../types').MoveableManagerInterface<import('../types').DraggableProps, import('../types').DraggableState>, e: any): import('../types').OnDragEnd;
    dragGroupStart(moveable: import('../types').MoveableGroupInterface<any, any>, e: any): any;
    dragGroup(moveable: import('../types').MoveableGroupInterface<any, any>, e: any): import('../types').OnDragGroup;
    dragGroupEnd(moveable: import('../types').MoveableGroupInterface<any, any>, e: any): any;
    request(moveable: import('../types').MoveableManagerInterface<any, any>): {
        isControl: boolean;
        requestStart(e: Record<string, any>): {
            datas: {};
            useSnap: boolean;
        };
        request(e: Record<string, any>): {
            datas: {};
            distX: number;
            distY: number;
            useSnap: boolean;
        };
        requestEnd(): {
            datas: {};
            isDrag: boolean;
            useSnap: boolean;
        };
    };
    unset(moveable: import('../types').MoveableManagerInterface<any, Record<string, any>>): void;
}, {
    readonly events: readonly [];
    readonly props: readonly [];
    readonly name: "edgeDraggable";
} & {
    css: string[];
    render(moveable: import('../types').MoveableManagerInterface<import('../types').DraggableProps>, React: import('../types').Renderer): any[];
    dragCondition(moveable: import('../types').MoveableManagerInterface<import('../types').DraggableProps>, e: any): boolean;
    dragStart(moveable: import('../types').MoveableManagerInterface<import('../types').DraggableProps>, e: any): false | import('../types').OnDragStart;
    drag(moveable: import('../types').MoveableManagerInterface<import('../types').DraggableProps>, e: any): import('../types').OnDrag;
    dragEnd(moveable: import('../types').MoveableManagerInterface<import('../types').DraggableProps, any>, e: any): import('../types').OnDragEnd;
    dragGroupCondition(moveable: import('../types').MoveableGroupInterface<import('../types').DraggableProps>, e: any): boolean;
    dragGroupStart(moveable: import('../types').MoveableGroupInterface<import('../types').DraggableProps>, e: any): any;
    dragGroup(moveable: import('../types').MoveableGroupInterface<import('../types').DraggableProps>, e: any): import('../types').OnDragGroup;
    dragGroupEnd(moveable: import('../types').MoveableGroupInterface<import('../types').DraggableProps, any>, e: any): any;
    unset(moveable: any): void;
}, {
    name: string;
    ableGroup: string;
    canPinch: boolean;
    props: readonly ["resizable", "throttleResize", "renderDirections", "displayAroundControls", "keepRatio", "resizeFormat", "keepRatioFinally", "edge", "checkResizableError"];
    events: readonly ["resizeStart", "beforeResize", "resize", "resizeEnd", "resizeGroupStart", "beforeResizeGroup", "resizeGroup", "resizeGroupEnd"];
    render: (moveable: import('../types').MoveableManagerInterface<Partial<import('../types').RenderDirections>>, React: import('../types').Renderer) => any[];
    dragControlCondition: (moveable: any, e: any) => any;
    viewClassName: (moveable: import('../types').MoveableManagerInterface) => string;
    dragControlStart(moveable: import('../types').MoveableManagerInterface<import('../types').ResizableProps & import('../types').DraggableProps, import('../types').SnappableState>, e: any): false | import('../types').OnResizeStart;
    dragControl(moveable: import('../types').MoveableManagerInterface<import('../types').ResizableProps & import('../types').DraggableProps & import('../types').SnappableProps>, e: any): import('../types').OnResize;
    dragControlAfter(moveable: import('../types').MoveableManagerInterface<import('../types').ResizableProps & import('../types').DraggableProps>, e: any): any;
    dragControlEnd(moveable: import('../types').MoveableManagerInterface<import('../types').ResizableProps & import('../types').DraggableProps>, e: any): import('../types').OnResizeEnd;
    dragGroupControlCondition: (moveable: any, e: any) => any;
    dragGroupControlStart(moveable: import('../types').MoveableGroupInterface<any, any>, e: any): any;
    dragGroupControl(moveable: import('../types').MoveableGroupInterface<any, any>, e: any): import('../types').OnResizeGroup;
    dragGroupControlEnd(moveable: import('../types').MoveableGroupInterface<any, any>, e: any): any;
    request(moveable: import('../types').MoveableManagerInterface<any>): {
        isControl: boolean;
        requestStart(e: import('../types').ResizableRequestParam): {
            datas: Record<string, any>;
            parentDirection: number[];
            parentIsWidth: boolean;
            useSnap: boolean;
        };
        request(e: import('../types').ResizableRequestParam): {
            datas: Record<string, any>;
            parentDist: number[];
            parentKeepRatio: boolean;
            useSnap: boolean;
        };
        requestEnd(): {
            datas: Record<string, any>;
            isDrag: boolean;
            useSnap: boolean;
        };
    };
    unset(moveable: import('../types').MoveableManagerInterface<any, {}>): void;
}, {
    name: string;
    ableGroup: string;
    canPinch: boolean;
    props: readonly ["scalable", "throttleScale", "renderDirections", "keepRatio", "edge", "displayAroundControls"];
    events: readonly ["scaleStart", "beforeScale", "scale", "scaleEnd", "scaleGroupStart", "beforeScaleGroup", "scaleGroup", "scaleGroupEnd"];
    render: (moveable: import('../types').MoveableManagerInterface<Partial<import('../types').RenderDirections>>, React: import('../types').Renderer) => any[];
    dragControlCondition: (moveable: any, e: any) => any;
    viewClassName: (moveable: import('../types').MoveableManagerInterface) => string;
    dragControlStart(moveable: import('../types').MoveableManagerInterface<import('../types').ScalableProps & import('../types').DraggableProps, import('../types').SnappableState>, e: any): false | import('../types').OnScaleStart;
    dragControl(moveable: import('../types').MoveableManagerInterface<import('../types').ScalableProps & import('../types').DraggableProps & import('../types').GroupableProps, import('../types').SnappableState>, e: any): false | import('../types').OnScale;
    dragControlEnd(moveable: import('../types').MoveableManagerInterface<import('../types').ScalableProps>, e: any): false | import('../types').OnScaleEnd;
    dragGroupControlCondition: (moveable: any, e: any) => any;
    dragGroupControlStart(moveable: import('../types').MoveableGroupInterface<any, any>, e: any): false | import('../types').OnScaleGroupStart;
    dragGroupControl(moveable: import('../types').MoveableGroupInterface<any, any>, e: any): import('../types').OnScaleGroup;
    dragGroupControlEnd(moveable: import('../types').MoveableGroupInterface<any, any>, e: any): any;
    request(): {
        isControl: boolean;
        requestStart(e: import('@daybrush/utils').IObject<any>): {
            datas: {};
            parentDirection: any;
            useSnap: boolean;
        };
        request(e: import('@daybrush/utils').IObject<any>): {
            datas: {};
            parentDist: number[];
            parentKeepRatio: any;
            useSnap: boolean;
        };
        requestEnd(): {
            datas: {};
            isDrag: boolean;
            useSnap: boolean;
        };
    };
}, {
    name: string;
    ableGroup: string;
    props: readonly ["warpable", "renderDirections", "edge", "displayAroundControls"];
    events: readonly ["warpStart", "warp", "warpEnd"];
    viewClassName: (moveable: import('../types').MoveableManagerInterface) => string;
    render(moveable: import('../types').MoveableManagerInterface<import('../types').ResizableProps & import('../types').ScalableProps & import('../types').WarpableProps>, React: import('../types').Renderer): any[];
    dragControlCondition(moveable: any, e: any): boolean;
    dragControlStart(moveable: import('../types').MoveableManagerInterface<import('../types').WarpableProps, import('../types').SnappableState>, e: any): any;
    dragControl(moveable: import('../types').MoveableManagerInterface<import('../types').WarpableProps & import('../types').SnappableProps, import('../types').SnappableState>, e: any): boolean;
    dragControlEnd(moveable: import('../types').MoveableManagerInterface<import('../types').WarpableProps>, e: any): any;
}, {
    name: string;
    canPinch: boolean;
    props: readonly ["rotatable", "rotationPosition", "throttleRotate", "renderDirections", "rotationTarget", "rotateAroundControls", "edge", "resolveAblesWithRotatable", "displayAroundControls"];
    events: readonly ["rotateStart", "beforeRotate", "rotate", "rotateEnd", "rotateGroupStart", "beforeRotateGroup", "rotateGroup", "rotateGroupEnd"];
    css: string[];
    viewClassName(moveable: import('../types').MoveableManagerInterface<import('../types').RotatableProps>): string;
    render(moveable: import('../types').MoveableManagerInterface<import('../types').RotatableProps>, React: import('../types').Renderer): any;
    dragControlCondition: (moveable: any, e: any) => boolean;
    dragControlStart(moveable: import('../types').MoveableManagerInterface<import('../types').RotatableProps & import('../types').SnappableProps & import('../types').DraggableProps, import('../types').SnappableState>, e: any): false | import('../types').OnRotateStart;
    dragControl(moveable: import('../types').MoveableManagerInterface<import('../types').RotatableProps & import('../types').DraggableProps>, e: any): import('../types').OnRotate;
    dragControlEnd(moveable: import('../types').MoveableManagerInterface<import('../types').RotatableProps>, e: any): import('../types').OnRotateEnd;
    dragGroupControlCondition: (moveable: any, e: any) => boolean;
    dragGroupControlStart(moveable: import('../types').MoveableGroupInterface<any, any>, e: any): any;
    dragGroupControl(moveable: import('../types').MoveableGroupInterface<any, any>, e: any): import('../types').OnRotateGroup;
    dragGroupControlEnd(moveable: import('../types').MoveableGroupInterface<any, any>, e: any): any;
    request(moveable: import('../types').MoveableManagerInterface<import('../types').RotatableProps>): {
        isControl: boolean;
        requestStart(): {
            datas: {};
        };
        request(e: import('@daybrush/utils').IObject<any>): {
            datas: {};
            parentDist: number;
        };
        requestEnd(): {
            datas: {};
            isDrag: boolean;
        };
    };
}, {
    name: string;
    canPinch: boolean;
    props: readonly ["scrollable", "scrollContainer", "scrollThreshold", "scrollThrottleTime", "getScrollPosition", "scrollOptions"];
    events: readonly ["scroll", "scrollGroup"];
    dragRelation: string;
    dragStart(moveable: import('../types').MoveableManagerInterface<import('../types').ScrollableProps, Record<string, any>>, e: any): void;
    checkScroll(moveable: import('../types').MoveableManagerInterface<import('../types').ScrollableProps>, e: any): boolean;
    drag(moveable: import('../types').MoveableManagerInterface<import('../types').ScrollableProps>, e: any): any;
    dragEnd(moveable: import('../types').MoveableManagerInterface<import('../types').ScrollableProps>, e: any): void;
    dragControlStart(moveable: import('../types').MoveableManagerInterface<import('../types').ScrollableProps>, e: any): any;
    dragControl(moveable: import('../types').MoveableManagerInterface<import('../types').ScrollableProps>, e: any): any;
    dragControlEnd(moveable: import('../types').MoveableManagerInterface<import('../types').ScrollableProps>, e: any): any;
    dragGroupStart(moveable: import('../types').MoveableGroupInterface, e: any): any;
    dragGroup(moveable: import('../types').MoveableGroupInterface, e: any): any;
    dragGroupEnd(moveable: import('../types').MoveableGroupInterface, e: any): any;
    dragGroupControlStart(moveable: import('../types').MoveableGroupInterface, e: any): any;
    dragGroupControl(moveable: import('../types').MoveableGroupInterface, e: any): any;
    dragGroupControEnd(moveable: import('../types').MoveableGroupInterface, e: any): any;
    unset(moveable: import('../types').MoveableManagerInterface<import('../types').ScrollableProps, Record<string, any>>): void;
}, {
    readonly events: readonly [];
    readonly props: readonly ["padding"];
    readonly name: "padding";
} & {
    props: readonly ["padding"];
    render(moveable: import('../types').MoveableManagerInterface, React: import('../types').Renderer): any[];
}, {
    readonly events: readonly [];
    readonly props: readonly ["origin", "svgOrigin"];
    readonly name: "origin";
} & {
    props: readonly ["origin", "svgOrigin"];
    render(moveable: import('../types').MoveableManagerInterface<import('../types').OriginOptions>, React: import('../types').Renderer): any[];
}, {
    name: string;
    props: readonly ["originDraggable", "originRelative"];
    events: readonly ["dragOriginStart", "dragOrigin", "dragOriginEnd"];
    css: string[];
    dragControlCondition(_: any, e: any): boolean;
    dragControlStart(moveable: import('../types').MoveableManagerInterface<import('../types').OriginDraggableProps & import('../types').DraggableProps>, e: any): false | import('../types').OnDragOriginStart;
    dragControl(moveable: import('../types').MoveableManagerInterface<import('../types').OriginDraggableProps & import('../types').DraggableProps>, e: any): false | import('../types').OnDragOrigin;
    dragControlEnd(moveable: import('../types').MoveableManagerInterface<import('../types').OriginDraggableProps>, e: any): boolean;
    dragGroupControlCondition(moveable: any, e: any): any;
    dragGroupControlStart(moveable: import('../types').MoveableGroupInterface<import('../types').OriginDraggableProps>, e: any): boolean;
    dragGroupControl(moveable: import('../types').MoveableGroupInterface<import('../types').OriginDraggableProps>, e: any): boolean;
    request(moveable: import('../types').MoveableManagerInterface<any, any>): {
        isControl: boolean;
        requestStart(): {
            datas: {};
        };
        request(e: import('@daybrush/utils').IObject<any>): {
            datas: {};
            distX: number;
            distY: number;
            distOrigin: number[];
        };
        requestEnd(): {
            datas: {};
            isDrag: boolean;
        };
    };
}, {
    name: string;
    props: readonly ["clippable", "defaultClipPath", "customClipPath", "keepRatio", "clipRelative", "clipArea", "dragWithClip", "clipTargetBounds", "clipVerticalGuidelines", "clipHorizontalGuidelines", "clipSnapThreshold"];
    events: readonly ["clipStart", "clip", "clipEnd"];
    css: string[];
    render(moveable: import('../types').MoveableManagerInterface<import('../types').ClippableProps, import('../types').ClippableState>, React: import('../types').Renderer): any[];
    dragControlCondition(moveable: any, e: any): boolean;
    dragStart(moveable: import('../types').MoveableManagerInterface<import('../types').ClippableProps, import('../types').ClippableState>, e: any): any;
    drag(moveable: import('../types').MoveableManagerInterface<import('../types').ClippableProps, import('../types').ClippableState>, e: any): any;
    dragEnd(moveable: import('../types').MoveableManagerInterface<import('../types').ClippableProps, import('../types').ClippableState>, e: any): any;
    dragControlStart(moveable: import('../types').MoveableManagerInterface<import('../types').ClippableProps, import('../types').ClippableState>, e: any): boolean;
    dragControl(moveable: import('../types').MoveableManagerInterface<import('../types').ClippableProps & import('../types').DraggableProps, import('../types').ClippableState>, e: any): boolean;
    dragControlEnd(moveable: import('../types').MoveableManagerInterface<import('../types').ClippableProps, import('../types').ClippableState>, e: any): any;
    unset(moveable: import('../types').MoveableManagerInterface<import('../types').ClippableProps, import('../types').ClippableState>): void;
}, {
    name: string;
    props: readonly ["roundable", "roundRelative", "minRoundControls", "maxRoundControls", "roundClickable", "roundPadding", "isDisplayShadowRoundControls"];
    events: readonly ["roundStart", "round", "roundEnd", "roundGroupStart", "roundGroup", "roundGroupEnd"];
    css: string[];
    className(moveable: import('../types').MoveableManagerInterface<import('../types').RoundableProps, import('../types').RoundableState>): string;
    requestStyle(): Array<keyof CSSStyleDeclaration>;
    requestChildStyle(): Array<keyof CSSStyleDeclaration>;
    render(moveable: import('../types').MoveableManagerInterface<import('../types').RoundableProps, import('../types').RoundableState>, React: import('../types').Renderer): any;
    dragControlCondition(moveable: any, e: any): boolean;
    dragGroupControlCondition(moveable: any, e: any): any;
    dragControlStart(moveable: import('../types').MoveableManagerInterface<import('../types').RoundableProps, import('../types').RoundableState>, e: any): false | import('../types').OnRoundStart;
    dragControl(moveable: import('../types').MoveableManagerInterface<import('../types').RoundableProps, import('../types').RoundableState>, e: any): false | import('../types').OnRound;
    dragControlEnd(moveable: import('../types').MoveableManagerInterface<import('../types').RoundableProps, import('../types').RoundableState>, e: any): false | import('../types').OnRoundEnd;
    dragGroupControlStart(moveable: import('../types').MoveableGroupInterface<import('../types').RoundableProps, import('../types').RoundableState>, e: any): any;
    dragGroupControl(moveable: import('../types').MoveableGroupInterface<import('../types').RoundableProps, import('../types').RoundableState>, e: any): false | import('../types').OnRoundGroup;
    dragGroupControlEnd(moveable: import('../types').MoveableGroupInterface<import('../types').RoundableProps, import('../types').RoundableState>, e: any): false | import('../types').OnRoundGroupEnd;
    unset(moveable: import('../types').MoveableManagerInterface<import('../types').RoundableProps, import('../types').RoundableState>): void;
}, {
    name: string;
    props: readonly ["defaultGroupRotate", "useDefaultGroupRotate", "defaultGroupOrigin", "groupable", "groupableProps", "targetGroups", "hideChildMoveableDefaultLines"];
    events: readonly [];
    render(moveable: import('../types').MoveableGroupInterface<import('../types').GroupableProps>, React: import('../types').Renderer): any[];
}, {
    readonly name: "individualGroupable";
    readonly props: readonly ["individualGroupable", "individualGroupableProps"];
    readonly events: readonly [];
}, {
    readonly events: readonly ["click", "clickGroup"];
    readonly props: readonly ["clickable"];
    readonly name: "clickable";
} & {
    props: readonly ["clickable"];
    events: readonly ["click", "clickGroup"];
    always: true;
    dragRelation: "weak";
    dragStart(): void;
    dragControlStart(): void;
    dragGroupStart(moveable: import('../types').MoveableManagerInterface<import('../types').ClickableProps>, e: any): void;
    dragEnd(moveable: import('../types').MoveableManagerInterface<import('../types').ClickableProps>, e: any): void;
    dragGroupEnd(moveable: import('../types').MoveableGroupInterface<import('../types').ClickableProps>, e: any): void;
    dragControlEnd(moveable: import('../types').MoveableManagerInterface<import('../types').ClickableProps>, e: any): void;
    dragGroupControlEnd(moveable: import('../types').MoveableManagerInterface<import('../types').ClickableProps>, e: any): void;
}, {
    name: string;
    props: readonly ["dragArea", "passDragArea"];
    events: readonly ["click", "clickGroup"];
    render(moveable: import('../types').MoveableManagerInterface<import('../types').GroupableProps>, React: import('../types').Renderer): any[];
    dragStart(moveable: import('../types').MoveableManagerInterface, { datas, clientX, clientY, inputEvent }: any): boolean;
    drag(moveable: import('../types').MoveableManagerInterface, { datas, inputEvent }: any): boolean;
    dragEnd(moveable: import('../types').MoveableManagerInterface<import('../types').DragAreaProps>, e: any): boolean;
    dragGroupStart(moveable: import('../types').MoveableGroupInterface, e: any): any;
    dragGroup(moveable: import('../types').MoveableGroupInterface, e: any): any;
    dragGroupEnd(moveable: import('../types').MoveableGroupInterface<import('../types').DragAreaProps>, e: any): any;
    unset(moveable: import('../types').MoveableManagerInterface<import('../types').DragAreaProps>): void;
    enableNativeEvent(moveable: import('../types').MoveableManagerInterface<import('../types').DragAreaProps>): void;
}, {
    readonly name: "renderable";
    readonly props: readonly [];
    readonly events: readonly ["renderStart", "render", "renderEnd", "renderGroupStart", "renderGroup", "renderGroupEnd"];
    readonly dragRelation: "weak";
    readonly dragStart: (moveable: import('../types').MoveableManagerInterface<import('../types').RenderableProps>, e: any) => void;
    readonly drag: (moveable: import('../types').MoveableManagerInterface<import('../types').RenderableProps>, e: any) => void;
    readonly dragAfter: (moveable: import('../types').MoveableManagerInterface<import('../types').RenderableProps>, e: any) => any;
    readonly dragEnd: (moveable: import('../types').MoveableManagerInterface<import('../types').RenderableProps>, e: any) => void;
    readonly dragGroupStart: (moveable: import('../types').MoveableGroupInterface<import('../types').RenderableProps>, e: any) => void;
    readonly dragGroup: (moveable: import('../types').MoveableGroupInterface<import('../types').RenderableProps>, e: any) => void;
    readonly dragGroupEnd: (moveable: import('../types').MoveableGroupInterface<import('../types').RenderableProps>, e: any) => void;
    readonly dragControlStart: (moveable: import('../types').MoveableManagerInterface<import('../types').RenderableProps>, e: any) => any;
    readonly dragControl: (moveable: import('../types').MoveableManagerInterface<import('../types').RenderableProps>, e: any) => any;
    readonly dragControlAfter: (moveable: import('../types').MoveableManagerInterface<import('../types').RenderableProps>, e: any) => any;
    readonly dragControlEnd: (moveable: import('../types').MoveableManagerInterface<import('../types').RenderableProps>, e: any) => any;
    readonly dragGroupControlStart: (moveable: import('../types').MoveableGroupInterface<import('../types').RenderableProps>, e: any) => any;
    readonly dragGroupControl: (moveable: import('../types').MoveableGroupInterface<import('../types').RenderableProps>, e: any) => any;
    readonly dragGroupControlEnd: (moveable: import('../types').MoveableGroupInterface<import('../types').RenderableProps>, e: any) => any;
    readonly fillDragParams: (moveable: import('../types').MoveableManagerInterface<import('../types').RenderableProps>, e: any) => import('../types').OnRender;
    readonly fillDragEndParams: (moveable: import('../types').MoveableManagerInterface<import('../types').RenderableProps>, e: any) => import('../types').OnRenderEnd;
}];
export declare const MOVEABLE_EVENTS: Array<(typeof MOVEABLE_ABLES)[number]["events"][number]>;
export declare const MOVEABLE_PROPS: Array<(typeof MOVEABLE_ABLES)[number]["props"][number]>;
export declare const MOVEABLE_REACT_EVENTS: Array<`on${Capitalize<(typeof MOVEABLE_ABLES)[number]["events"][number]>}`>;
