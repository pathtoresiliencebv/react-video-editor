import { default as EventEmitter } from '@scena/event-emitter';
import { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents, ScrollOptions, ZoomOptions, GetScollPosOptions, ScrollCenterOptions, SetOptions } from './types';

/**
 * @sort 1
 */
declare class InfiniteViewer extends EventEmitter<InfiniteViewerEvents> {
    private _containerElement;
    options: InfiniteViewerOptions;
    static addProperties(properties: any[], prototype: any): void;
    private injectResult;
    private wrapperElement;
    private scrollAreaElement;
    private horizontalScrollbar;
    private verticalScrollbar;
    private gesto;
    private offsetX;
    private offsetY;
    private containerWidth;
    private containerHeight;
    private viewportWidth;
    private viewportHeight;
    private viewportScrollWidth;
    private viewportScrollHeight;
    private scrollLeft;
    private scrollTop;
    private _scrollTimer;
    private _zoomTimer;
    private _viewportElement;
    private _wheelContainerElement;
    private dragFlag;
    private isLoop;
    private _tempScale;
    private _tempRect;
    private _tempRectTimer;
    private _onDestroys;
    private _asLeft;
    private _asTop;
    /**
     * @sort 1
     */
    constructor(_containerElement: HTMLElement, viewportElement?: HTMLElement | Partial<InfiniteViewerOptions>, options?: Partial<InfiniteViewerOptions>);
    /**
     * Get Container Element
     */
    getContainer(): HTMLElement;
    /**
     * Get Wheel Container Element
     */
    getWheelContainer(): HTMLElement;
    /**
     * Get Viewport Element
     */
    getViewport(): HTMLElement;
    /**
     * Get Wrapper Element
     */
    getWrapper(): HTMLElement;
    /**
     * Get Scroll Area Element
     */
    geScrollArea(): HTMLElement;
    /**
     * Destroy elements, properties, and events.
     */
    destroy(): void;
    /**
     * Gets the number of pixels that an element's content is scrolled vertically.
     */
    getScrollTop(options?: GetScollPosOptions | boolean): number;
    /**
     * Gets the number of pixels that an element's content is scrolled vertically.
     */
    getScrollLeft(options?: GetScollPosOptions | boolean): number;
    /**
     * Gets measurement of the width of an element's content with overflow
     */
    getScrollWidth(isZoom?: boolean): number;
    /**
     * Gets measurement of the height of an element's content with overflow
     */
    getScrollHeight(isZoom?: boolean): number;
    /**
     * Scroll the element to the center
     */
    scrollCenter(options?: ScrollCenterOptions): boolean;
    /**
     * Update Viewer Sizes
     * @method
     */
    resize: () => void;
    /**
     * Move to that position or zoom.
     * @since 0.25.0
     */
    setTo(options: SetOptions): void;
    /**
     * Move by the position or zoom delta value.
     * @since 0.25.0
     */
    setBy(options: SetOptions): void;
    /**
     * Scrolls the container by the given amount.
     */
    scrollBy(deltaX: number, deltaY: number, options?: ScrollOptions): boolean;
    /**
     * Scrolls the container to set of coordinates.
     * @param scrollLeft
     * @param scrollTop
     */
    scrollTo(x: number, y: number, options?: ScrollOptions): boolean;
    /**
     * Set viewer zoom by the given amount
     */
    zoomBy(deltaZoom: number | number[], options?: ZoomOptions): void;
    /**
     * Set viewer zoom
     */
    setZoom(zoom: number | number[], options?: ZoomOptions): void;
    getViewportWidth(): number;
    getViewportHeight(): number;
    getViewportScrollWidth(): number;
    getViewportScrollHeight(): number;
    getContainerWidth(): number;
    getContainerHeight(): number;
    /**
     * Get viewer zoom
     */
    getZoom(): number;
    /**
     * Get viewer zoomX
     * @since 0.20.0
     */
    getZoomX(): number;
    /**
     * Get viewer zoom
     * @since 0.20.0
     */
    getZoomY(): number;
    /**
     * get x ranges
     */
    getRangeX(isZoom?: boolean, isReal?: boolean): number[];
    /**
     * get y ranges
     */
    getRangeY(isZoom?: boolean, isReal?: boolean): number[];
    private init;
    private render;
    private renderScroll;
    private move;
    private setDisplayVerticalScroll;
    private setDisplayHorizontalScroll;
    private _onScroll;
    private onWheel;
    private onGestureStart;
    private onGestureChange;
    private onGestureEnd;
    private _startZoomAnimation;
    private _startScrollAnimation;
    private _startScrollAnimationBySpeed;
    private _pauseScrollAnimation;
    private _pauseZoomAnimation;
    private getScrollAreaWidth;
    private getScrollAreaHeight;
    private _triggerPinch;
    private _setClientRect;
    private _zoomByClient;
    private _setZoom;
    private _scrollBy;
    private _scrollTo;
    private _scrollToType;
    private _getRangeCoord;
    private _emitScrollEvent;
    private _getScrollRangeX;
    private _getScrollRangeY;
}
interface InfiniteViewer extends InfiniteViewerProperties {
}
export default InfiniteViewer;
